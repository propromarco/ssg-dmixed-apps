//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.12.04 at 01:40:50 PM MEZ 
//


package eu.europa.publications.formex.ted.schema;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for annex_d1_f21 complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="annex_d1_f21">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;choice>
 *           &lt;element name="D_ACCORDANCE_ARTICLE">
 *             &lt;complexType>
 *               &lt;complexContent>
 *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                   &lt;sequence>
 *                     &lt;choice minOccurs="0">
 *                       &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_PROC_OPEN"/>
 *                       &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_PROC_RESTRICTED"/>
 *                     &lt;/choice>
 *                     &lt;choice minOccurs="0">
 *                       &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_TECHNICAL"/>
 *                       &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_ARTISTIC"/>
 *                       &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_PROTECT_RIGHTS"/>
 *                     &lt;/choice>
 *                     &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_EXTREME_URGENCY" minOccurs="0"/>
 *                     &lt;element name="D_REPETITION_EXISTING" type="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}empty" minOccurs="0"/>
 *                     &lt;choice minOccurs="0">
 *                       &lt;element name="D_FROM_WINDING_PROVIDER" type="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}empty"/>
 *                       &lt;element name="D_FROM_LIQUIDATOR_CREDITOR" type="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}empty"/>
 *                     &lt;/choice>
 *                   &lt;/sequence>
 *                 &lt;/restriction>
 *               &lt;/complexContent>
 *             &lt;/complexType>
 *           &lt;/element>
 *           &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}annex_part2"/>
 *         &lt;/choice>
 *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_JUSTIFICATION"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "annex_d1_f21", propOrder = {
    "doutsidescope",
    "daccordancearticle",
    "djustification"
})
public class AnnexD1F21
    implements Equals, HashCode, ToString
{

    @XmlElement(name = "D_OUTSIDE_SCOPE")
    protected Empty doutsidescope;
    @XmlElement(name = "D_ACCORDANCE_ARTICLE")
    protected AnnexD1F21 .DACCORDANCEARTICLE daccordancearticle;
    @XmlElement(name = "D_JUSTIFICATION", required = true)
    protected TextFtMultiLines djustification;

    /**
     * Other justification for the award of the award of the contract without prior publication
     * 
     * @return
     *     possible object is
     *     {@link Empty }
     *     
     */
    public Empty getDOUTSIDESCOPE() {
        return doutsidescope;
    }

    /**
     * Sets the value of the doutsidescope property.
     * 
     * @param value
     *     allowed object is
     *     {@link Empty }
     *     
     */
    public void setDOUTSIDESCOPE(Empty value) {
        this.doutsidescope = value;
    }

    /**
     * Gets the value of the daccordancearticle property.
     * 
     * @return
     *     possible object is
     *     {@link AnnexD1F21 .DACCORDANCEARTICLE }
     *     
     */
    public AnnexD1F21 .DACCORDANCEARTICLE getDACCORDANCEARTICLE() {
        return daccordancearticle;
    }

    /**
     * Sets the value of the daccordancearticle property.
     * 
     * @param value
     *     allowed object is
     *     {@link AnnexD1F21 .DACCORDANCEARTICLE }
     *     
     */
    public void setDACCORDANCEARTICLE(AnnexD1F21 .DACCORDANCEARTICLE value) {
        this.daccordancearticle = value;
    }

    /**
     * Gets the value of the djustification property.
     * 
     * @return
     *     possible object is
     *     {@link TextFtMultiLines }
     *     
     */
    public TextFtMultiLines getDJUSTIFICATION() {
        return djustification;
    }

    /**
     * Sets the value of the djustification property.
     * 
     * @param value
     *     allowed object is
     *     {@link TextFtMultiLines }
     *     
     */
    public void setDJUSTIFICATION(TextFtMultiLines value) {
        this.djustification = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AnnexD1F21)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final AnnexD1F21 that = ((AnnexD1F21) object);
        {
            Empty lhsDOUTSIDESCOPE;
            lhsDOUTSIDESCOPE = this.getDOUTSIDESCOPE();
            Empty rhsDOUTSIDESCOPE;
            rhsDOUTSIDESCOPE = that.getDOUTSIDESCOPE();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "doutsidescope", lhsDOUTSIDESCOPE), LocatorUtils.property(thatLocator, "doutsidescope", rhsDOUTSIDESCOPE), lhsDOUTSIDESCOPE, rhsDOUTSIDESCOPE)) {
                return false;
            }
        }
        {
            AnnexD1F21 .DACCORDANCEARTICLE lhsDACCORDANCEARTICLE;
            lhsDACCORDANCEARTICLE = this.getDACCORDANCEARTICLE();
            AnnexD1F21 .DACCORDANCEARTICLE rhsDACCORDANCEARTICLE;
            rhsDACCORDANCEARTICLE = that.getDACCORDANCEARTICLE();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "daccordancearticle", lhsDACCORDANCEARTICLE), LocatorUtils.property(thatLocator, "daccordancearticle", rhsDACCORDANCEARTICLE), lhsDACCORDANCEARTICLE, rhsDACCORDANCEARTICLE)) {
                return false;
            }
        }
        {
            TextFtMultiLines lhsDJUSTIFICATION;
            lhsDJUSTIFICATION = this.getDJUSTIFICATION();
            TextFtMultiLines rhsDJUSTIFICATION;
            rhsDJUSTIFICATION = that.getDJUSTIFICATION();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "djustification", lhsDJUSTIFICATION), LocatorUtils.property(thatLocator, "djustification", rhsDJUSTIFICATION), lhsDJUSTIFICATION, rhsDJUSTIFICATION)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            Empty theDOUTSIDESCOPE;
            theDOUTSIDESCOPE = this.getDOUTSIDESCOPE();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "doutsidescope", theDOUTSIDESCOPE), currentHashCode, theDOUTSIDESCOPE);
        }
        {
            AnnexD1F21 .DACCORDANCEARTICLE theDACCORDANCEARTICLE;
            theDACCORDANCEARTICLE = this.getDACCORDANCEARTICLE();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "daccordancearticle", theDACCORDANCEARTICLE), currentHashCode, theDACCORDANCEARTICLE);
        }
        {
            TextFtMultiLines theDJUSTIFICATION;
            theDJUSTIFICATION = this.getDJUSTIFICATION();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "djustification", theDJUSTIFICATION), currentHashCode, theDJUSTIFICATION);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            Empty theDOUTSIDESCOPE;
            theDOUTSIDESCOPE = this.getDOUTSIDESCOPE();
            strategy.appendField(locator, this, "doutsidescope", buffer, theDOUTSIDESCOPE);
        }
        {
            AnnexD1F21 .DACCORDANCEARTICLE theDACCORDANCEARTICLE;
            theDACCORDANCEARTICLE = this.getDACCORDANCEARTICLE();
            strategy.appendField(locator, this, "daccordancearticle", buffer, theDACCORDANCEARTICLE);
        }
        {
            TextFtMultiLines theDJUSTIFICATION;
            theDJUSTIFICATION = this.getDJUSTIFICATION();
            strategy.appendField(locator, this, "djustification", buffer, theDJUSTIFICATION);
        }
        return buffer;
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;choice minOccurs="0">
     *           &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_PROC_OPEN"/>
     *           &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_PROC_RESTRICTED"/>
     *         &lt;/choice>
     *         &lt;choice minOccurs="0">
     *           &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_TECHNICAL"/>
     *           &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_ARTISTIC"/>
     *           &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_PROTECT_RIGHTS"/>
     *         &lt;/choice>
     *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_EXTREME_URGENCY" minOccurs="0"/>
     *         &lt;element name="D_REPETITION_EXISTING" type="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}empty" minOccurs="0"/>
     *         &lt;choice minOccurs="0">
     *           &lt;element name="D_FROM_WINDING_PROVIDER" type="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}empty"/>
     *           &lt;element name="D_FROM_LIQUIDATOR_CREDITOR" type="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}empty"/>
     *         &lt;/choice>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "dprocrestricted",
        "dprocopen",
        "dprotectrights",
        "dartistic",
        "dtechnical",
        "dextremeurgency",
        "drepetitionexisting",
        "dfromliquidatorcreditor",
        "dfromwindingprovider"
    })
    public static class DACCORDANCEARTICLE
        implements Equals, HashCode, ToString
    {

        @XmlElement(name = "D_PROC_RESTRICTED")
        protected Empty dprocrestricted;
        @XmlElement(name = "D_PROC_OPEN")
        protected Empty dprocopen;
        @XmlElement(name = "D_PROTECT_RIGHTS")
        protected Empty dprotectrights;
        @XmlElement(name = "D_ARTISTIC")
        protected Empty dartistic;
        @XmlElement(name = "D_TECHNICAL")
        protected Empty dtechnical;
        @XmlElement(name = "D_EXTREME_URGENCY")
        protected Empty dextremeurgency;
        @XmlElement(name = "D_REPETITION_EXISTING")
        protected Empty drepetitionexisting;
        @XmlElement(name = "D_FROM_LIQUIDATOR_CREDITOR")
        protected Empty dfromliquidatorcreditor;
        @XmlElement(name = "D_FROM_WINDING_PROVIDER")
        protected Empty dfromwindingprovider;

        /**
         * Gets the value of the dprocrestricted property.
         * 
         * @return
         *     possible object is
         *     {@link Empty }
         *     
         */
        public Empty getDPROCRESTRICTED() {
            return dprocrestricted;
        }

        /**
         * Sets the value of the dprocrestricted property.
         * 
         * @param value
         *     allowed object is
         *     {@link Empty }
         *     
         */
        public void setDPROCRESTRICTED(Empty value) {
            this.dprocrestricted = value;
        }

        /**
         * Gets the value of the dprocopen property.
         * 
         * @return
         *     possible object is
         *     {@link Empty }
         *     
         */
        public Empty getDPROCOPEN() {
            return dprocopen;
        }

        /**
         * Sets the value of the dprocopen property.
         * 
         * @param value
         *     allowed object is
         *     {@link Empty }
         *     
         */
        public void setDPROCOPEN(Empty value) {
            this.dprocopen = value;
        }

        /**
         * Gets the value of the dprotectrights property.
         * 
         * @return
         *     possible object is
         *     {@link Empty }
         *     
         */
        public Empty getDPROTECTRIGHTS() {
            return dprotectrights;
        }

        /**
         * Sets the value of the dprotectrights property.
         * 
         * @param value
         *     allowed object is
         *     {@link Empty }
         *     
         */
        public void setDPROTECTRIGHTS(Empty value) {
            this.dprotectrights = value;
        }

        /**
         * Gets the value of the dartistic property.
         * 
         * @return
         *     possible object is
         *     {@link Empty }
         *     
         */
        public Empty getDARTISTIC() {
            return dartistic;
        }

        /**
         * Sets the value of the dartistic property.
         * 
         * @param value
         *     allowed object is
         *     {@link Empty }
         *     
         */
        public void setDARTISTIC(Empty value) {
            this.dartistic = value;
        }

        /**
         * Gets the value of the dtechnical property.
         * 
         * @return
         *     possible object is
         *     {@link Empty }
         *     
         */
        public Empty getDTECHNICAL() {
            return dtechnical;
        }

        /**
         * Sets the value of the dtechnical property.
         * 
         * @param value
         *     allowed object is
         *     {@link Empty }
         *     
         */
        public void setDTECHNICAL(Empty value) {
            this.dtechnical = value;
        }

        /**
         * Gets the value of the dextremeurgency property.
         * 
         * @return
         *     possible object is
         *     {@link Empty }
         *     
         */
        public Empty getDEXTREMEURGENCY() {
            return dextremeurgency;
        }

        /**
         * Sets the value of the dextremeurgency property.
         * 
         * @param value
         *     allowed object is
         *     {@link Empty }
         *     
         */
        public void setDEXTREMEURGENCY(Empty value) {
            this.dextremeurgency = value;
        }

        /**
         * Gets the value of the drepetitionexisting property.
         * 
         * @return
         *     possible object is
         *     {@link Empty }
         *     
         */
        public Empty getDREPETITIONEXISTING() {
            return drepetitionexisting;
        }

        /**
         * Sets the value of the drepetitionexisting property.
         * 
         * @param value
         *     allowed object is
         *     {@link Empty }
         *     
         */
        public void setDREPETITIONEXISTING(Empty value) {
            this.drepetitionexisting = value;
        }

        /**
         * Gets the value of the dfromliquidatorcreditor property.
         * 
         * @return
         *     possible object is
         *     {@link Empty }
         *     
         */
        public Empty getDFROMLIQUIDATORCREDITOR() {
            return dfromliquidatorcreditor;
        }

        /**
         * Sets the value of the dfromliquidatorcreditor property.
         * 
         * @param value
         *     allowed object is
         *     {@link Empty }
         *     
         */
        public void setDFROMLIQUIDATORCREDITOR(Empty value) {
            this.dfromliquidatorcreditor = value;
        }

        /**
         * Gets the value of the dfromwindingprovider property.
         * 
         * @return
         *     possible object is
         *     {@link Empty }
         *     
         */
        public Empty getDFROMWINDINGPROVIDER() {
            return dfromwindingprovider;
        }

        /**
         * Sets the value of the dfromwindingprovider property.
         * 
         * @param value
         *     allowed object is
         *     {@link Empty }
         *     
         */
        public void setDFROMWINDINGPROVIDER(Empty value) {
            this.dfromwindingprovider = value;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof AnnexD1F21 .DACCORDANCEARTICLE)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final AnnexD1F21 .DACCORDANCEARTICLE that = ((AnnexD1F21 .DACCORDANCEARTICLE) object);
            {
                Empty lhsDPROCRESTRICTED;
                lhsDPROCRESTRICTED = this.getDPROCRESTRICTED();
                Empty rhsDPROCRESTRICTED;
                rhsDPROCRESTRICTED = that.getDPROCRESTRICTED();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "dprocrestricted", lhsDPROCRESTRICTED), LocatorUtils.property(thatLocator, "dprocrestricted", rhsDPROCRESTRICTED), lhsDPROCRESTRICTED, rhsDPROCRESTRICTED)) {
                    return false;
                }
            }
            {
                Empty lhsDPROCOPEN;
                lhsDPROCOPEN = this.getDPROCOPEN();
                Empty rhsDPROCOPEN;
                rhsDPROCOPEN = that.getDPROCOPEN();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "dprocopen", lhsDPROCOPEN), LocatorUtils.property(thatLocator, "dprocopen", rhsDPROCOPEN), lhsDPROCOPEN, rhsDPROCOPEN)) {
                    return false;
                }
            }
            {
                Empty lhsDPROTECTRIGHTS;
                lhsDPROTECTRIGHTS = this.getDPROTECTRIGHTS();
                Empty rhsDPROTECTRIGHTS;
                rhsDPROTECTRIGHTS = that.getDPROTECTRIGHTS();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "dprotectrights", lhsDPROTECTRIGHTS), LocatorUtils.property(thatLocator, "dprotectrights", rhsDPROTECTRIGHTS), lhsDPROTECTRIGHTS, rhsDPROTECTRIGHTS)) {
                    return false;
                }
            }
            {
                Empty lhsDARTISTIC;
                lhsDARTISTIC = this.getDARTISTIC();
                Empty rhsDARTISTIC;
                rhsDARTISTIC = that.getDARTISTIC();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "dartistic", lhsDARTISTIC), LocatorUtils.property(thatLocator, "dartistic", rhsDARTISTIC), lhsDARTISTIC, rhsDARTISTIC)) {
                    return false;
                }
            }
            {
                Empty lhsDTECHNICAL;
                lhsDTECHNICAL = this.getDTECHNICAL();
                Empty rhsDTECHNICAL;
                rhsDTECHNICAL = that.getDTECHNICAL();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "dtechnical", lhsDTECHNICAL), LocatorUtils.property(thatLocator, "dtechnical", rhsDTECHNICAL), lhsDTECHNICAL, rhsDTECHNICAL)) {
                    return false;
                }
            }
            {
                Empty lhsDEXTREMEURGENCY;
                lhsDEXTREMEURGENCY = this.getDEXTREMEURGENCY();
                Empty rhsDEXTREMEURGENCY;
                rhsDEXTREMEURGENCY = that.getDEXTREMEURGENCY();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "dextremeurgency", lhsDEXTREMEURGENCY), LocatorUtils.property(thatLocator, "dextremeurgency", rhsDEXTREMEURGENCY), lhsDEXTREMEURGENCY, rhsDEXTREMEURGENCY)) {
                    return false;
                }
            }
            {
                Empty lhsDREPETITIONEXISTING;
                lhsDREPETITIONEXISTING = this.getDREPETITIONEXISTING();
                Empty rhsDREPETITIONEXISTING;
                rhsDREPETITIONEXISTING = that.getDREPETITIONEXISTING();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "drepetitionexisting", lhsDREPETITIONEXISTING), LocatorUtils.property(thatLocator, "drepetitionexisting", rhsDREPETITIONEXISTING), lhsDREPETITIONEXISTING, rhsDREPETITIONEXISTING)) {
                    return false;
                }
            }
            {
                Empty lhsDFROMLIQUIDATORCREDITOR;
                lhsDFROMLIQUIDATORCREDITOR = this.getDFROMLIQUIDATORCREDITOR();
                Empty rhsDFROMLIQUIDATORCREDITOR;
                rhsDFROMLIQUIDATORCREDITOR = that.getDFROMLIQUIDATORCREDITOR();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "dfromliquidatorcreditor", lhsDFROMLIQUIDATORCREDITOR), LocatorUtils.property(thatLocator, "dfromliquidatorcreditor", rhsDFROMLIQUIDATORCREDITOR), lhsDFROMLIQUIDATORCREDITOR, rhsDFROMLIQUIDATORCREDITOR)) {
                    return false;
                }
            }
            {
                Empty lhsDFROMWINDINGPROVIDER;
                lhsDFROMWINDINGPROVIDER = this.getDFROMWINDINGPROVIDER();
                Empty rhsDFROMWINDINGPROVIDER;
                rhsDFROMWINDINGPROVIDER = that.getDFROMWINDINGPROVIDER();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "dfromwindingprovider", lhsDFROMWINDINGPROVIDER), LocatorUtils.property(thatLocator, "dfromwindingprovider", rhsDFROMWINDINGPROVIDER), lhsDFROMWINDINGPROVIDER, rhsDFROMWINDINGPROVIDER)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                Empty theDPROCRESTRICTED;
                theDPROCRESTRICTED = this.getDPROCRESTRICTED();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dprocrestricted", theDPROCRESTRICTED), currentHashCode, theDPROCRESTRICTED);
            }
            {
                Empty theDPROCOPEN;
                theDPROCOPEN = this.getDPROCOPEN();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dprocopen", theDPROCOPEN), currentHashCode, theDPROCOPEN);
            }
            {
                Empty theDPROTECTRIGHTS;
                theDPROTECTRIGHTS = this.getDPROTECTRIGHTS();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dprotectrights", theDPROTECTRIGHTS), currentHashCode, theDPROTECTRIGHTS);
            }
            {
                Empty theDARTISTIC;
                theDARTISTIC = this.getDARTISTIC();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dartistic", theDARTISTIC), currentHashCode, theDARTISTIC);
            }
            {
                Empty theDTECHNICAL;
                theDTECHNICAL = this.getDTECHNICAL();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dtechnical", theDTECHNICAL), currentHashCode, theDTECHNICAL);
            }
            {
                Empty theDEXTREMEURGENCY;
                theDEXTREMEURGENCY = this.getDEXTREMEURGENCY();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dextremeurgency", theDEXTREMEURGENCY), currentHashCode, theDEXTREMEURGENCY);
            }
            {
                Empty theDREPETITIONEXISTING;
                theDREPETITIONEXISTING = this.getDREPETITIONEXISTING();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "drepetitionexisting", theDREPETITIONEXISTING), currentHashCode, theDREPETITIONEXISTING);
            }
            {
                Empty theDFROMLIQUIDATORCREDITOR;
                theDFROMLIQUIDATORCREDITOR = this.getDFROMLIQUIDATORCREDITOR();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dfromliquidatorcreditor", theDFROMLIQUIDATORCREDITOR), currentHashCode, theDFROMLIQUIDATORCREDITOR);
            }
            {
                Empty theDFROMWINDINGPROVIDER;
                theDFROMWINDINGPROVIDER = this.getDFROMWINDINGPROVIDER();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dfromwindingprovider", theDFROMWINDINGPROVIDER), currentHashCode, theDFROMWINDINGPROVIDER);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                Empty theDPROCRESTRICTED;
                theDPROCRESTRICTED = this.getDPROCRESTRICTED();
                strategy.appendField(locator, this, "dprocrestricted", buffer, theDPROCRESTRICTED);
            }
            {
                Empty theDPROCOPEN;
                theDPROCOPEN = this.getDPROCOPEN();
                strategy.appendField(locator, this, "dprocopen", buffer, theDPROCOPEN);
            }
            {
                Empty theDPROTECTRIGHTS;
                theDPROTECTRIGHTS = this.getDPROTECTRIGHTS();
                strategy.appendField(locator, this, "dprotectrights", buffer, theDPROTECTRIGHTS);
            }
            {
                Empty theDARTISTIC;
                theDARTISTIC = this.getDARTISTIC();
                strategy.appendField(locator, this, "dartistic", buffer, theDARTISTIC);
            }
            {
                Empty theDTECHNICAL;
                theDTECHNICAL = this.getDTECHNICAL();
                strategy.appendField(locator, this, "dtechnical", buffer, theDTECHNICAL);
            }
            {
                Empty theDEXTREMEURGENCY;
                theDEXTREMEURGENCY = this.getDEXTREMEURGENCY();
                strategy.appendField(locator, this, "dextremeurgency", buffer, theDEXTREMEURGENCY);
            }
            {
                Empty theDREPETITIONEXISTING;
                theDREPETITIONEXISTING = this.getDREPETITIONEXISTING();
                strategy.appendField(locator, this, "drepetitionexisting", buffer, theDREPETITIONEXISTING);
            }
            {
                Empty theDFROMLIQUIDATORCREDITOR;
                theDFROMLIQUIDATORCREDITOR = this.getDFROMLIQUIDATORCREDITOR();
                strategy.appendField(locator, this, "dfromliquidatorcreditor", buffer, theDFROMLIQUIDATORCREDITOR);
            }
            {
                Empty theDFROMWINDINGPROVIDER;
                theDFROMWINDINGPROVIDER = this.getDFROMWINDINGPROVIDER();
                strategy.appendField(locator, this, "dfromwindingprovider", buffer, theDFROMWINDINGPROVIDER);
            }
            return buffer;
        }

    }

}
