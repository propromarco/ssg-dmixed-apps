//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.12.04 at 01:40:50 PM MEZ 
//


package eu.europa.publications.formex.ted.schema;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for form_section complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="form_section">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;choice>
 *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}F01_2014" maxOccurs="unbounded"/>
 *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}F02_2014" maxOccurs="unbounded"/>
 *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}F03_2014" maxOccurs="unbounded"/>
 *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}F04_2014" maxOccurs="unbounded"/>
 *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}F05_2014" maxOccurs="unbounded"/>
 *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}F06_2014" maxOccurs="unbounded"/>
 *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}F07_2014" maxOccurs="unbounded"/>
 *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}F08_2014" maxOccurs="unbounded"/>
 *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}F12_2014" maxOccurs="unbounded"/>
 *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}F13_2014" maxOccurs="unbounded"/>
 *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}F14_2014" maxOccurs="unbounded"/>
 *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}F15_2014" maxOccurs="unbounded"/>
 *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}F20_2014" maxOccurs="unbounded"/>
 *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}F21_2014" maxOccurs="unbounded"/>
 *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}F22_2014" maxOccurs="unbounded"/>
 *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}F23_2014" maxOccurs="unbounded"/>
 *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}F24_2014" maxOccurs="unbounded"/>
 *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}F25_2014" maxOccurs="unbounded"/>
 *       &lt;/choice>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "form_section", propOrder = {
    "f252014S",
    "f242014S",
    "f232014S",
    "f222014S",
    "f212014S",
    "f202014S",
    "f152014S",
    "f142014S",
    "f132014S",
    "f122014S",
    "f082014S",
    "f072014S",
    "f062014S",
    "f052014S",
    "f042014S",
    "f032014S",
    "f022014S",
    "f012014S"
})
public class FormSection
    implements Equals, HashCode, ToString
{

    @XmlElement(name = "F25_2014")
    protected List<F252014> f252014S;
    @XmlElement(name = "F24_2014")
    protected List<F242014> f242014S;
    @XmlElement(name = "F23_2014")
    protected List<F232014> f232014S;
    @XmlElement(name = "F22_2014")
    protected List<F222014> f222014S;
    @XmlElement(name = "F21_2014")
    protected List<F212014> f212014S;
    @XmlElement(name = "F20_2014")
    protected List<F202014> f202014S;
    @XmlElement(name = "F15_2014")
    protected List<F152014> f152014S;
    @XmlElement(name = "F14_2014")
    protected List<F142014> f142014S;
    @XmlElement(name = "F13_2014")
    protected List<F132014> f132014S;
    @XmlElement(name = "F12_2014")
    protected List<F122014> f122014S;
    @XmlElement(name = "F08_2014")
    protected List<F082014> f082014S;
    @XmlElement(name = "F07_2014")
    protected List<F072014> f072014S;
    @XmlElement(name = "F06_2014")
    protected List<F062014> f062014S;
    @XmlElement(name = "F05_2014")
    protected List<F052014> f052014S;
    @XmlElement(name = "F04_2014")
    protected List<F042014> f042014S;
    @XmlElement(name = "F03_2014")
    protected List<F032014> f032014S;
    @XmlElement(name = "F02_2014")
    protected List<F022014> f022014S;
    @XmlElement(name = "F01_2014")
    protected List<F012014> f012014S;

    /**
     * Gets the value of the f252014S property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the f252014S property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getF252014S().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link F252014 }
     * 
     * 
     */
    public List<F252014> getF252014S() {
        if (f252014S == null) {
            f252014S = new ArrayList<F252014>();
        }
        return this.f252014S;
    }

    /**
     * Gets the value of the f242014S property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the f242014S property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getF242014S().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link F242014 }
     * 
     * 
     */
    public List<F242014> getF242014S() {
        if (f242014S == null) {
            f242014S = new ArrayList<F242014>();
        }
        return this.f242014S;
    }

    /**
     * Gets the value of the f232014S property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the f232014S property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getF232014S().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link F232014 }
     * 
     * 
     */
    public List<F232014> getF232014S() {
        if (f232014S == null) {
            f232014S = new ArrayList<F232014>();
        }
        return this.f232014S;
    }

    /**
     * Gets the value of the f222014S property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the f222014S property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getF222014S().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link F222014 }
     * 
     * 
     */
    public List<F222014> getF222014S() {
        if (f222014S == null) {
            f222014S = new ArrayList<F222014>();
        }
        return this.f222014S;
    }

    /**
     * Gets the value of the f212014S property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the f212014S property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getF212014S().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link F212014 }
     * 
     * 
     */
    public List<F212014> getF212014S() {
        if (f212014S == null) {
            f212014S = new ArrayList<F212014>();
        }
        return this.f212014S;
    }

    /**
     * Gets the value of the f202014S property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the f202014S property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getF202014S().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link F202014 }
     * 
     * 
     */
    public List<F202014> getF202014S() {
        if (f202014S == null) {
            f202014S = new ArrayList<F202014>();
        }
        return this.f202014S;
    }

    /**
     * Gets the value of the f152014S property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the f152014S property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getF152014S().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link F152014 }
     * 
     * 
     */
    public List<F152014> getF152014S() {
        if (f152014S == null) {
            f152014S = new ArrayList<F152014>();
        }
        return this.f152014S;
    }

    /**
     * Gets the value of the f142014S property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the f142014S property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getF142014S().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link F142014 }
     * 
     * 
     */
    public List<F142014> getF142014S() {
        if (f142014S == null) {
            f142014S = new ArrayList<F142014>();
        }
        return this.f142014S;
    }

    /**
     * Gets the value of the f132014S property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the f132014S property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getF132014S().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link F132014 }
     * 
     * 
     */
    public List<F132014> getF132014S() {
        if (f132014S == null) {
            f132014S = new ArrayList<F132014>();
        }
        return this.f132014S;
    }

    /**
     * Gets the value of the f122014S property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the f122014S property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getF122014S().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link F122014 }
     * 
     * 
     */
    public List<F122014> getF122014S() {
        if (f122014S == null) {
            f122014S = new ArrayList<F122014>();
        }
        return this.f122014S;
    }

    /**
     * Gets the value of the f082014S property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the f082014S property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getF082014S().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link F082014 }
     * 
     * 
     */
    public List<F082014> getF082014S() {
        if (f082014S == null) {
            f082014S = new ArrayList<F082014>();
        }
        return this.f082014S;
    }

    /**
     * Gets the value of the f072014S property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the f072014S property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getF072014S().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link F072014 }
     * 
     * 
     */
    public List<F072014> getF072014S() {
        if (f072014S == null) {
            f072014S = new ArrayList<F072014>();
        }
        return this.f072014S;
    }

    /**
     * Gets the value of the f062014S property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the f062014S property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getF062014S().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link F062014 }
     * 
     * 
     */
    public List<F062014> getF062014S() {
        if (f062014S == null) {
            f062014S = new ArrayList<F062014>();
        }
        return this.f062014S;
    }

    /**
     * Gets the value of the f052014S property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the f052014S property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getF052014S().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link F052014 }
     * 
     * 
     */
    public List<F052014> getF052014S() {
        if (f052014S == null) {
            f052014S = new ArrayList<F052014>();
        }
        return this.f052014S;
    }

    /**
     * Gets the value of the f042014S property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the f042014S property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getF042014S().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link F042014 }
     * 
     * 
     */
    public List<F042014> getF042014S() {
        if (f042014S == null) {
            f042014S = new ArrayList<F042014>();
        }
        return this.f042014S;
    }

    /**
     * Gets the value of the f032014S property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the f032014S property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getF032014S().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link F032014 }
     * 
     * 
     */
    public List<F032014> getF032014S() {
        if (f032014S == null) {
            f032014S = new ArrayList<F032014>();
        }
        return this.f032014S;
    }

    /**
     * Gets the value of the f022014S property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the f022014S property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getF022014S().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link F022014 }
     * 
     * 
     */
    public List<F022014> getF022014S() {
        if (f022014S == null) {
            f022014S = new ArrayList<F022014>();
        }
        return this.f022014S;
    }

    /**
     * Gets the value of the f012014S property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the f012014S property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getF012014S().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link F012014 }
     * 
     * 
     */
    public List<F012014> getF012014S() {
        if (f012014S == null) {
            f012014S = new ArrayList<F012014>();
        }
        return this.f012014S;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof FormSection)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final FormSection that = ((FormSection) object);
        {
            List<F252014> lhsF252014S;
            lhsF252014S = (((this.f252014S!= null)&&(!this.f252014S.isEmpty()))?this.getF252014S():null);
            List<F252014> rhsF252014S;
            rhsF252014S = (((that.f252014S!= null)&&(!that.f252014S.isEmpty()))?that.getF252014S():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "f252014S", lhsF252014S), LocatorUtils.property(thatLocator, "f252014S", rhsF252014S), lhsF252014S, rhsF252014S)) {
                return false;
            }
        }
        {
            List<F242014> lhsF242014S;
            lhsF242014S = (((this.f242014S!= null)&&(!this.f242014S.isEmpty()))?this.getF242014S():null);
            List<F242014> rhsF242014S;
            rhsF242014S = (((that.f242014S!= null)&&(!that.f242014S.isEmpty()))?that.getF242014S():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "f242014S", lhsF242014S), LocatorUtils.property(thatLocator, "f242014S", rhsF242014S), lhsF242014S, rhsF242014S)) {
                return false;
            }
        }
        {
            List<F232014> lhsF232014S;
            lhsF232014S = (((this.f232014S!= null)&&(!this.f232014S.isEmpty()))?this.getF232014S():null);
            List<F232014> rhsF232014S;
            rhsF232014S = (((that.f232014S!= null)&&(!that.f232014S.isEmpty()))?that.getF232014S():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "f232014S", lhsF232014S), LocatorUtils.property(thatLocator, "f232014S", rhsF232014S), lhsF232014S, rhsF232014S)) {
                return false;
            }
        }
        {
            List<F222014> lhsF222014S;
            lhsF222014S = (((this.f222014S!= null)&&(!this.f222014S.isEmpty()))?this.getF222014S():null);
            List<F222014> rhsF222014S;
            rhsF222014S = (((that.f222014S!= null)&&(!that.f222014S.isEmpty()))?that.getF222014S():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "f222014S", lhsF222014S), LocatorUtils.property(thatLocator, "f222014S", rhsF222014S), lhsF222014S, rhsF222014S)) {
                return false;
            }
        }
        {
            List<F212014> lhsF212014S;
            lhsF212014S = (((this.f212014S!= null)&&(!this.f212014S.isEmpty()))?this.getF212014S():null);
            List<F212014> rhsF212014S;
            rhsF212014S = (((that.f212014S!= null)&&(!that.f212014S.isEmpty()))?that.getF212014S():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "f212014S", lhsF212014S), LocatorUtils.property(thatLocator, "f212014S", rhsF212014S), lhsF212014S, rhsF212014S)) {
                return false;
            }
        }
        {
            List<F202014> lhsF202014S;
            lhsF202014S = (((this.f202014S!= null)&&(!this.f202014S.isEmpty()))?this.getF202014S():null);
            List<F202014> rhsF202014S;
            rhsF202014S = (((that.f202014S!= null)&&(!that.f202014S.isEmpty()))?that.getF202014S():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "f202014S", lhsF202014S), LocatorUtils.property(thatLocator, "f202014S", rhsF202014S), lhsF202014S, rhsF202014S)) {
                return false;
            }
        }
        {
            List<F152014> lhsF152014S;
            lhsF152014S = (((this.f152014S!= null)&&(!this.f152014S.isEmpty()))?this.getF152014S():null);
            List<F152014> rhsF152014S;
            rhsF152014S = (((that.f152014S!= null)&&(!that.f152014S.isEmpty()))?that.getF152014S():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "f152014S", lhsF152014S), LocatorUtils.property(thatLocator, "f152014S", rhsF152014S), lhsF152014S, rhsF152014S)) {
                return false;
            }
        }
        {
            List<F142014> lhsF142014S;
            lhsF142014S = (((this.f142014S!= null)&&(!this.f142014S.isEmpty()))?this.getF142014S():null);
            List<F142014> rhsF142014S;
            rhsF142014S = (((that.f142014S!= null)&&(!that.f142014S.isEmpty()))?that.getF142014S():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "f142014S", lhsF142014S), LocatorUtils.property(thatLocator, "f142014S", rhsF142014S), lhsF142014S, rhsF142014S)) {
                return false;
            }
        }
        {
            List<F132014> lhsF132014S;
            lhsF132014S = (((this.f132014S!= null)&&(!this.f132014S.isEmpty()))?this.getF132014S():null);
            List<F132014> rhsF132014S;
            rhsF132014S = (((that.f132014S!= null)&&(!that.f132014S.isEmpty()))?that.getF132014S():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "f132014S", lhsF132014S), LocatorUtils.property(thatLocator, "f132014S", rhsF132014S), lhsF132014S, rhsF132014S)) {
                return false;
            }
        }
        {
            List<F122014> lhsF122014S;
            lhsF122014S = (((this.f122014S!= null)&&(!this.f122014S.isEmpty()))?this.getF122014S():null);
            List<F122014> rhsF122014S;
            rhsF122014S = (((that.f122014S!= null)&&(!that.f122014S.isEmpty()))?that.getF122014S():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "f122014S", lhsF122014S), LocatorUtils.property(thatLocator, "f122014S", rhsF122014S), lhsF122014S, rhsF122014S)) {
                return false;
            }
        }
        {
            List<F082014> lhsF082014S;
            lhsF082014S = (((this.f082014S!= null)&&(!this.f082014S.isEmpty()))?this.getF082014S():null);
            List<F082014> rhsF082014S;
            rhsF082014S = (((that.f082014S!= null)&&(!that.f082014S.isEmpty()))?that.getF082014S():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "f082014S", lhsF082014S), LocatorUtils.property(thatLocator, "f082014S", rhsF082014S), lhsF082014S, rhsF082014S)) {
                return false;
            }
        }
        {
            List<F072014> lhsF072014S;
            lhsF072014S = (((this.f072014S!= null)&&(!this.f072014S.isEmpty()))?this.getF072014S():null);
            List<F072014> rhsF072014S;
            rhsF072014S = (((that.f072014S!= null)&&(!that.f072014S.isEmpty()))?that.getF072014S():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "f072014S", lhsF072014S), LocatorUtils.property(thatLocator, "f072014S", rhsF072014S), lhsF072014S, rhsF072014S)) {
                return false;
            }
        }
        {
            List<F062014> lhsF062014S;
            lhsF062014S = (((this.f062014S!= null)&&(!this.f062014S.isEmpty()))?this.getF062014S():null);
            List<F062014> rhsF062014S;
            rhsF062014S = (((that.f062014S!= null)&&(!that.f062014S.isEmpty()))?that.getF062014S():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "f062014S", lhsF062014S), LocatorUtils.property(thatLocator, "f062014S", rhsF062014S), lhsF062014S, rhsF062014S)) {
                return false;
            }
        }
        {
            List<F052014> lhsF052014S;
            lhsF052014S = (((this.f052014S!= null)&&(!this.f052014S.isEmpty()))?this.getF052014S():null);
            List<F052014> rhsF052014S;
            rhsF052014S = (((that.f052014S!= null)&&(!that.f052014S.isEmpty()))?that.getF052014S():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "f052014S", lhsF052014S), LocatorUtils.property(thatLocator, "f052014S", rhsF052014S), lhsF052014S, rhsF052014S)) {
                return false;
            }
        }
        {
            List<F042014> lhsF042014S;
            lhsF042014S = (((this.f042014S!= null)&&(!this.f042014S.isEmpty()))?this.getF042014S():null);
            List<F042014> rhsF042014S;
            rhsF042014S = (((that.f042014S!= null)&&(!that.f042014S.isEmpty()))?that.getF042014S():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "f042014S", lhsF042014S), LocatorUtils.property(thatLocator, "f042014S", rhsF042014S), lhsF042014S, rhsF042014S)) {
                return false;
            }
        }
        {
            List<F032014> lhsF032014S;
            lhsF032014S = (((this.f032014S!= null)&&(!this.f032014S.isEmpty()))?this.getF032014S():null);
            List<F032014> rhsF032014S;
            rhsF032014S = (((that.f032014S!= null)&&(!that.f032014S.isEmpty()))?that.getF032014S():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "f032014S", lhsF032014S), LocatorUtils.property(thatLocator, "f032014S", rhsF032014S), lhsF032014S, rhsF032014S)) {
                return false;
            }
        }
        {
            List<F022014> lhsF022014S;
            lhsF022014S = (((this.f022014S!= null)&&(!this.f022014S.isEmpty()))?this.getF022014S():null);
            List<F022014> rhsF022014S;
            rhsF022014S = (((that.f022014S!= null)&&(!that.f022014S.isEmpty()))?that.getF022014S():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "f022014S", lhsF022014S), LocatorUtils.property(thatLocator, "f022014S", rhsF022014S), lhsF022014S, rhsF022014S)) {
                return false;
            }
        }
        {
            List<F012014> lhsF012014S;
            lhsF012014S = (((this.f012014S!= null)&&(!this.f012014S.isEmpty()))?this.getF012014S():null);
            List<F012014> rhsF012014S;
            rhsF012014S = (((that.f012014S!= null)&&(!that.f012014S.isEmpty()))?that.getF012014S():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "f012014S", lhsF012014S), LocatorUtils.property(thatLocator, "f012014S", rhsF012014S), lhsF012014S, rhsF012014S)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<F252014> theF252014S;
            theF252014S = (((this.f252014S!= null)&&(!this.f252014S.isEmpty()))?this.getF252014S():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "f252014S", theF252014S), currentHashCode, theF252014S);
        }
        {
            List<F242014> theF242014S;
            theF242014S = (((this.f242014S!= null)&&(!this.f242014S.isEmpty()))?this.getF242014S():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "f242014S", theF242014S), currentHashCode, theF242014S);
        }
        {
            List<F232014> theF232014S;
            theF232014S = (((this.f232014S!= null)&&(!this.f232014S.isEmpty()))?this.getF232014S():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "f232014S", theF232014S), currentHashCode, theF232014S);
        }
        {
            List<F222014> theF222014S;
            theF222014S = (((this.f222014S!= null)&&(!this.f222014S.isEmpty()))?this.getF222014S():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "f222014S", theF222014S), currentHashCode, theF222014S);
        }
        {
            List<F212014> theF212014S;
            theF212014S = (((this.f212014S!= null)&&(!this.f212014S.isEmpty()))?this.getF212014S():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "f212014S", theF212014S), currentHashCode, theF212014S);
        }
        {
            List<F202014> theF202014S;
            theF202014S = (((this.f202014S!= null)&&(!this.f202014S.isEmpty()))?this.getF202014S():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "f202014S", theF202014S), currentHashCode, theF202014S);
        }
        {
            List<F152014> theF152014S;
            theF152014S = (((this.f152014S!= null)&&(!this.f152014S.isEmpty()))?this.getF152014S():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "f152014S", theF152014S), currentHashCode, theF152014S);
        }
        {
            List<F142014> theF142014S;
            theF142014S = (((this.f142014S!= null)&&(!this.f142014S.isEmpty()))?this.getF142014S():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "f142014S", theF142014S), currentHashCode, theF142014S);
        }
        {
            List<F132014> theF132014S;
            theF132014S = (((this.f132014S!= null)&&(!this.f132014S.isEmpty()))?this.getF132014S():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "f132014S", theF132014S), currentHashCode, theF132014S);
        }
        {
            List<F122014> theF122014S;
            theF122014S = (((this.f122014S!= null)&&(!this.f122014S.isEmpty()))?this.getF122014S():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "f122014S", theF122014S), currentHashCode, theF122014S);
        }
        {
            List<F082014> theF082014S;
            theF082014S = (((this.f082014S!= null)&&(!this.f082014S.isEmpty()))?this.getF082014S():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "f082014S", theF082014S), currentHashCode, theF082014S);
        }
        {
            List<F072014> theF072014S;
            theF072014S = (((this.f072014S!= null)&&(!this.f072014S.isEmpty()))?this.getF072014S():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "f072014S", theF072014S), currentHashCode, theF072014S);
        }
        {
            List<F062014> theF062014S;
            theF062014S = (((this.f062014S!= null)&&(!this.f062014S.isEmpty()))?this.getF062014S():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "f062014S", theF062014S), currentHashCode, theF062014S);
        }
        {
            List<F052014> theF052014S;
            theF052014S = (((this.f052014S!= null)&&(!this.f052014S.isEmpty()))?this.getF052014S():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "f052014S", theF052014S), currentHashCode, theF052014S);
        }
        {
            List<F042014> theF042014S;
            theF042014S = (((this.f042014S!= null)&&(!this.f042014S.isEmpty()))?this.getF042014S():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "f042014S", theF042014S), currentHashCode, theF042014S);
        }
        {
            List<F032014> theF032014S;
            theF032014S = (((this.f032014S!= null)&&(!this.f032014S.isEmpty()))?this.getF032014S():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "f032014S", theF032014S), currentHashCode, theF032014S);
        }
        {
            List<F022014> theF022014S;
            theF022014S = (((this.f022014S!= null)&&(!this.f022014S.isEmpty()))?this.getF022014S():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "f022014S", theF022014S), currentHashCode, theF022014S);
        }
        {
            List<F012014> theF012014S;
            theF012014S = (((this.f012014S!= null)&&(!this.f012014S.isEmpty()))?this.getF012014S():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "f012014S", theF012014S), currentHashCode, theF012014S);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<F252014> theF252014S;
            theF252014S = (((this.f252014S!= null)&&(!this.f252014S.isEmpty()))?this.getF252014S():null);
            strategy.appendField(locator, this, "f252014S", buffer, theF252014S);
        }
        {
            List<F242014> theF242014S;
            theF242014S = (((this.f242014S!= null)&&(!this.f242014S.isEmpty()))?this.getF242014S():null);
            strategy.appendField(locator, this, "f242014S", buffer, theF242014S);
        }
        {
            List<F232014> theF232014S;
            theF232014S = (((this.f232014S!= null)&&(!this.f232014S.isEmpty()))?this.getF232014S():null);
            strategy.appendField(locator, this, "f232014S", buffer, theF232014S);
        }
        {
            List<F222014> theF222014S;
            theF222014S = (((this.f222014S!= null)&&(!this.f222014S.isEmpty()))?this.getF222014S():null);
            strategy.appendField(locator, this, "f222014S", buffer, theF222014S);
        }
        {
            List<F212014> theF212014S;
            theF212014S = (((this.f212014S!= null)&&(!this.f212014S.isEmpty()))?this.getF212014S():null);
            strategy.appendField(locator, this, "f212014S", buffer, theF212014S);
        }
        {
            List<F202014> theF202014S;
            theF202014S = (((this.f202014S!= null)&&(!this.f202014S.isEmpty()))?this.getF202014S():null);
            strategy.appendField(locator, this, "f202014S", buffer, theF202014S);
        }
        {
            List<F152014> theF152014S;
            theF152014S = (((this.f152014S!= null)&&(!this.f152014S.isEmpty()))?this.getF152014S():null);
            strategy.appendField(locator, this, "f152014S", buffer, theF152014S);
        }
        {
            List<F142014> theF142014S;
            theF142014S = (((this.f142014S!= null)&&(!this.f142014S.isEmpty()))?this.getF142014S():null);
            strategy.appendField(locator, this, "f142014S", buffer, theF142014S);
        }
        {
            List<F132014> theF132014S;
            theF132014S = (((this.f132014S!= null)&&(!this.f132014S.isEmpty()))?this.getF132014S():null);
            strategy.appendField(locator, this, "f132014S", buffer, theF132014S);
        }
        {
            List<F122014> theF122014S;
            theF122014S = (((this.f122014S!= null)&&(!this.f122014S.isEmpty()))?this.getF122014S():null);
            strategy.appendField(locator, this, "f122014S", buffer, theF122014S);
        }
        {
            List<F082014> theF082014S;
            theF082014S = (((this.f082014S!= null)&&(!this.f082014S.isEmpty()))?this.getF082014S():null);
            strategy.appendField(locator, this, "f082014S", buffer, theF082014S);
        }
        {
            List<F072014> theF072014S;
            theF072014S = (((this.f072014S!= null)&&(!this.f072014S.isEmpty()))?this.getF072014S():null);
            strategy.appendField(locator, this, "f072014S", buffer, theF072014S);
        }
        {
            List<F062014> theF062014S;
            theF062014S = (((this.f062014S!= null)&&(!this.f062014S.isEmpty()))?this.getF062014S():null);
            strategy.appendField(locator, this, "f062014S", buffer, theF062014S);
        }
        {
            List<F052014> theF052014S;
            theF052014S = (((this.f052014S!= null)&&(!this.f052014S.isEmpty()))?this.getF052014S():null);
            strategy.appendField(locator, this, "f052014S", buffer, theF052014S);
        }
        {
            List<F042014> theF042014S;
            theF042014S = (((this.f042014S!= null)&&(!this.f042014S.isEmpty()))?this.getF042014S():null);
            strategy.appendField(locator, this, "f042014S", buffer, theF042014S);
        }
        {
            List<F032014> theF032014S;
            theF032014S = (((this.f032014S!= null)&&(!this.f032014S.isEmpty()))?this.getF032014S():null);
            strategy.appendField(locator, this, "f032014S", buffer, theF032014S);
        }
        {
            List<F022014> theF022014S;
            theF022014S = (((this.f022014S!= null)&&(!this.f022014S.isEmpty()))?this.getF022014S():null);
            strategy.appendField(locator, this, "f022014S", buffer, theF022014S);
        }
        {
            List<F012014> theF012014S;
            theF012014S = (((this.f012014S!= null)&&(!this.f012014S.isEmpty()))?this.getF012014S():null);
            strategy.appendField(locator, this, "f012014S", buffer, theF012014S);
        }
        return buffer;
    }

}
