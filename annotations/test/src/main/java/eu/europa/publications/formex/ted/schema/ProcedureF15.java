//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.12.04 at 01:40:50 PM MEZ 
//


package eu.europa.publications.formex.ted.schema;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Section IV: PROCEDURE
 * 
 * <p>Java class for procedure_f15 complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="procedure_f15">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;choice>
 *           &lt;element name="DIRECTIVE_2014_23_EU">
 *             &lt;complexType>
 *               &lt;complexContent>
 *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                   &lt;sequence>
 *                     &lt;choice>
 *                       &lt;element name="PT_AWARD_CONTRACT_WITHOUT_PUBLICATION">
 *                         &lt;complexType>
 *                           &lt;complexContent>
 *                             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                               &lt;sequence>
 *                                 &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}annex_d4_part1"/>
 *                                 &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_JUSTIFICATION"/>
 *                               &lt;/sequence>
 *                             &lt;/restriction>
 *                           &lt;/complexContent>
 *                         &lt;/complexType>
 *                       &lt;/element>
 *                       &lt;element name="PT_AWARD_CONTRACT_WITHOUT_CALL">
 *                         &lt;complexType>
 *                           &lt;complexContent>
 *                             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                               &lt;sequence>
 *                                 &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}annex_part2"/>
 *                                 &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_JUSTIFICATION"/>
 *                               &lt;/sequence>
 *                             &lt;/restriction>
 *                           &lt;/complexContent>
 *                         &lt;/complexType>
 *                       &lt;/element>
 *                     &lt;/choice>
 *                   &lt;/sequence>
 *                 &lt;/restriction>
 *               &lt;/complexContent>
 *             &lt;/complexType>
 *           &lt;/element>
 *           &lt;element name="DIRECTIVE_2014_24_EU">
 *             &lt;complexType>
 *               &lt;complexContent>
 *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                   &lt;sequence>
 *                     &lt;choice>
 *                       &lt;element name="PT_NEGOTIATED_WITHOUT_PUBLICATION">
 *                         &lt;complexType>
 *                           &lt;complexContent>
 *                             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                               &lt;sequence>
 *                                 &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}annex_d1_part1"/>
 *                                 &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_JUSTIFICATION"/>
 *                               &lt;/sequence>
 *                             &lt;/restriction>
 *                           &lt;/complexContent>
 *                         &lt;/complexType>
 *                       &lt;/element>
 *                       &lt;element name="PT_AWARD_CONTRACT_WITHOUT_CALL">
 *                         &lt;complexType>
 *                           &lt;complexContent>
 *                             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                               &lt;sequence>
 *                                 &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}annex_part2"/>
 *                                 &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_JUSTIFICATION"/>
 *                               &lt;/sequence>
 *                             &lt;/restriction>
 *                           &lt;/complexContent>
 *                         &lt;/complexType>
 *                       &lt;/element>
 *                     &lt;/choice>
 *                   &lt;/sequence>
 *                 &lt;/restriction>
 *               &lt;/complexContent>
 *             &lt;/complexType>
 *           &lt;/element>
 *           &lt;element name="DIRECTIVE_2014_25_EU">
 *             &lt;complexType>
 *               &lt;complexContent>
 *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                   &lt;sequence>
 *                     &lt;choice>
 *                       &lt;element name="PT_NEGOTIATED_WITHOUT_PUBLICATION">
 *                         &lt;complexType>
 *                           &lt;complexContent>
 *                             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                               &lt;sequence>
 *                                 &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}annex_d2_part1"/>
 *                                 &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_JUSTIFICATION"/>
 *                               &lt;/sequence>
 *                             &lt;/restriction>
 *                           &lt;/complexContent>
 *                         &lt;/complexType>
 *                       &lt;/element>
 *                       &lt;element name="PT_AWARD_CONTRACT_WITHOUT_CALL">
 *                         &lt;complexType>
 *                           &lt;complexContent>
 *                             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                               &lt;sequence>
 *                                 &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}annex_part2"/>
 *                                 &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_JUSTIFICATION"/>
 *                               &lt;/sequence>
 *                             &lt;/restriction>
 *                           &lt;/complexContent>
 *                         &lt;/complexType>
 *                       &lt;/element>
 *                     &lt;/choice>
 *                   &lt;/sequence>
 *                 &lt;/restriction>
 *               &lt;/complexContent>
 *             &lt;/complexType>
 *           &lt;/element>
 *           &lt;element name="DIRECTIVE_2009_81_EC">
 *             &lt;complexType>
 *               &lt;complexContent>
 *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                   &lt;sequence>
 *                     &lt;choice>
 *                       &lt;element name="PT_NEGOTIATED_WITHOUT_PUBLICATION">
 *                         &lt;complexType>
 *                           &lt;complexContent>
 *                             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                               &lt;sequence>
 *                                 &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}annex_d3_part1"/>
 *                                 &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_JUSTIFICATION"/>
 *                               &lt;/sequence>
 *                             &lt;/restriction>
 *                           &lt;/complexContent>
 *                         &lt;/complexType>
 *                       &lt;/element>
 *                       &lt;element name="PT_AWARD_CONTRACT_WITHOUT_CALL">
 *                         &lt;complexType>
 *                           &lt;complexContent>
 *                             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                               &lt;sequence>
 *                                 &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}annex_d3_part2"/>
 *                                 &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_JUSTIFICATION"/>
 *                               &lt;/sequence>
 *                             &lt;/restriction>
 *                           &lt;/complexContent>
 *                         &lt;/complexType>
 *                       &lt;/element>
 *                     &lt;/choice>
 *                   &lt;/sequence>
 *                 &lt;/restriction>
 *               &lt;/complexContent>
 *             &lt;/complexType>
 *           &lt;/element>
 *         &lt;/choice>
 *         &lt;element name="FRAMEWORK" type="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}empty" minOccurs="0"/>
 *         &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}gpa"/>
 *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}NOTICE_NUMBER_OJ" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "procedure_f15", propOrder = {
    "directive200981EC",
    "directive201425EU",
    "directive201424EU",
    "directive201423EU",
    "framework",
    "nocontractcoveredgpa",
    "contractcoveredgpa",
    "noticenumberoj"
})
public class ProcedureF15
    implements Equals, HashCode, ToString
{

    @XmlElement(name = "DIRECTIVE_2009_81_EC")
    protected ProcedureF15 .DIRECTIVE200981EC directive200981EC;
    @XmlElement(name = "DIRECTIVE_2014_25_EU")
    protected ProcedureF15 .DIRECTIVE201425EU directive201425EU;
    @XmlElement(name = "DIRECTIVE_2014_24_EU")
    protected ProcedureF15 .DIRECTIVE201424EU directive201424EU;
    @XmlElement(name = "DIRECTIVE_2014_23_EU")
    protected ProcedureF15 .DIRECTIVE201423EU directive201423EU;
    @XmlElement(name = "FRAMEWORK")
    protected Empty framework;
    @XmlElement(name = "NO_CONTRACT_COVERED_GPA")
    protected Empty nocontractcoveredgpa;
    @XmlElement(name = "CONTRACT_COVERED_GPA")
    protected Empty contractcoveredgpa;
    @XmlElement(name = "NOTICE_NUMBER_OJ")
    protected String noticenumberoj;

    /**
     * Gets the value of the directive200981EC property.
     * 
     * @return
     *     possible object is
     *     {@link ProcedureF15 .DIRECTIVE200981EC }
     *     
     */
    public ProcedureF15 .DIRECTIVE200981EC getDIRECTIVE200981EC() {
        return directive200981EC;
    }

    /**
     * Sets the value of the directive200981EC property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProcedureF15 .DIRECTIVE200981EC }
     *     
     */
    public void setDIRECTIVE200981EC(ProcedureF15 .DIRECTIVE200981EC value) {
        this.directive200981EC = value;
    }

    /**
     * Gets the value of the directive201425EU property.
     * 
     * @return
     *     possible object is
     *     {@link ProcedureF15 .DIRECTIVE201425EU }
     *     
     */
    public ProcedureF15 .DIRECTIVE201425EU getDIRECTIVE201425EU() {
        return directive201425EU;
    }

    /**
     * Sets the value of the directive201425EU property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProcedureF15 .DIRECTIVE201425EU }
     *     
     */
    public void setDIRECTIVE201425EU(ProcedureF15 .DIRECTIVE201425EU value) {
        this.directive201425EU = value;
    }

    /**
     * Gets the value of the directive201424EU property.
     * 
     * @return
     *     possible object is
     *     {@link ProcedureF15 .DIRECTIVE201424EU }
     *     
     */
    public ProcedureF15 .DIRECTIVE201424EU getDIRECTIVE201424EU() {
        return directive201424EU;
    }

    /**
     * Sets the value of the directive201424EU property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProcedureF15 .DIRECTIVE201424EU }
     *     
     */
    public void setDIRECTIVE201424EU(ProcedureF15 .DIRECTIVE201424EU value) {
        this.directive201424EU = value;
    }

    /**
     * Gets the value of the directive201423EU property.
     * 
     * @return
     *     possible object is
     *     {@link ProcedureF15 .DIRECTIVE201423EU }
     *     
     */
    public ProcedureF15 .DIRECTIVE201423EU getDIRECTIVE201423EU() {
        return directive201423EU;
    }

    /**
     * Sets the value of the directive201423EU property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProcedureF15 .DIRECTIVE201423EU }
     *     
     */
    public void setDIRECTIVE201423EU(ProcedureF15 .DIRECTIVE201423EU value) {
        this.directive201423EU = value;
    }

    /**
     * Gets the value of the framework property.
     * 
     * @return
     *     possible object is
     *     {@link Empty }
     *     
     */
    public Empty getFRAMEWORK() {
        return framework;
    }

    /**
     * Sets the value of the framework property.
     * 
     * @param value
     *     allowed object is
     *     {@link Empty }
     *     
     */
    public void setFRAMEWORK(Empty value) {
        this.framework = value;
    }

    /**
     * Gets the value of the nocontractcoveredgpa property.
     * 
     * @return
     *     possible object is
     *     {@link Empty }
     *     
     */
    public Empty getNOCONTRACTCOVEREDGPA() {
        return nocontractcoveredgpa;
    }

    /**
     * Sets the value of the nocontractcoveredgpa property.
     * 
     * @param value
     *     allowed object is
     *     {@link Empty }
     *     
     */
    public void setNOCONTRACTCOVEREDGPA(Empty value) {
        this.nocontractcoveredgpa = value;
    }

    /**
     * Gets the value of the contractcoveredgpa property.
     * 
     * @return
     *     possible object is
     *     {@link Empty }
     *     
     */
    public Empty getCONTRACTCOVEREDGPA() {
        return contractcoveredgpa;
    }

    /**
     * Sets the value of the contractcoveredgpa property.
     * 
     * @param value
     *     allowed object is
     *     {@link Empty }
     *     
     */
    public void setCONTRACTCOVEREDGPA(Empty value) {
        this.contractcoveredgpa = value;
    }

    /**
     * Gets the value of the noticenumberoj property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getNOTICENUMBEROJ() {
        return noticenumberoj;
    }

    /**
     * Sets the value of the noticenumberoj property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setNOTICENUMBEROJ(String value) {
        this.noticenumberoj = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ProcedureF15)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final ProcedureF15 that = ((ProcedureF15) object);
        {
            ProcedureF15 .DIRECTIVE200981EC lhsDIRECTIVE200981EC;
            lhsDIRECTIVE200981EC = this.getDIRECTIVE200981EC();
            ProcedureF15 .DIRECTIVE200981EC rhsDIRECTIVE200981EC;
            rhsDIRECTIVE200981EC = that.getDIRECTIVE200981EC();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "directive200981EC", lhsDIRECTIVE200981EC), LocatorUtils.property(thatLocator, "directive200981EC", rhsDIRECTIVE200981EC), lhsDIRECTIVE200981EC, rhsDIRECTIVE200981EC)) {
                return false;
            }
        }
        {
            ProcedureF15 .DIRECTIVE201425EU lhsDIRECTIVE201425EU;
            lhsDIRECTIVE201425EU = this.getDIRECTIVE201425EU();
            ProcedureF15 .DIRECTIVE201425EU rhsDIRECTIVE201425EU;
            rhsDIRECTIVE201425EU = that.getDIRECTIVE201425EU();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "directive201425EU", lhsDIRECTIVE201425EU), LocatorUtils.property(thatLocator, "directive201425EU", rhsDIRECTIVE201425EU), lhsDIRECTIVE201425EU, rhsDIRECTIVE201425EU)) {
                return false;
            }
        }
        {
            ProcedureF15 .DIRECTIVE201424EU lhsDIRECTIVE201424EU;
            lhsDIRECTIVE201424EU = this.getDIRECTIVE201424EU();
            ProcedureF15 .DIRECTIVE201424EU rhsDIRECTIVE201424EU;
            rhsDIRECTIVE201424EU = that.getDIRECTIVE201424EU();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "directive201424EU", lhsDIRECTIVE201424EU), LocatorUtils.property(thatLocator, "directive201424EU", rhsDIRECTIVE201424EU), lhsDIRECTIVE201424EU, rhsDIRECTIVE201424EU)) {
                return false;
            }
        }
        {
            ProcedureF15 .DIRECTIVE201423EU lhsDIRECTIVE201423EU;
            lhsDIRECTIVE201423EU = this.getDIRECTIVE201423EU();
            ProcedureF15 .DIRECTIVE201423EU rhsDIRECTIVE201423EU;
            rhsDIRECTIVE201423EU = that.getDIRECTIVE201423EU();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "directive201423EU", lhsDIRECTIVE201423EU), LocatorUtils.property(thatLocator, "directive201423EU", rhsDIRECTIVE201423EU), lhsDIRECTIVE201423EU, rhsDIRECTIVE201423EU)) {
                return false;
            }
        }
        {
            Empty lhsFRAMEWORK;
            lhsFRAMEWORK = this.getFRAMEWORK();
            Empty rhsFRAMEWORK;
            rhsFRAMEWORK = that.getFRAMEWORK();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "framework", lhsFRAMEWORK), LocatorUtils.property(thatLocator, "framework", rhsFRAMEWORK), lhsFRAMEWORK, rhsFRAMEWORK)) {
                return false;
            }
        }
        {
            Empty lhsNOCONTRACTCOVEREDGPA;
            lhsNOCONTRACTCOVEREDGPA = this.getNOCONTRACTCOVEREDGPA();
            Empty rhsNOCONTRACTCOVEREDGPA;
            rhsNOCONTRACTCOVEREDGPA = that.getNOCONTRACTCOVEREDGPA();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "nocontractcoveredgpa", lhsNOCONTRACTCOVEREDGPA), LocatorUtils.property(thatLocator, "nocontractcoveredgpa", rhsNOCONTRACTCOVEREDGPA), lhsNOCONTRACTCOVEREDGPA, rhsNOCONTRACTCOVEREDGPA)) {
                return false;
            }
        }
        {
            Empty lhsCONTRACTCOVEREDGPA;
            lhsCONTRACTCOVEREDGPA = this.getCONTRACTCOVEREDGPA();
            Empty rhsCONTRACTCOVEREDGPA;
            rhsCONTRACTCOVEREDGPA = that.getCONTRACTCOVEREDGPA();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "contractcoveredgpa", lhsCONTRACTCOVEREDGPA), LocatorUtils.property(thatLocator, "contractcoveredgpa", rhsCONTRACTCOVEREDGPA), lhsCONTRACTCOVEREDGPA, rhsCONTRACTCOVEREDGPA)) {
                return false;
            }
        }
        {
            String lhsNOTICENUMBEROJ;
            lhsNOTICENUMBEROJ = this.getNOTICENUMBEROJ();
            String rhsNOTICENUMBEROJ;
            rhsNOTICENUMBEROJ = that.getNOTICENUMBEROJ();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "noticenumberoj", lhsNOTICENUMBEROJ), LocatorUtils.property(thatLocator, "noticenumberoj", rhsNOTICENUMBEROJ), lhsNOTICENUMBEROJ, rhsNOTICENUMBEROJ)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            ProcedureF15 .DIRECTIVE200981EC theDIRECTIVE200981EC;
            theDIRECTIVE200981EC = this.getDIRECTIVE200981EC();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "directive200981EC", theDIRECTIVE200981EC), currentHashCode, theDIRECTIVE200981EC);
        }
        {
            ProcedureF15 .DIRECTIVE201425EU theDIRECTIVE201425EU;
            theDIRECTIVE201425EU = this.getDIRECTIVE201425EU();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "directive201425EU", theDIRECTIVE201425EU), currentHashCode, theDIRECTIVE201425EU);
        }
        {
            ProcedureF15 .DIRECTIVE201424EU theDIRECTIVE201424EU;
            theDIRECTIVE201424EU = this.getDIRECTIVE201424EU();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "directive201424EU", theDIRECTIVE201424EU), currentHashCode, theDIRECTIVE201424EU);
        }
        {
            ProcedureF15 .DIRECTIVE201423EU theDIRECTIVE201423EU;
            theDIRECTIVE201423EU = this.getDIRECTIVE201423EU();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "directive201423EU", theDIRECTIVE201423EU), currentHashCode, theDIRECTIVE201423EU);
        }
        {
            Empty theFRAMEWORK;
            theFRAMEWORK = this.getFRAMEWORK();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "framework", theFRAMEWORK), currentHashCode, theFRAMEWORK);
        }
        {
            Empty theNOCONTRACTCOVEREDGPA;
            theNOCONTRACTCOVEREDGPA = this.getNOCONTRACTCOVEREDGPA();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "nocontractcoveredgpa", theNOCONTRACTCOVEREDGPA), currentHashCode, theNOCONTRACTCOVEREDGPA);
        }
        {
            Empty theCONTRACTCOVEREDGPA;
            theCONTRACTCOVEREDGPA = this.getCONTRACTCOVEREDGPA();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "contractcoveredgpa", theCONTRACTCOVEREDGPA), currentHashCode, theCONTRACTCOVEREDGPA);
        }
        {
            String theNOTICENUMBEROJ;
            theNOTICENUMBEROJ = this.getNOTICENUMBEROJ();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "noticenumberoj", theNOTICENUMBEROJ), currentHashCode, theNOTICENUMBEROJ);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            ProcedureF15 .DIRECTIVE200981EC theDIRECTIVE200981EC;
            theDIRECTIVE200981EC = this.getDIRECTIVE200981EC();
            strategy.appendField(locator, this, "directive200981EC", buffer, theDIRECTIVE200981EC);
        }
        {
            ProcedureF15 .DIRECTIVE201425EU theDIRECTIVE201425EU;
            theDIRECTIVE201425EU = this.getDIRECTIVE201425EU();
            strategy.appendField(locator, this, "directive201425EU", buffer, theDIRECTIVE201425EU);
        }
        {
            ProcedureF15 .DIRECTIVE201424EU theDIRECTIVE201424EU;
            theDIRECTIVE201424EU = this.getDIRECTIVE201424EU();
            strategy.appendField(locator, this, "directive201424EU", buffer, theDIRECTIVE201424EU);
        }
        {
            ProcedureF15 .DIRECTIVE201423EU theDIRECTIVE201423EU;
            theDIRECTIVE201423EU = this.getDIRECTIVE201423EU();
            strategy.appendField(locator, this, "directive201423EU", buffer, theDIRECTIVE201423EU);
        }
        {
            Empty theFRAMEWORK;
            theFRAMEWORK = this.getFRAMEWORK();
            strategy.appendField(locator, this, "framework", buffer, theFRAMEWORK);
        }
        {
            Empty theNOCONTRACTCOVEREDGPA;
            theNOCONTRACTCOVEREDGPA = this.getNOCONTRACTCOVEREDGPA();
            strategy.appendField(locator, this, "nocontractcoveredgpa", buffer, theNOCONTRACTCOVEREDGPA);
        }
        {
            Empty theCONTRACTCOVEREDGPA;
            theCONTRACTCOVEREDGPA = this.getCONTRACTCOVEREDGPA();
            strategy.appendField(locator, this, "contractcoveredgpa", buffer, theCONTRACTCOVEREDGPA);
        }
        {
            String theNOTICENUMBEROJ;
            theNOTICENUMBEROJ = this.getNOTICENUMBEROJ();
            strategy.appendField(locator, this, "noticenumberoj", buffer, theNOTICENUMBEROJ);
        }
        return buffer;
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;choice>
     *           &lt;element name="PT_NEGOTIATED_WITHOUT_PUBLICATION">
     *             &lt;complexType>
     *               &lt;complexContent>
     *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                   &lt;sequence>
     *                     &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}annex_d3_part1"/>
     *                     &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_JUSTIFICATION"/>
     *                   &lt;/sequence>
     *                 &lt;/restriction>
     *               &lt;/complexContent>
     *             &lt;/complexType>
     *           &lt;/element>
     *           &lt;element name="PT_AWARD_CONTRACT_WITHOUT_CALL">
     *             &lt;complexType>
     *               &lt;complexContent>
     *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                   &lt;sequence>
     *                     &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}annex_d3_part2"/>
     *                     &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_JUSTIFICATION"/>
     *                   &lt;/sequence>
     *                 &lt;/restriction>
     *               &lt;/complexContent>
     *             &lt;/complexType>
     *           &lt;/element>
     *         &lt;/choice>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "ptawardcontractwithoutcall",
        "ptnegotiatedwithoutpublication"
    })
    public static class DIRECTIVE200981EC
        implements Equals, HashCode, ToString
    {

        @XmlElement(name = "PT_AWARD_CONTRACT_WITHOUT_CALL")
        protected ProcedureF15 .DIRECTIVE200981EC.PTAWARDCONTRACTWITHOUTCALL ptawardcontractwithoutcall;
        @XmlElement(name = "PT_NEGOTIATED_WITHOUT_PUBLICATION")
        protected ProcedureF15 .DIRECTIVE200981EC.PTNEGOTIATEDWITHOUTPUBLICATION ptnegotiatedwithoutpublication;

        /**
         * Gets the value of the ptawardcontractwithoutcall property.
         * 
         * @return
         *     possible object is
         *     {@link ProcedureF15 .DIRECTIVE200981EC.PTAWARDCONTRACTWITHOUTCALL }
         *     
         */
        public ProcedureF15 .DIRECTIVE200981EC.PTAWARDCONTRACTWITHOUTCALL getPTAWARDCONTRACTWITHOUTCALL() {
            return ptawardcontractwithoutcall;
        }

        /**
         * Sets the value of the ptawardcontractwithoutcall property.
         * 
         * @param value
         *     allowed object is
         *     {@link ProcedureF15 .DIRECTIVE200981EC.PTAWARDCONTRACTWITHOUTCALL }
         *     
         */
        public void setPTAWARDCONTRACTWITHOUTCALL(ProcedureF15 .DIRECTIVE200981EC.PTAWARDCONTRACTWITHOUTCALL value) {
            this.ptawardcontractwithoutcall = value;
        }

        /**
         * Gets the value of the ptnegotiatedwithoutpublication property.
         * 
         * @return
         *     possible object is
         *     {@link ProcedureF15 .DIRECTIVE200981EC.PTNEGOTIATEDWITHOUTPUBLICATION }
         *     
         */
        public ProcedureF15 .DIRECTIVE200981EC.PTNEGOTIATEDWITHOUTPUBLICATION getPTNEGOTIATEDWITHOUTPUBLICATION() {
            return ptnegotiatedwithoutpublication;
        }

        /**
         * Sets the value of the ptnegotiatedwithoutpublication property.
         * 
         * @param value
         *     allowed object is
         *     {@link ProcedureF15 .DIRECTIVE200981EC.PTNEGOTIATEDWITHOUTPUBLICATION }
         *     
         */
        public void setPTNEGOTIATEDWITHOUTPUBLICATION(ProcedureF15 .DIRECTIVE200981EC.PTNEGOTIATEDWITHOUTPUBLICATION value) {
            this.ptnegotiatedwithoutpublication = value;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ProcedureF15 .DIRECTIVE200981EC)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ProcedureF15 .DIRECTIVE200981EC that = ((ProcedureF15 .DIRECTIVE200981EC) object);
            {
                ProcedureF15 .DIRECTIVE200981EC.PTAWARDCONTRACTWITHOUTCALL lhsPTAWARDCONTRACTWITHOUTCALL;
                lhsPTAWARDCONTRACTWITHOUTCALL = this.getPTAWARDCONTRACTWITHOUTCALL();
                ProcedureF15 .DIRECTIVE200981EC.PTAWARDCONTRACTWITHOUTCALL rhsPTAWARDCONTRACTWITHOUTCALL;
                rhsPTAWARDCONTRACTWITHOUTCALL = that.getPTAWARDCONTRACTWITHOUTCALL();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "ptawardcontractwithoutcall", lhsPTAWARDCONTRACTWITHOUTCALL), LocatorUtils.property(thatLocator, "ptawardcontractwithoutcall", rhsPTAWARDCONTRACTWITHOUTCALL), lhsPTAWARDCONTRACTWITHOUTCALL, rhsPTAWARDCONTRACTWITHOUTCALL)) {
                    return false;
                }
            }
            {
                ProcedureF15 .DIRECTIVE200981EC.PTNEGOTIATEDWITHOUTPUBLICATION lhsPTNEGOTIATEDWITHOUTPUBLICATION;
                lhsPTNEGOTIATEDWITHOUTPUBLICATION = this.getPTNEGOTIATEDWITHOUTPUBLICATION();
                ProcedureF15 .DIRECTIVE200981EC.PTNEGOTIATEDWITHOUTPUBLICATION rhsPTNEGOTIATEDWITHOUTPUBLICATION;
                rhsPTNEGOTIATEDWITHOUTPUBLICATION = that.getPTNEGOTIATEDWITHOUTPUBLICATION();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "ptnegotiatedwithoutpublication", lhsPTNEGOTIATEDWITHOUTPUBLICATION), LocatorUtils.property(thatLocator, "ptnegotiatedwithoutpublication", rhsPTNEGOTIATEDWITHOUTPUBLICATION), lhsPTNEGOTIATEDWITHOUTPUBLICATION, rhsPTNEGOTIATEDWITHOUTPUBLICATION)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                ProcedureF15 .DIRECTIVE200981EC.PTAWARDCONTRACTWITHOUTCALL thePTAWARDCONTRACTWITHOUTCALL;
                thePTAWARDCONTRACTWITHOUTCALL = this.getPTAWARDCONTRACTWITHOUTCALL();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ptawardcontractwithoutcall", thePTAWARDCONTRACTWITHOUTCALL), currentHashCode, thePTAWARDCONTRACTWITHOUTCALL);
            }
            {
                ProcedureF15 .DIRECTIVE200981EC.PTNEGOTIATEDWITHOUTPUBLICATION thePTNEGOTIATEDWITHOUTPUBLICATION;
                thePTNEGOTIATEDWITHOUTPUBLICATION = this.getPTNEGOTIATEDWITHOUTPUBLICATION();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ptnegotiatedwithoutpublication", thePTNEGOTIATEDWITHOUTPUBLICATION), currentHashCode, thePTNEGOTIATEDWITHOUTPUBLICATION);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                ProcedureF15 .DIRECTIVE200981EC.PTAWARDCONTRACTWITHOUTCALL thePTAWARDCONTRACTWITHOUTCALL;
                thePTAWARDCONTRACTWITHOUTCALL = this.getPTAWARDCONTRACTWITHOUTCALL();
                strategy.appendField(locator, this, "ptawardcontractwithoutcall", buffer, thePTAWARDCONTRACTWITHOUTCALL);
            }
            {
                ProcedureF15 .DIRECTIVE200981EC.PTNEGOTIATEDWITHOUTPUBLICATION thePTNEGOTIATEDWITHOUTPUBLICATION;
                thePTNEGOTIATEDWITHOUTPUBLICATION = this.getPTNEGOTIATEDWITHOUTPUBLICATION();
                strategy.appendField(locator, this, "ptnegotiatedwithoutpublication", buffer, thePTNEGOTIATEDWITHOUTPUBLICATION);
            }
            return buffer;
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType>
         *   &lt;complexContent>
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *       &lt;sequence>
         *         &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}annex_d3_part2"/>
         *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_JUSTIFICATION"/>
         *       &lt;/sequence>
         *     &lt;/restriction>
         *   &lt;/complexContent>
         * &lt;/complexType>
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "doutsidescope",
            "dserviceslisted",
            "djustification"
        })
        public static class PTAWARDCONTRACTWITHOUTCALL
            implements Equals, HashCode, ToString
        {

            @XmlElement(name = "D_OUTSIDE_SCOPE")
            protected Empty doutsidescope;
            @XmlElement(name = "D_SERVICES_LISTED")
            protected Empty dserviceslisted;
            @XmlElement(name = "D_JUSTIFICATION", required = true)
            protected TextFtMultiLines djustification;

            /**
             * Gets the value of the doutsidescope property.
             * 
             * @return
             *     possible object is
             *     {@link Empty }
             *     
             */
            public Empty getDOUTSIDESCOPE() {
                return doutsidescope;
            }

            /**
             * Sets the value of the doutsidescope property.
             * 
             * @param value
             *     allowed object is
             *     {@link Empty }
             *     
             */
            public void setDOUTSIDESCOPE(Empty value) {
                this.doutsidescope = value;
            }

            /**
             * Gets the value of the dserviceslisted property.
             * 
             * @return
             *     possible object is
             *     {@link Empty }
             *     
             */
            public Empty getDSERVICESLISTED() {
                return dserviceslisted;
            }

            /**
             * Sets the value of the dserviceslisted property.
             * 
             * @param value
             *     allowed object is
             *     {@link Empty }
             *     
             */
            public void setDSERVICESLISTED(Empty value) {
                this.dserviceslisted = value;
            }

            /**
             * Gets the value of the djustification property.
             * 
             * @return
             *     possible object is
             *     {@link TextFtMultiLines }
             *     
             */
            public TextFtMultiLines getDJUSTIFICATION() {
                return djustification;
            }

            /**
             * Sets the value of the djustification property.
             * 
             * @param value
             *     allowed object is
             *     {@link TextFtMultiLines }
             *     
             */
            public void setDJUSTIFICATION(TextFtMultiLines value) {
                this.djustification = value;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof ProcedureF15 .DIRECTIVE200981EC.PTAWARDCONTRACTWITHOUTCALL)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final ProcedureF15 .DIRECTIVE200981EC.PTAWARDCONTRACTWITHOUTCALL that = ((ProcedureF15 .DIRECTIVE200981EC.PTAWARDCONTRACTWITHOUTCALL) object);
                {
                    Empty lhsDOUTSIDESCOPE;
                    lhsDOUTSIDESCOPE = this.getDOUTSIDESCOPE();
                    Empty rhsDOUTSIDESCOPE;
                    rhsDOUTSIDESCOPE = that.getDOUTSIDESCOPE();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "doutsidescope", lhsDOUTSIDESCOPE), LocatorUtils.property(thatLocator, "doutsidescope", rhsDOUTSIDESCOPE), lhsDOUTSIDESCOPE, rhsDOUTSIDESCOPE)) {
                        return false;
                    }
                }
                {
                    Empty lhsDSERVICESLISTED;
                    lhsDSERVICESLISTED = this.getDSERVICESLISTED();
                    Empty rhsDSERVICESLISTED;
                    rhsDSERVICESLISTED = that.getDSERVICESLISTED();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "dserviceslisted", lhsDSERVICESLISTED), LocatorUtils.property(thatLocator, "dserviceslisted", rhsDSERVICESLISTED), lhsDSERVICESLISTED, rhsDSERVICESLISTED)) {
                        return false;
                    }
                }
                {
                    TextFtMultiLines lhsDJUSTIFICATION;
                    lhsDJUSTIFICATION = this.getDJUSTIFICATION();
                    TextFtMultiLines rhsDJUSTIFICATION;
                    rhsDJUSTIFICATION = that.getDJUSTIFICATION();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "djustification", lhsDJUSTIFICATION), LocatorUtils.property(thatLocator, "djustification", rhsDJUSTIFICATION), lhsDJUSTIFICATION, rhsDJUSTIFICATION)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    Empty theDOUTSIDESCOPE;
                    theDOUTSIDESCOPE = this.getDOUTSIDESCOPE();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "doutsidescope", theDOUTSIDESCOPE), currentHashCode, theDOUTSIDESCOPE);
                }
                {
                    Empty theDSERVICESLISTED;
                    theDSERVICESLISTED = this.getDSERVICESLISTED();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dserviceslisted", theDSERVICESLISTED), currentHashCode, theDSERVICESLISTED);
                }
                {
                    TextFtMultiLines theDJUSTIFICATION;
                    theDJUSTIFICATION = this.getDJUSTIFICATION();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "djustification", theDJUSTIFICATION), currentHashCode, theDJUSTIFICATION);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    Empty theDOUTSIDESCOPE;
                    theDOUTSIDESCOPE = this.getDOUTSIDESCOPE();
                    strategy.appendField(locator, this, "doutsidescope", buffer, theDOUTSIDESCOPE);
                }
                {
                    Empty theDSERVICESLISTED;
                    theDSERVICESLISTED = this.getDSERVICESLISTED();
                    strategy.appendField(locator, this, "dserviceslisted", buffer, theDSERVICESLISTED);
                }
                {
                    TextFtMultiLines theDJUSTIFICATION;
                    theDJUSTIFICATION = this.getDJUSTIFICATION();
                    strategy.appendField(locator, this, "djustification", buffer, theDJUSTIFICATION);
                }
                return buffer;
            }

        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType>
         *   &lt;complexContent>
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *       &lt;sequence>
         *         &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}annex_d3_part1"/>
         *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_JUSTIFICATION"/>
         *       &lt;/sequence>
         *     &lt;/restriction>
         *   &lt;/complexContent>
         * &lt;/complexType>
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "daccordancearticle",
            "djustification"
        })
        public static class PTNEGOTIATEDWITHOUTPUBLICATION
            implements Equals, HashCode, ToString
        {

            @XmlElement(name = "D_ACCORDANCE_ARTICLE", required = true)
            protected ProcedureF15 .DIRECTIVE200981EC.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE daccordancearticle;
            @XmlElement(name = "D_JUSTIFICATION", required = true)
            protected TextFtMultiLines djustification;

            /**
             * Gets the value of the daccordancearticle property.
             * 
             * @return
             *     possible object is
             *     {@link ProcedureF15 .DIRECTIVE200981EC.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE }
             *     
             */
            public ProcedureF15 .DIRECTIVE200981EC.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE getDACCORDANCEARTICLE() {
                return daccordancearticle;
            }

            /**
             * Sets the value of the daccordancearticle property.
             * 
             * @param value
             *     allowed object is
             *     {@link ProcedureF15 .DIRECTIVE200981EC.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE }
             *     
             */
            public void setDACCORDANCEARTICLE(ProcedureF15 .DIRECTIVE200981EC.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE value) {
                this.daccordancearticle = value;
            }

            /**
             * Gets the value of the djustification property.
             * 
             * @return
             *     possible object is
             *     {@link TextFtMultiLines }
             *     
             */
            public TextFtMultiLines getDJUSTIFICATION() {
                return djustification;
            }

            /**
             * Sets the value of the djustification property.
             * 
             * @param value
             *     allowed object is
             *     {@link TextFtMultiLines }
             *     
             */
            public void setDJUSTIFICATION(TextFtMultiLines value) {
                this.djustification = value;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof ProcedureF15 .DIRECTIVE200981EC.PTNEGOTIATEDWITHOUTPUBLICATION)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final ProcedureF15 .DIRECTIVE200981EC.PTNEGOTIATEDWITHOUTPUBLICATION that = ((ProcedureF15 .DIRECTIVE200981EC.PTNEGOTIATEDWITHOUTPUBLICATION) object);
                {
                    ProcedureF15 .DIRECTIVE200981EC.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE lhsDACCORDANCEARTICLE;
                    lhsDACCORDANCEARTICLE = this.getDACCORDANCEARTICLE();
                    ProcedureF15 .DIRECTIVE200981EC.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE rhsDACCORDANCEARTICLE;
                    rhsDACCORDANCEARTICLE = that.getDACCORDANCEARTICLE();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "daccordancearticle", lhsDACCORDANCEARTICLE), LocatorUtils.property(thatLocator, "daccordancearticle", rhsDACCORDANCEARTICLE), lhsDACCORDANCEARTICLE, rhsDACCORDANCEARTICLE)) {
                        return false;
                    }
                }
                {
                    TextFtMultiLines lhsDJUSTIFICATION;
                    lhsDJUSTIFICATION = this.getDJUSTIFICATION();
                    TextFtMultiLines rhsDJUSTIFICATION;
                    rhsDJUSTIFICATION = that.getDJUSTIFICATION();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "djustification", lhsDJUSTIFICATION), LocatorUtils.property(thatLocator, "djustification", rhsDJUSTIFICATION), lhsDJUSTIFICATION, rhsDJUSTIFICATION)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    ProcedureF15 .DIRECTIVE200981EC.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE theDACCORDANCEARTICLE;
                    theDACCORDANCEARTICLE = this.getDACCORDANCEARTICLE();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "daccordancearticle", theDACCORDANCEARTICLE), currentHashCode, theDACCORDANCEARTICLE);
                }
                {
                    TextFtMultiLines theDJUSTIFICATION;
                    theDJUSTIFICATION = this.getDJUSTIFICATION();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "djustification", theDJUSTIFICATION), currentHashCode, theDJUSTIFICATION);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    ProcedureF15 .DIRECTIVE200981EC.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE theDACCORDANCEARTICLE;
                    theDACCORDANCEARTICLE = this.getDACCORDANCEARTICLE();
                    strategy.appendField(locator, this, "daccordancearticle", buffer, theDACCORDANCEARTICLE);
                }
                {
                    TextFtMultiLines theDJUSTIFICATION;
                    theDJUSTIFICATION = this.getDJUSTIFICATION();
                    strategy.appendField(locator, this, "djustification", buffer, theDJUSTIFICATION);
                }
                return buffer;
            }


            /**
             * <p>Java class for anonymous complex type.
             * 
             * <p>The following schema fragment specifies the expected content contained within this class.
             * 
             * <pre>
             * &lt;complexType>
             *   &lt;complexContent>
             *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
             *       &lt;sequence>
             *         &lt;choice minOccurs="0">
             *           &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_PROC_RESTRICTED"/>
             *           &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_PROC_NEGOTIATED_PRIOR_CALL_COMPETITION"/>
             *           &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_PROC_COMPETITIVE_DIALOGUE"/>
             *         &lt;/choice>
             *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_OTHER_SERVICES" minOccurs="0"/>
             *         &lt;element name="D_MANUF_FOR_RESEARCH" type="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}no_works" minOccurs="0"/>
             *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_ALL_TENDERS" minOccurs="0"/>
             *         &lt;choice minOccurs="0">
             *           &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_TECHNICAL"/>
             *           &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_PROTECT_RIGHTS"/>
             *         &lt;/choice>
             *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_PERIODS_INCOMPATIBLE" minOccurs="0"/>
             *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_EXTREME_URGENCY" minOccurs="0"/>
             *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_ADD_DELIVERIES_ORDERED" minOccurs="0"/>
             *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_REPETITION_EXISTING" minOccurs="0"/>
             *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_COMMODITY_MARKET" minOccurs="0"/>
             *         &lt;choice minOccurs="0">
             *           &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_FROM_WINDING_PROVIDER"/>
             *           &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_FROM_LIQUIDATOR_CREDITOR"/>
             *         &lt;/choice>
             *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_MARITIME_SERVICES" minOccurs="0"/>
             *       &lt;/sequence>
             *     &lt;/restriction>
             *   &lt;/complexContent>
             * &lt;/complexType>
             * </pre>
             * 
             * 
             */
            @XmlAccessorType(XmlAccessType.FIELD)
            @XmlType(name = "", propOrder = {
                "dproccompetitivedialogue",
                "dprocnegotiatedpriorcallcompetition",
                "dprocrestricted",
                "dotherservices",
                "dmanufforresearch",
                "dalltenders",
                "dprotectrights",
                "dtechnical",
                "dperiodsincompatible",
                "dextremeurgency",
                "dadddeliveriesordered",
                "drepetitionexisting",
                "dcommoditymarket",
                "dfromliquidatorcreditor",
                "dfromwindingprovider",
                "dmaritimeservices"
            })
            public static class DACCORDANCEARTICLE
                implements Equals, HashCode, ToString
            {

                @XmlElement(name = "D_PROC_COMPETITIVE_DIALOGUE")
                protected Empty dproccompetitivedialogue;
                @XmlElement(name = "D_PROC_NEGOTIATED_PRIOR_CALL_COMPETITION")
                protected Empty dprocnegotiatedpriorcallcompetition;
                @XmlElement(name = "D_PROC_RESTRICTED")
                protected Empty dprocrestricted;
                @XmlElement(name = "D_OTHER_SERVICES")
                protected NoWorks dotherservices;
                @XmlElement(name = "D_MANUF_FOR_RESEARCH")
                protected NoWorks dmanufforresearch;
                @XmlElement(name = "D_ALL_TENDERS")
                protected Empty dalltenders;
                @XmlElement(name = "D_PROTECT_RIGHTS")
                protected Empty dprotectrights;
                @XmlElement(name = "D_TECHNICAL")
                protected Empty dtechnical;
                @XmlElement(name = "D_PERIODS_INCOMPATIBLE")
                protected Empty dperiodsincompatible;
                @XmlElement(name = "D_EXTREME_URGENCY")
                protected Empty dextremeurgency;
                @XmlElement(name = "D_ADD_DELIVERIES_ORDERED")
                protected Empty dadddeliveriesordered;
                @XmlElement(name = "D_REPETITION_EXISTING")
                protected DREPETITIONEXISTING drepetitionexisting;
                @XmlElement(name = "D_COMMODITY_MARKET")
                protected DCOMMODITYMARKET dcommoditymarket;
                @XmlElement(name = "D_FROM_LIQUIDATOR_CREDITOR")
                protected NoWorks dfromliquidatorcreditor;
                @XmlElement(name = "D_FROM_WINDING_PROVIDER")
                protected NoWorks dfromwindingprovider;
                @XmlElement(name = "D_MARITIME_SERVICES")
                protected Services dmaritimeservices;

                /**
                 * Gets the value of the dproccompetitivedialogue property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Empty }
                 *     
                 */
                public Empty getDPROCCOMPETITIVEDIALOGUE() {
                    return dproccompetitivedialogue;
                }

                /**
                 * Sets the value of the dproccompetitivedialogue property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Empty }
                 *     
                 */
                public void setDPROCCOMPETITIVEDIALOGUE(Empty value) {
                    this.dproccompetitivedialogue = value;
                }

                /**
                 * Gets the value of the dprocnegotiatedpriorcallcompetition property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Empty }
                 *     
                 */
                public Empty getDPROCNEGOTIATEDPRIORCALLCOMPETITION() {
                    return dprocnegotiatedpriorcallcompetition;
                }

                /**
                 * Sets the value of the dprocnegotiatedpriorcallcompetition property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Empty }
                 *     
                 */
                public void setDPROCNEGOTIATEDPRIORCALLCOMPETITION(Empty value) {
                    this.dprocnegotiatedpriorcallcompetition = value;
                }

                /**
                 * Gets the value of the dprocrestricted property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Empty }
                 *     
                 */
                public Empty getDPROCRESTRICTED() {
                    return dprocrestricted;
                }

                /**
                 * Sets the value of the dprocrestricted property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Empty }
                 *     
                 */
                public void setDPROCRESTRICTED(Empty value) {
                    this.dprocrestricted = value;
                }

                /**
                 * Gets the value of the dotherservices property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link NoWorks }
                 *     
                 */
                public NoWorks getDOTHERSERVICES() {
                    return dotherservices;
                }

                /**
                 * Sets the value of the dotherservices property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link NoWorks }
                 *     
                 */
                public void setDOTHERSERVICES(NoWorks value) {
                    this.dotherservices = value;
                }

                /**
                 * Gets the value of the dmanufforresearch property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link NoWorks }
                 *     
                 */
                public NoWorks getDMANUFFORRESEARCH() {
                    return dmanufforresearch;
                }

                /**
                 * Sets the value of the dmanufforresearch property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link NoWorks }
                 *     
                 */
                public void setDMANUFFORRESEARCH(NoWorks value) {
                    this.dmanufforresearch = value;
                }

                /**
                 * Gets the value of the dalltenders property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Empty }
                 *     
                 */
                public Empty getDALLTENDERS() {
                    return dalltenders;
                }

                /**
                 * Sets the value of the dalltenders property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Empty }
                 *     
                 */
                public void setDALLTENDERS(Empty value) {
                    this.dalltenders = value;
                }

                /**
                 * Gets the value of the dprotectrights property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Empty }
                 *     
                 */
                public Empty getDPROTECTRIGHTS() {
                    return dprotectrights;
                }

                /**
                 * Sets the value of the dprotectrights property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Empty }
                 *     
                 */
                public void setDPROTECTRIGHTS(Empty value) {
                    this.dprotectrights = value;
                }

                /**
                 * Gets the value of the dtechnical property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Empty }
                 *     
                 */
                public Empty getDTECHNICAL() {
                    return dtechnical;
                }

                /**
                 * Sets the value of the dtechnical property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Empty }
                 *     
                 */
                public void setDTECHNICAL(Empty value) {
                    this.dtechnical = value;
                }

                /**
                 * Gets the value of the dperiodsincompatible property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Empty }
                 *     
                 */
                public Empty getDPERIODSINCOMPATIBLE() {
                    return dperiodsincompatible;
                }

                /**
                 * Sets the value of the dperiodsincompatible property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Empty }
                 *     
                 */
                public void setDPERIODSINCOMPATIBLE(Empty value) {
                    this.dperiodsincompatible = value;
                }

                /**
                 * Gets the value of the dextremeurgency property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Empty }
                 *     
                 */
                public Empty getDEXTREMEURGENCY() {
                    return dextremeurgency;
                }

                /**
                 * Sets the value of the dextremeurgency property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Empty }
                 *     
                 */
                public void setDEXTREMEURGENCY(Empty value) {
                    this.dextremeurgency = value;
                }

                /**
                 * Gets the value of the dadddeliveriesordered property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Empty }
                 *     
                 */
                public Empty getDADDDELIVERIESORDERED() {
                    return dadddeliveriesordered;
                }

                /**
                 * Sets the value of the dadddeliveriesordered property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Empty }
                 *     
                 */
                public void setDADDDELIVERIESORDERED(Empty value) {
                    this.dadddeliveriesordered = value;
                }

                /**
                 * Gets the value of the drepetitionexisting property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link DREPETITIONEXISTING }
                 *     
                 */
                public DREPETITIONEXISTING getDREPETITIONEXISTING() {
                    return drepetitionexisting;
                }

                /**
                 * Sets the value of the drepetitionexisting property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link DREPETITIONEXISTING }
                 *     
                 */
                public void setDREPETITIONEXISTING(DREPETITIONEXISTING value) {
                    this.drepetitionexisting = value;
                }

                /**
                 * Gets the value of the dcommoditymarket property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link DCOMMODITYMARKET }
                 *     
                 */
                public DCOMMODITYMARKET getDCOMMODITYMARKET() {
                    return dcommoditymarket;
                }

                /**
                 * Sets the value of the dcommoditymarket property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link DCOMMODITYMARKET }
                 *     
                 */
                public void setDCOMMODITYMARKET(DCOMMODITYMARKET value) {
                    this.dcommoditymarket = value;
                }

                /**
                 * Gets the value of the dfromliquidatorcreditor property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link NoWorks }
                 *     
                 */
                public NoWorks getDFROMLIQUIDATORCREDITOR() {
                    return dfromliquidatorcreditor;
                }

                /**
                 * Sets the value of the dfromliquidatorcreditor property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link NoWorks }
                 *     
                 */
                public void setDFROMLIQUIDATORCREDITOR(NoWorks value) {
                    this.dfromliquidatorcreditor = value;
                }

                /**
                 * Gets the value of the dfromwindingprovider property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link NoWorks }
                 *     
                 */
                public NoWorks getDFROMWINDINGPROVIDER() {
                    return dfromwindingprovider;
                }

                /**
                 * Sets the value of the dfromwindingprovider property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link NoWorks }
                 *     
                 */
                public void setDFROMWINDINGPROVIDER(NoWorks value) {
                    this.dfromwindingprovider = value;
                }

                /**
                 * Gets the value of the dmaritimeservices property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Services }
                 *     
                 */
                public Services getDMARITIMESERVICES() {
                    return dmaritimeservices;
                }

                /**
                 * Sets the value of the dmaritimeservices property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Services }
                 *     
                 */
                public void setDMARITIMESERVICES(Services value) {
                    this.dmaritimeservices = value;
                }

                public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                    if (!(object instanceof ProcedureF15 .DIRECTIVE200981EC.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE)) {
                        return false;
                    }
                    if (this == object) {
                        return true;
                    }
                    final ProcedureF15 .DIRECTIVE200981EC.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE that = ((ProcedureF15 .DIRECTIVE200981EC.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE) object);
                    {
                        Empty lhsDPROCCOMPETITIVEDIALOGUE;
                        lhsDPROCCOMPETITIVEDIALOGUE = this.getDPROCCOMPETITIVEDIALOGUE();
                        Empty rhsDPROCCOMPETITIVEDIALOGUE;
                        rhsDPROCCOMPETITIVEDIALOGUE = that.getDPROCCOMPETITIVEDIALOGUE();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dproccompetitivedialogue", lhsDPROCCOMPETITIVEDIALOGUE), LocatorUtils.property(thatLocator, "dproccompetitivedialogue", rhsDPROCCOMPETITIVEDIALOGUE), lhsDPROCCOMPETITIVEDIALOGUE, rhsDPROCCOMPETITIVEDIALOGUE)) {
                            return false;
                        }
                    }
                    {
                        Empty lhsDPROCNEGOTIATEDPRIORCALLCOMPETITION;
                        lhsDPROCNEGOTIATEDPRIORCALLCOMPETITION = this.getDPROCNEGOTIATEDPRIORCALLCOMPETITION();
                        Empty rhsDPROCNEGOTIATEDPRIORCALLCOMPETITION;
                        rhsDPROCNEGOTIATEDPRIORCALLCOMPETITION = that.getDPROCNEGOTIATEDPRIORCALLCOMPETITION();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dprocnegotiatedpriorcallcompetition", lhsDPROCNEGOTIATEDPRIORCALLCOMPETITION), LocatorUtils.property(thatLocator, "dprocnegotiatedpriorcallcompetition", rhsDPROCNEGOTIATEDPRIORCALLCOMPETITION), lhsDPROCNEGOTIATEDPRIORCALLCOMPETITION, rhsDPROCNEGOTIATEDPRIORCALLCOMPETITION)) {
                            return false;
                        }
                    }
                    {
                        Empty lhsDPROCRESTRICTED;
                        lhsDPROCRESTRICTED = this.getDPROCRESTRICTED();
                        Empty rhsDPROCRESTRICTED;
                        rhsDPROCRESTRICTED = that.getDPROCRESTRICTED();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dprocrestricted", lhsDPROCRESTRICTED), LocatorUtils.property(thatLocator, "dprocrestricted", rhsDPROCRESTRICTED), lhsDPROCRESTRICTED, rhsDPROCRESTRICTED)) {
                            return false;
                        }
                    }
                    {
                        NoWorks lhsDOTHERSERVICES;
                        lhsDOTHERSERVICES = this.getDOTHERSERVICES();
                        NoWorks rhsDOTHERSERVICES;
                        rhsDOTHERSERVICES = that.getDOTHERSERVICES();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dotherservices", lhsDOTHERSERVICES), LocatorUtils.property(thatLocator, "dotherservices", rhsDOTHERSERVICES), lhsDOTHERSERVICES, rhsDOTHERSERVICES)) {
                            return false;
                        }
                    }
                    {
                        NoWorks lhsDMANUFFORRESEARCH;
                        lhsDMANUFFORRESEARCH = this.getDMANUFFORRESEARCH();
                        NoWorks rhsDMANUFFORRESEARCH;
                        rhsDMANUFFORRESEARCH = that.getDMANUFFORRESEARCH();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dmanufforresearch", lhsDMANUFFORRESEARCH), LocatorUtils.property(thatLocator, "dmanufforresearch", rhsDMANUFFORRESEARCH), lhsDMANUFFORRESEARCH, rhsDMANUFFORRESEARCH)) {
                            return false;
                        }
                    }
                    {
                        Empty lhsDALLTENDERS;
                        lhsDALLTENDERS = this.getDALLTENDERS();
                        Empty rhsDALLTENDERS;
                        rhsDALLTENDERS = that.getDALLTENDERS();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dalltenders", lhsDALLTENDERS), LocatorUtils.property(thatLocator, "dalltenders", rhsDALLTENDERS), lhsDALLTENDERS, rhsDALLTENDERS)) {
                            return false;
                        }
                    }
                    {
                        Empty lhsDPROTECTRIGHTS;
                        lhsDPROTECTRIGHTS = this.getDPROTECTRIGHTS();
                        Empty rhsDPROTECTRIGHTS;
                        rhsDPROTECTRIGHTS = that.getDPROTECTRIGHTS();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dprotectrights", lhsDPROTECTRIGHTS), LocatorUtils.property(thatLocator, "dprotectrights", rhsDPROTECTRIGHTS), lhsDPROTECTRIGHTS, rhsDPROTECTRIGHTS)) {
                            return false;
                        }
                    }
                    {
                        Empty lhsDTECHNICAL;
                        lhsDTECHNICAL = this.getDTECHNICAL();
                        Empty rhsDTECHNICAL;
                        rhsDTECHNICAL = that.getDTECHNICAL();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dtechnical", lhsDTECHNICAL), LocatorUtils.property(thatLocator, "dtechnical", rhsDTECHNICAL), lhsDTECHNICAL, rhsDTECHNICAL)) {
                            return false;
                        }
                    }
                    {
                        Empty lhsDPERIODSINCOMPATIBLE;
                        lhsDPERIODSINCOMPATIBLE = this.getDPERIODSINCOMPATIBLE();
                        Empty rhsDPERIODSINCOMPATIBLE;
                        rhsDPERIODSINCOMPATIBLE = that.getDPERIODSINCOMPATIBLE();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dperiodsincompatible", lhsDPERIODSINCOMPATIBLE), LocatorUtils.property(thatLocator, "dperiodsincompatible", rhsDPERIODSINCOMPATIBLE), lhsDPERIODSINCOMPATIBLE, rhsDPERIODSINCOMPATIBLE)) {
                            return false;
                        }
                    }
                    {
                        Empty lhsDEXTREMEURGENCY;
                        lhsDEXTREMEURGENCY = this.getDEXTREMEURGENCY();
                        Empty rhsDEXTREMEURGENCY;
                        rhsDEXTREMEURGENCY = that.getDEXTREMEURGENCY();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dextremeurgency", lhsDEXTREMEURGENCY), LocatorUtils.property(thatLocator, "dextremeurgency", rhsDEXTREMEURGENCY), lhsDEXTREMEURGENCY, rhsDEXTREMEURGENCY)) {
                            return false;
                        }
                    }
                    {
                        Empty lhsDADDDELIVERIESORDERED;
                        lhsDADDDELIVERIESORDERED = this.getDADDDELIVERIESORDERED();
                        Empty rhsDADDDELIVERIESORDERED;
                        rhsDADDDELIVERIESORDERED = that.getDADDDELIVERIESORDERED();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dadddeliveriesordered", lhsDADDDELIVERIESORDERED), LocatorUtils.property(thatLocator, "dadddeliveriesordered", rhsDADDDELIVERIESORDERED), lhsDADDDELIVERIESORDERED, rhsDADDDELIVERIESORDERED)) {
                            return false;
                        }
                    }
                    {
                        DREPETITIONEXISTING lhsDREPETITIONEXISTING;
                        lhsDREPETITIONEXISTING = this.getDREPETITIONEXISTING();
                        DREPETITIONEXISTING rhsDREPETITIONEXISTING;
                        rhsDREPETITIONEXISTING = that.getDREPETITIONEXISTING();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "drepetitionexisting", lhsDREPETITIONEXISTING), LocatorUtils.property(thatLocator, "drepetitionexisting", rhsDREPETITIONEXISTING), lhsDREPETITIONEXISTING, rhsDREPETITIONEXISTING)) {
                            return false;
                        }
                    }
                    {
                        DCOMMODITYMARKET lhsDCOMMODITYMARKET;
                        lhsDCOMMODITYMARKET = this.getDCOMMODITYMARKET();
                        DCOMMODITYMARKET rhsDCOMMODITYMARKET;
                        rhsDCOMMODITYMARKET = that.getDCOMMODITYMARKET();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dcommoditymarket", lhsDCOMMODITYMARKET), LocatorUtils.property(thatLocator, "dcommoditymarket", rhsDCOMMODITYMARKET), lhsDCOMMODITYMARKET, rhsDCOMMODITYMARKET)) {
                            return false;
                        }
                    }
                    {
                        NoWorks lhsDFROMLIQUIDATORCREDITOR;
                        lhsDFROMLIQUIDATORCREDITOR = this.getDFROMLIQUIDATORCREDITOR();
                        NoWorks rhsDFROMLIQUIDATORCREDITOR;
                        rhsDFROMLIQUIDATORCREDITOR = that.getDFROMLIQUIDATORCREDITOR();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dfromliquidatorcreditor", lhsDFROMLIQUIDATORCREDITOR), LocatorUtils.property(thatLocator, "dfromliquidatorcreditor", rhsDFROMLIQUIDATORCREDITOR), lhsDFROMLIQUIDATORCREDITOR, rhsDFROMLIQUIDATORCREDITOR)) {
                            return false;
                        }
                    }
                    {
                        NoWorks lhsDFROMWINDINGPROVIDER;
                        lhsDFROMWINDINGPROVIDER = this.getDFROMWINDINGPROVIDER();
                        NoWorks rhsDFROMWINDINGPROVIDER;
                        rhsDFROMWINDINGPROVIDER = that.getDFROMWINDINGPROVIDER();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dfromwindingprovider", lhsDFROMWINDINGPROVIDER), LocatorUtils.property(thatLocator, "dfromwindingprovider", rhsDFROMWINDINGPROVIDER), lhsDFROMWINDINGPROVIDER, rhsDFROMWINDINGPROVIDER)) {
                            return false;
                        }
                    }
                    {
                        Services lhsDMARITIMESERVICES;
                        lhsDMARITIMESERVICES = this.getDMARITIMESERVICES();
                        Services rhsDMARITIMESERVICES;
                        rhsDMARITIMESERVICES = that.getDMARITIMESERVICES();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dmaritimeservices", lhsDMARITIMESERVICES), LocatorUtils.property(thatLocator, "dmaritimeservices", rhsDMARITIMESERVICES), lhsDMARITIMESERVICES, rhsDMARITIMESERVICES)) {
                            return false;
                        }
                    }
                    return true;
                }

                public boolean equals(Object object) {
                    final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                    return equals(null, null, object, strategy);
                }

                public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                    int currentHashCode = 1;
                    {
                        Empty theDPROCCOMPETITIVEDIALOGUE;
                        theDPROCCOMPETITIVEDIALOGUE = this.getDPROCCOMPETITIVEDIALOGUE();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dproccompetitivedialogue", theDPROCCOMPETITIVEDIALOGUE), currentHashCode, theDPROCCOMPETITIVEDIALOGUE);
                    }
                    {
                        Empty theDPROCNEGOTIATEDPRIORCALLCOMPETITION;
                        theDPROCNEGOTIATEDPRIORCALLCOMPETITION = this.getDPROCNEGOTIATEDPRIORCALLCOMPETITION();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dprocnegotiatedpriorcallcompetition", theDPROCNEGOTIATEDPRIORCALLCOMPETITION), currentHashCode, theDPROCNEGOTIATEDPRIORCALLCOMPETITION);
                    }
                    {
                        Empty theDPROCRESTRICTED;
                        theDPROCRESTRICTED = this.getDPROCRESTRICTED();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dprocrestricted", theDPROCRESTRICTED), currentHashCode, theDPROCRESTRICTED);
                    }
                    {
                        NoWorks theDOTHERSERVICES;
                        theDOTHERSERVICES = this.getDOTHERSERVICES();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dotherservices", theDOTHERSERVICES), currentHashCode, theDOTHERSERVICES);
                    }
                    {
                        NoWorks theDMANUFFORRESEARCH;
                        theDMANUFFORRESEARCH = this.getDMANUFFORRESEARCH();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dmanufforresearch", theDMANUFFORRESEARCH), currentHashCode, theDMANUFFORRESEARCH);
                    }
                    {
                        Empty theDALLTENDERS;
                        theDALLTENDERS = this.getDALLTENDERS();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dalltenders", theDALLTENDERS), currentHashCode, theDALLTENDERS);
                    }
                    {
                        Empty theDPROTECTRIGHTS;
                        theDPROTECTRIGHTS = this.getDPROTECTRIGHTS();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dprotectrights", theDPROTECTRIGHTS), currentHashCode, theDPROTECTRIGHTS);
                    }
                    {
                        Empty theDTECHNICAL;
                        theDTECHNICAL = this.getDTECHNICAL();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dtechnical", theDTECHNICAL), currentHashCode, theDTECHNICAL);
                    }
                    {
                        Empty theDPERIODSINCOMPATIBLE;
                        theDPERIODSINCOMPATIBLE = this.getDPERIODSINCOMPATIBLE();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dperiodsincompatible", theDPERIODSINCOMPATIBLE), currentHashCode, theDPERIODSINCOMPATIBLE);
                    }
                    {
                        Empty theDEXTREMEURGENCY;
                        theDEXTREMEURGENCY = this.getDEXTREMEURGENCY();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dextremeurgency", theDEXTREMEURGENCY), currentHashCode, theDEXTREMEURGENCY);
                    }
                    {
                        Empty theDADDDELIVERIESORDERED;
                        theDADDDELIVERIESORDERED = this.getDADDDELIVERIESORDERED();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dadddeliveriesordered", theDADDDELIVERIESORDERED), currentHashCode, theDADDDELIVERIESORDERED);
                    }
                    {
                        DREPETITIONEXISTING theDREPETITIONEXISTING;
                        theDREPETITIONEXISTING = this.getDREPETITIONEXISTING();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "drepetitionexisting", theDREPETITIONEXISTING), currentHashCode, theDREPETITIONEXISTING);
                    }
                    {
                        DCOMMODITYMARKET theDCOMMODITYMARKET;
                        theDCOMMODITYMARKET = this.getDCOMMODITYMARKET();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dcommoditymarket", theDCOMMODITYMARKET), currentHashCode, theDCOMMODITYMARKET);
                    }
                    {
                        NoWorks theDFROMLIQUIDATORCREDITOR;
                        theDFROMLIQUIDATORCREDITOR = this.getDFROMLIQUIDATORCREDITOR();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dfromliquidatorcreditor", theDFROMLIQUIDATORCREDITOR), currentHashCode, theDFROMLIQUIDATORCREDITOR);
                    }
                    {
                        NoWorks theDFROMWINDINGPROVIDER;
                        theDFROMWINDINGPROVIDER = this.getDFROMWINDINGPROVIDER();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dfromwindingprovider", theDFROMWINDINGPROVIDER), currentHashCode, theDFROMWINDINGPROVIDER);
                    }
                    {
                        Services theDMARITIMESERVICES;
                        theDMARITIMESERVICES = this.getDMARITIMESERVICES();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dmaritimeservices", theDMARITIMESERVICES), currentHashCode, theDMARITIMESERVICES);
                    }
                    return currentHashCode;
                }

                public int hashCode() {
                    final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                    return this.hashCode(null, strategy);
                }

                public String toString() {
                    final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                    final StringBuilder buffer = new StringBuilder();
                    append(null, buffer, strategy);
                    return buffer.toString();
                }

                public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                    strategy.appendStart(locator, this, buffer);
                    appendFields(locator, buffer, strategy);
                    strategy.appendEnd(locator, this, buffer);
                    return buffer;
                }

                public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                    {
                        Empty theDPROCCOMPETITIVEDIALOGUE;
                        theDPROCCOMPETITIVEDIALOGUE = this.getDPROCCOMPETITIVEDIALOGUE();
                        strategy.appendField(locator, this, "dproccompetitivedialogue", buffer, theDPROCCOMPETITIVEDIALOGUE);
                    }
                    {
                        Empty theDPROCNEGOTIATEDPRIORCALLCOMPETITION;
                        theDPROCNEGOTIATEDPRIORCALLCOMPETITION = this.getDPROCNEGOTIATEDPRIORCALLCOMPETITION();
                        strategy.appendField(locator, this, "dprocnegotiatedpriorcallcompetition", buffer, theDPROCNEGOTIATEDPRIORCALLCOMPETITION);
                    }
                    {
                        Empty theDPROCRESTRICTED;
                        theDPROCRESTRICTED = this.getDPROCRESTRICTED();
                        strategy.appendField(locator, this, "dprocrestricted", buffer, theDPROCRESTRICTED);
                    }
                    {
                        NoWorks theDOTHERSERVICES;
                        theDOTHERSERVICES = this.getDOTHERSERVICES();
                        strategy.appendField(locator, this, "dotherservices", buffer, theDOTHERSERVICES);
                    }
                    {
                        NoWorks theDMANUFFORRESEARCH;
                        theDMANUFFORRESEARCH = this.getDMANUFFORRESEARCH();
                        strategy.appendField(locator, this, "dmanufforresearch", buffer, theDMANUFFORRESEARCH);
                    }
                    {
                        Empty theDALLTENDERS;
                        theDALLTENDERS = this.getDALLTENDERS();
                        strategy.appendField(locator, this, "dalltenders", buffer, theDALLTENDERS);
                    }
                    {
                        Empty theDPROTECTRIGHTS;
                        theDPROTECTRIGHTS = this.getDPROTECTRIGHTS();
                        strategy.appendField(locator, this, "dprotectrights", buffer, theDPROTECTRIGHTS);
                    }
                    {
                        Empty theDTECHNICAL;
                        theDTECHNICAL = this.getDTECHNICAL();
                        strategy.appendField(locator, this, "dtechnical", buffer, theDTECHNICAL);
                    }
                    {
                        Empty theDPERIODSINCOMPATIBLE;
                        theDPERIODSINCOMPATIBLE = this.getDPERIODSINCOMPATIBLE();
                        strategy.appendField(locator, this, "dperiodsincompatible", buffer, theDPERIODSINCOMPATIBLE);
                    }
                    {
                        Empty theDEXTREMEURGENCY;
                        theDEXTREMEURGENCY = this.getDEXTREMEURGENCY();
                        strategy.appendField(locator, this, "dextremeurgency", buffer, theDEXTREMEURGENCY);
                    }
                    {
                        Empty theDADDDELIVERIESORDERED;
                        theDADDDELIVERIESORDERED = this.getDADDDELIVERIESORDERED();
                        strategy.appendField(locator, this, "dadddeliveriesordered", buffer, theDADDDELIVERIESORDERED);
                    }
                    {
                        DREPETITIONEXISTING theDREPETITIONEXISTING;
                        theDREPETITIONEXISTING = this.getDREPETITIONEXISTING();
                        strategy.appendField(locator, this, "drepetitionexisting", buffer, theDREPETITIONEXISTING);
                    }
                    {
                        DCOMMODITYMARKET theDCOMMODITYMARKET;
                        theDCOMMODITYMARKET = this.getDCOMMODITYMARKET();
                        strategy.appendField(locator, this, "dcommoditymarket", buffer, theDCOMMODITYMARKET);
                    }
                    {
                        NoWorks theDFROMLIQUIDATORCREDITOR;
                        theDFROMLIQUIDATORCREDITOR = this.getDFROMLIQUIDATORCREDITOR();
                        strategy.appendField(locator, this, "dfromliquidatorcreditor", buffer, theDFROMLIQUIDATORCREDITOR);
                    }
                    {
                        NoWorks theDFROMWINDINGPROVIDER;
                        theDFROMWINDINGPROVIDER = this.getDFROMWINDINGPROVIDER();
                        strategy.appendField(locator, this, "dfromwindingprovider", buffer, theDFROMWINDINGPROVIDER);
                    }
                    {
                        Services theDMARITIMESERVICES;
                        theDMARITIMESERVICES = this.getDMARITIMESERVICES();
                        strategy.appendField(locator, this, "dmaritimeservices", buffer, theDMARITIMESERVICES);
                    }
                    return buffer;
                }

            }

        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;choice>
     *           &lt;element name="PT_AWARD_CONTRACT_WITHOUT_PUBLICATION">
     *             &lt;complexType>
     *               &lt;complexContent>
     *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                   &lt;sequence>
     *                     &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}annex_d4_part1"/>
     *                     &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_JUSTIFICATION"/>
     *                   &lt;/sequence>
     *                 &lt;/restriction>
     *               &lt;/complexContent>
     *             &lt;/complexType>
     *           &lt;/element>
     *           &lt;element name="PT_AWARD_CONTRACT_WITHOUT_CALL">
     *             &lt;complexType>
     *               &lt;complexContent>
     *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                   &lt;sequence>
     *                     &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}annex_part2"/>
     *                     &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_JUSTIFICATION"/>
     *                   &lt;/sequence>
     *                 &lt;/restriction>
     *               &lt;/complexContent>
     *             &lt;/complexType>
     *           &lt;/element>
     *         &lt;/choice>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "ptawardcontractwithoutcall",
        "ptawardcontractwithoutpublication"
    })
    public static class DIRECTIVE201423EU
        implements Equals, HashCode, ToString
    {

        @XmlElement(name = "PT_AWARD_CONTRACT_WITHOUT_CALL")
        protected ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTCALL ptawardcontractwithoutcall;
        @XmlElement(name = "PT_AWARD_CONTRACT_WITHOUT_PUBLICATION")
        protected ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTPUBLICATION ptawardcontractwithoutpublication;

        /**
         * Gets the value of the ptawardcontractwithoutcall property.
         * 
         * @return
         *     possible object is
         *     {@link ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTCALL }
         *     
         */
        public ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTCALL getPTAWARDCONTRACTWITHOUTCALL() {
            return ptawardcontractwithoutcall;
        }

        /**
         * Sets the value of the ptawardcontractwithoutcall property.
         * 
         * @param value
         *     allowed object is
         *     {@link ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTCALL }
         *     
         */
        public void setPTAWARDCONTRACTWITHOUTCALL(ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTCALL value) {
            this.ptawardcontractwithoutcall = value;
        }

        /**
         * Gets the value of the ptawardcontractwithoutpublication property.
         * 
         * @return
         *     possible object is
         *     {@link ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTPUBLICATION }
         *     
         */
        public ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTPUBLICATION getPTAWARDCONTRACTWITHOUTPUBLICATION() {
            return ptawardcontractwithoutpublication;
        }

        /**
         * Sets the value of the ptawardcontractwithoutpublication property.
         * 
         * @param value
         *     allowed object is
         *     {@link ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTPUBLICATION }
         *     
         */
        public void setPTAWARDCONTRACTWITHOUTPUBLICATION(ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTPUBLICATION value) {
            this.ptawardcontractwithoutpublication = value;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ProcedureF15 .DIRECTIVE201423EU)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ProcedureF15 .DIRECTIVE201423EU that = ((ProcedureF15 .DIRECTIVE201423EU) object);
            {
                ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTCALL lhsPTAWARDCONTRACTWITHOUTCALL;
                lhsPTAWARDCONTRACTWITHOUTCALL = this.getPTAWARDCONTRACTWITHOUTCALL();
                ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTCALL rhsPTAWARDCONTRACTWITHOUTCALL;
                rhsPTAWARDCONTRACTWITHOUTCALL = that.getPTAWARDCONTRACTWITHOUTCALL();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "ptawardcontractwithoutcall", lhsPTAWARDCONTRACTWITHOUTCALL), LocatorUtils.property(thatLocator, "ptawardcontractwithoutcall", rhsPTAWARDCONTRACTWITHOUTCALL), lhsPTAWARDCONTRACTWITHOUTCALL, rhsPTAWARDCONTRACTWITHOUTCALL)) {
                    return false;
                }
            }
            {
                ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTPUBLICATION lhsPTAWARDCONTRACTWITHOUTPUBLICATION;
                lhsPTAWARDCONTRACTWITHOUTPUBLICATION = this.getPTAWARDCONTRACTWITHOUTPUBLICATION();
                ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTPUBLICATION rhsPTAWARDCONTRACTWITHOUTPUBLICATION;
                rhsPTAWARDCONTRACTWITHOUTPUBLICATION = that.getPTAWARDCONTRACTWITHOUTPUBLICATION();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "ptawardcontractwithoutpublication", lhsPTAWARDCONTRACTWITHOUTPUBLICATION), LocatorUtils.property(thatLocator, "ptawardcontractwithoutpublication", rhsPTAWARDCONTRACTWITHOUTPUBLICATION), lhsPTAWARDCONTRACTWITHOUTPUBLICATION, rhsPTAWARDCONTRACTWITHOUTPUBLICATION)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTCALL thePTAWARDCONTRACTWITHOUTCALL;
                thePTAWARDCONTRACTWITHOUTCALL = this.getPTAWARDCONTRACTWITHOUTCALL();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ptawardcontractwithoutcall", thePTAWARDCONTRACTWITHOUTCALL), currentHashCode, thePTAWARDCONTRACTWITHOUTCALL);
            }
            {
                ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTPUBLICATION thePTAWARDCONTRACTWITHOUTPUBLICATION;
                thePTAWARDCONTRACTWITHOUTPUBLICATION = this.getPTAWARDCONTRACTWITHOUTPUBLICATION();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ptawardcontractwithoutpublication", thePTAWARDCONTRACTWITHOUTPUBLICATION), currentHashCode, thePTAWARDCONTRACTWITHOUTPUBLICATION);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTCALL thePTAWARDCONTRACTWITHOUTCALL;
                thePTAWARDCONTRACTWITHOUTCALL = this.getPTAWARDCONTRACTWITHOUTCALL();
                strategy.appendField(locator, this, "ptawardcontractwithoutcall", buffer, thePTAWARDCONTRACTWITHOUTCALL);
            }
            {
                ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTPUBLICATION thePTAWARDCONTRACTWITHOUTPUBLICATION;
                thePTAWARDCONTRACTWITHOUTPUBLICATION = this.getPTAWARDCONTRACTWITHOUTPUBLICATION();
                strategy.appendField(locator, this, "ptawardcontractwithoutpublication", buffer, thePTAWARDCONTRACTWITHOUTPUBLICATION);
            }
            return buffer;
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType>
         *   &lt;complexContent>
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *       &lt;sequence>
         *         &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}annex_part2"/>
         *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_JUSTIFICATION"/>
         *       &lt;/sequence>
         *     &lt;/restriction>
         *   &lt;/complexContent>
         * &lt;/complexType>
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "doutsidescope",
            "djustification"
        })
        public static class PTAWARDCONTRACTWITHOUTCALL
            implements Equals, HashCode, ToString
        {

            @XmlElement(name = "D_OUTSIDE_SCOPE", required = true)
            protected Empty doutsidescope;
            @XmlElement(name = "D_JUSTIFICATION", required = true)
            protected TextFtMultiLines djustification;

            /**
             * Other justification for the award of the award of the contract without prior publication
             * 
             * @return
             *     possible object is
             *     {@link Empty }
             *     
             */
            public Empty getDOUTSIDESCOPE() {
                return doutsidescope;
            }

            /**
             * Sets the value of the doutsidescope property.
             * 
             * @param value
             *     allowed object is
             *     {@link Empty }
             *     
             */
            public void setDOUTSIDESCOPE(Empty value) {
                this.doutsidescope = value;
            }

            /**
             * Gets the value of the djustification property.
             * 
             * @return
             *     possible object is
             *     {@link TextFtMultiLines }
             *     
             */
            public TextFtMultiLines getDJUSTIFICATION() {
                return djustification;
            }

            /**
             * Sets the value of the djustification property.
             * 
             * @param value
             *     allowed object is
             *     {@link TextFtMultiLines }
             *     
             */
            public void setDJUSTIFICATION(TextFtMultiLines value) {
                this.djustification = value;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTCALL)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTCALL that = ((ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTCALL) object);
                {
                    Empty lhsDOUTSIDESCOPE;
                    lhsDOUTSIDESCOPE = this.getDOUTSIDESCOPE();
                    Empty rhsDOUTSIDESCOPE;
                    rhsDOUTSIDESCOPE = that.getDOUTSIDESCOPE();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "doutsidescope", lhsDOUTSIDESCOPE), LocatorUtils.property(thatLocator, "doutsidescope", rhsDOUTSIDESCOPE), lhsDOUTSIDESCOPE, rhsDOUTSIDESCOPE)) {
                        return false;
                    }
                }
                {
                    TextFtMultiLines lhsDJUSTIFICATION;
                    lhsDJUSTIFICATION = this.getDJUSTIFICATION();
                    TextFtMultiLines rhsDJUSTIFICATION;
                    rhsDJUSTIFICATION = that.getDJUSTIFICATION();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "djustification", lhsDJUSTIFICATION), LocatorUtils.property(thatLocator, "djustification", rhsDJUSTIFICATION), lhsDJUSTIFICATION, rhsDJUSTIFICATION)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    Empty theDOUTSIDESCOPE;
                    theDOUTSIDESCOPE = this.getDOUTSIDESCOPE();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "doutsidescope", theDOUTSIDESCOPE), currentHashCode, theDOUTSIDESCOPE);
                }
                {
                    TextFtMultiLines theDJUSTIFICATION;
                    theDJUSTIFICATION = this.getDJUSTIFICATION();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "djustification", theDJUSTIFICATION), currentHashCode, theDJUSTIFICATION);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    Empty theDOUTSIDESCOPE;
                    theDOUTSIDESCOPE = this.getDOUTSIDESCOPE();
                    strategy.appendField(locator, this, "doutsidescope", buffer, theDOUTSIDESCOPE);
                }
                {
                    TextFtMultiLines theDJUSTIFICATION;
                    theDJUSTIFICATION = this.getDJUSTIFICATION();
                    strategy.appendField(locator, this, "djustification", buffer, theDJUSTIFICATION);
                }
                return buffer;
            }

        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType>
         *   &lt;complexContent>
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *       &lt;sequence>
         *         &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}annex_d4_part1"/>
         *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_JUSTIFICATION"/>
         *       &lt;/sequence>
         *     &lt;/restriction>
         *   &lt;/complexContent>
         * &lt;/complexType>
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "daccordancearticle",
            "djustification"
        })
        public static class PTAWARDCONTRACTWITHOUTPUBLICATION
            implements Equals, HashCode, ToString
        {

            @XmlElement(name = "D_ACCORDANCE_ARTICLE", required = true)
            protected ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTPUBLICATION.DACCORDANCEARTICLE daccordancearticle;
            @XmlElement(name = "D_JUSTIFICATION", required = true)
            protected TextFtMultiLines djustification;

            /**
             * Gets the value of the daccordancearticle property.
             * 
             * @return
             *     possible object is
             *     {@link ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTPUBLICATION.DACCORDANCEARTICLE }
             *     
             */
            public ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTPUBLICATION.DACCORDANCEARTICLE getDACCORDANCEARTICLE() {
                return daccordancearticle;
            }

            /**
             * Sets the value of the daccordancearticle property.
             * 
             * @param value
             *     allowed object is
             *     {@link ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTPUBLICATION.DACCORDANCEARTICLE }
             *     
             */
            public void setDACCORDANCEARTICLE(ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTPUBLICATION.DACCORDANCEARTICLE value) {
                this.daccordancearticle = value;
            }

            /**
             * Gets the value of the djustification property.
             * 
             * @return
             *     possible object is
             *     {@link TextFtMultiLines }
             *     
             */
            public TextFtMultiLines getDJUSTIFICATION() {
                return djustification;
            }

            /**
             * Sets the value of the djustification property.
             * 
             * @param value
             *     allowed object is
             *     {@link TextFtMultiLines }
             *     
             */
            public void setDJUSTIFICATION(TextFtMultiLines value) {
                this.djustification = value;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTPUBLICATION)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTPUBLICATION that = ((ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTPUBLICATION) object);
                {
                    ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTPUBLICATION.DACCORDANCEARTICLE lhsDACCORDANCEARTICLE;
                    lhsDACCORDANCEARTICLE = this.getDACCORDANCEARTICLE();
                    ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTPUBLICATION.DACCORDANCEARTICLE rhsDACCORDANCEARTICLE;
                    rhsDACCORDANCEARTICLE = that.getDACCORDANCEARTICLE();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "daccordancearticle", lhsDACCORDANCEARTICLE), LocatorUtils.property(thatLocator, "daccordancearticle", rhsDACCORDANCEARTICLE), lhsDACCORDANCEARTICLE, rhsDACCORDANCEARTICLE)) {
                        return false;
                    }
                }
                {
                    TextFtMultiLines lhsDJUSTIFICATION;
                    lhsDJUSTIFICATION = this.getDJUSTIFICATION();
                    TextFtMultiLines rhsDJUSTIFICATION;
                    rhsDJUSTIFICATION = that.getDJUSTIFICATION();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "djustification", lhsDJUSTIFICATION), LocatorUtils.property(thatLocator, "djustification", rhsDJUSTIFICATION), lhsDJUSTIFICATION, rhsDJUSTIFICATION)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTPUBLICATION.DACCORDANCEARTICLE theDACCORDANCEARTICLE;
                    theDACCORDANCEARTICLE = this.getDACCORDANCEARTICLE();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "daccordancearticle", theDACCORDANCEARTICLE), currentHashCode, theDACCORDANCEARTICLE);
                }
                {
                    TextFtMultiLines theDJUSTIFICATION;
                    theDJUSTIFICATION = this.getDJUSTIFICATION();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "djustification", theDJUSTIFICATION), currentHashCode, theDJUSTIFICATION);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTPUBLICATION.DACCORDANCEARTICLE theDACCORDANCEARTICLE;
                    theDACCORDANCEARTICLE = this.getDACCORDANCEARTICLE();
                    strategy.appendField(locator, this, "daccordancearticle", buffer, theDACCORDANCEARTICLE);
                }
                {
                    TextFtMultiLines theDJUSTIFICATION;
                    theDJUSTIFICATION = this.getDJUSTIFICATION();
                    strategy.appendField(locator, this, "djustification", buffer, theDJUSTIFICATION);
                }
                return buffer;
            }


            /**
             * <p>Java class for anonymous complex type.
             * 
             * <p>The following schema fragment specifies the expected content contained within this class.
             * 
             * <pre>
             * &lt;complexType>
             *   &lt;complexContent>
             *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
             *       &lt;sequence>
             *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_NO_TENDERS_REQUESTS" minOccurs="0"/>
             *         &lt;choice minOccurs="0">
             *           &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_ARTISTIC"/>
             *           &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_TECHNICAL"/>
             *           &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_EXCLUSIVE_RIGHT"/>
             *           &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_PROTECT_RIGHTS"/>
             *         &lt;/choice>
             *       &lt;/sequence>
             *     &lt;/restriction>
             *   &lt;/complexContent>
             * &lt;/complexType>
             * </pre>
             * 
             * 
             */
            @XmlAccessorType(XmlAccessType.FIELD)
            @XmlType(name = "", propOrder = {
                "dnotendersrequests",
                "dprotectrights",
                "dexclusiveright",
                "dtechnical",
                "dartistic"
            })
            public static class DACCORDANCEARTICLE
                implements Equals, HashCode, ToString
            {

                @XmlElement(name = "D_NO_TENDERS_REQUESTS")
                protected Empty dnotendersrequests;
                @XmlElement(name = "D_PROTECT_RIGHTS")
                protected Empty dprotectrights;
                @XmlElement(name = "D_EXCLUSIVE_RIGHT")
                protected Empty dexclusiveright;
                @XmlElement(name = "D_TECHNICAL")
                protected Empty dtechnical;
                @XmlElement(name = "D_ARTISTIC")
                protected Empty dartistic;

                /**
                 * Gets the value of the dnotendersrequests property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Empty }
                 *     
                 */
                public Empty getDNOTENDERSREQUESTS() {
                    return dnotendersrequests;
                }

                /**
                 * Sets the value of the dnotendersrequests property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Empty }
                 *     
                 */
                public void setDNOTENDERSREQUESTS(Empty value) {
                    this.dnotendersrequests = value;
                }

                /**
                 * Gets the value of the dprotectrights property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Empty }
                 *     
                 */
                public Empty getDPROTECTRIGHTS() {
                    return dprotectrights;
                }

                /**
                 * Sets the value of the dprotectrights property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Empty }
                 *     
                 */
                public void setDPROTECTRIGHTS(Empty value) {
                    this.dprotectrights = value;
                }

                /**
                 * Gets the value of the dexclusiveright property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Empty }
                 *     
                 */
                public Empty getDEXCLUSIVERIGHT() {
                    return dexclusiveright;
                }

                /**
                 * Sets the value of the dexclusiveright property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Empty }
                 *     
                 */
                public void setDEXCLUSIVERIGHT(Empty value) {
                    this.dexclusiveright = value;
                }

                /**
                 * Gets the value of the dtechnical property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Empty }
                 *     
                 */
                public Empty getDTECHNICAL() {
                    return dtechnical;
                }

                /**
                 * Sets the value of the dtechnical property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Empty }
                 *     
                 */
                public void setDTECHNICAL(Empty value) {
                    this.dtechnical = value;
                }

                /**
                 * Gets the value of the dartistic property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Empty }
                 *     
                 */
                public Empty getDARTISTIC() {
                    return dartistic;
                }

                /**
                 * Sets the value of the dartistic property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Empty }
                 *     
                 */
                public void setDARTISTIC(Empty value) {
                    this.dartistic = value;
                }

                public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                    if (!(object instanceof ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTPUBLICATION.DACCORDANCEARTICLE)) {
                        return false;
                    }
                    if (this == object) {
                        return true;
                    }
                    final ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTPUBLICATION.DACCORDANCEARTICLE that = ((ProcedureF15 .DIRECTIVE201423EU.PTAWARDCONTRACTWITHOUTPUBLICATION.DACCORDANCEARTICLE) object);
                    {
                        Empty lhsDNOTENDERSREQUESTS;
                        lhsDNOTENDERSREQUESTS = this.getDNOTENDERSREQUESTS();
                        Empty rhsDNOTENDERSREQUESTS;
                        rhsDNOTENDERSREQUESTS = that.getDNOTENDERSREQUESTS();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dnotendersrequests", lhsDNOTENDERSREQUESTS), LocatorUtils.property(thatLocator, "dnotendersrequests", rhsDNOTENDERSREQUESTS), lhsDNOTENDERSREQUESTS, rhsDNOTENDERSREQUESTS)) {
                            return false;
                        }
                    }
                    {
                        Empty lhsDPROTECTRIGHTS;
                        lhsDPROTECTRIGHTS = this.getDPROTECTRIGHTS();
                        Empty rhsDPROTECTRIGHTS;
                        rhsDPROTECTRIGHTS = that.getDPROTECTRIGHTS();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dprotectrights", lhsDPROTECTRIGHTS), LocatorUtils.property(thatLocator, "dprotectrights", rhsDPROTECTRIGHTS), lhsDPROTECTRIGHTS, rhsDPROTECTRIGHTS)) {
                            return false;
                        }
                    }
                    {
                        Empty lhsDEXCLUSIVERIGHT;
                        lhsDEXCLUSIVERIGHT = this.getDEXCLUSIVERIGHT();
                        Empty rhsDEXCLUSIVERIGHT;
                        rhsDEXCLUSIVERIGHT = that.getDEXCLUSIVERIGHT();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dexclusiveright", lhsDEXCLUSIVERIGHT), LocatorUtils.property(thatLocator, "dexclusiveright", rhsDEXCLUSIVERIGHT), lhsDEXCLUSIVERIGHT, rhsDEXCLUSIVERIGHT)) {
                            return false;
                        }
                    }
                    {
                        Empty lhsDTECHNICAL;
                        lhsDTECHNICAL = this.getDTECHNICAL();
                        Empty rhsDTECHNICAL;
                        rhsDTECHNICAL = that.getDTECHNICAL();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dtechnical", lhsDTECHNICAL), LocatorUtils.property(thatLocator, "dtechnical", rhsDTECHNICAL), lhsDTECHNICAL, rhsDTECHNICAL)) {
                            return false;
                        }
                    }
                    {
                        Empty lhsDARTISTIC;
                        lhsDARTISTIC = this.getDARTISTIC();
                        Empty rhsDARTISTIC;
                        rhsDARTISTIC = that.getDARTISTIC();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dartistic", lhsDARTISTIC), LocatorUtils.property(thatLocator, "dartistic", rhsDARTISTIC), lhsDARTISTIC, rhsDARTISTIC)) {
                            return false;
                        }
                    }
                    return true;
                }

                public boolean equals(Object object) {
                    final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                    return equals(null, null, object, strategy);
                }

                public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                    int currentHashCode = 1;
                    {
                        Empty theDNOTENDERSREQUESTS;
                        theDNOTENDERSREQUESTS = this.getDNOTENDERSREQUESTS();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dnotendersrequests", theDNOTENDERSREQUESTS), currentHashCode, theDNOTENDERSREQUESTS);
                    }
                    {
                        Empty theDPROTECTRIGHTS;
                        theDPROTECTRIGHTS = this.getDPROTECTRIGHTS();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dprotectrights", theDPROTECTRIGHTS), currentHashCode, theDPROTECTRIGHTS);
                    }
                    {
                        Empty theDEXCLUSIVERIGHT;
                        theDEXCLUSIVERIGHT = this.getDEXCLUSIVERIGHT();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dexclusiveright", theDEXCLUSIVERIGHT), currentHashCode, theDEXCLUSIVERIGHT);
                    }
                    {
                        Empty theDTECHNICAL;
                        theDTECHNICAL = this.getDTECHNICAL();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dtechnical", theDTECHNICAL), currentHashCode, theDTECHNICAL);
                    }
                    {
                        Empty theDARTISTIC;
                        theDARTISTIC = this.getDARTISTIC();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dartistic", theDARTISTIC), currentHashCode, theDARTISTIC);
                    }
                    return currentHashCode;
                }

                public int hashCode() {
                    final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                    return this.hashCode(null, strategy);
                }

                public String toString() {
                    final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                    final StringBuilder buffer = new StringBuilder();
                    append(null, buffer, strategy);
                    return buffer.toString();
                }

                public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                    strategy.appendStart(locator, this, buffer);
                    appendFields(locator, buffer, strategy);
                    strategy.appendEnd(locator, this, buffer);
                    return buffer;
                }

                public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                    {
                        Empty theDNOTENDERSREQUESTS;
                        theDNOTENDERSREQUESTS = this.getDNOTENDERSREQUESTS();
                        strategy.appendField(locator, this, "dnotendersrequests", buffer, theDNOTENDERSREQUESTS);
                    }
                    {
                        Empty theDPROTECTRIGHTS;
                        theDPROTECTRIGHTS = this.getDPROTECTRIGHTS();
                        strategy.appendField(locator, this, "dprotectrights", buffer, theDPROTECTRIGHTS);
                    }
                    {
                        Empty theDEXCLUSIVERIGHT;
                        theDEXCLUSIVERIGHT = this.getDEXCLUSIVERIGHT();
                        strategy.appendField(locator, this, "dexclusiveright", buffer, theDEXCLUSIVERIGHT);
                    }
                    {
                        Empty theDTECHNICAL;
                        theDTECHNICAL = this.getDTECHNICAL();
                        strategy.appendField(locator, this, "dtechnical", buffer, theDTECHNICAL);
                    }
                    {
                        Empty theDARTISTIC;
                        theDARTISTIC = this.getDARTISTIC();
                        strategy.appendField(locator, this, "dartistic", buffer, theDARTISTIC);
                    }
                    return buffer;
                }

            }

        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;choice>
     *           &lt;element name="PT_NEGOTIATED_WITHOUT_PUBLICATION">
     *             &lt;complexType>
     *               &lt;complexContent>
     *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                   &lt;sequence>
     *                     &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}annex_d1_part1"/>
     *                     &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_JUSTIFICATION"/>
     *                   &lt;/sequence>
     *                 &lt;/restriction>
     *               &lt;/complexContent>
     *             &lt;/complexType>
     *           &lt;/element>
     *           &lt;element name="PT_AWARD_CONTRACT_WITHOUT_CALL">
     *             &lt;complexType>
     *               &lt;complexContent>
     *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                   &lt;sequence>
     *                     &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}annex_part2"/>
     *                     &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_JUSTIFICATION"/>
     *                   &lt;/sequence>
     *                 &lt;/restriction>
     *               &lt;/complexContent>
     *             &lt;/complexType>
     *           &lt;/element>
     *         &lt;/choice>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "ptawardcontractwithoutcall",
        "ptnegotiatedwithoutpublication"
    })
    public static class DIRECTIVE201424EU
        implements Equals, HashCode, ToString
    {

        @XmlElement(name = "PT_AWARD_CONTRACT_WITHOUT_CALL")
        protected ProcedureF15 .DIRECTIVE201424EU.PTAWARDCONTRACTWITHOUTCALL ptawardcontractwithoutcall;
        @XmlElement(name = "PT_NEGOTIATED_WITHOUT_PUBLICATION")
        protected ProcedureF15 .DIRECTIVE201424EU.PTNEGOTIATEDWITHOUTPUBLICATION ptnegotiatedwithoutpublication;

        /**
         * Gets the value of the ptawardcontractwithoutcall property.
         * 
         * @return
         *     possible object is
         *     {@link ProcedureF15 .DIRECTIVE201424EU.PTAWARDCONTRACTWITHOUTCALL }
         *     
         */
        public ProcedureF15 .DIRECTIVE201424EU.PTAWARDCONTRACTWITHOUTCALL getPTAWARDCONTRACTWITHOUTCALL() {
            return ptawardcontractwithoutcall;
        }

        /**
         * Sets the value of the ptawardcontractwithoutcall property.
         * 
         * @param value
         *     allowed object is
         *     {@link ProcedureF15 .DIRECTIVE201424EU.PTAWARDCONTRACTWITHOUTCALL }
         *     
         */
        public void setPTAWARDCONTRACTWITHOUTCALL(ProcedureF15 .DIRECTIVE201424EU.PTAWARDCONTRACTWITHOUTCALL value) {
            this.ptawardcontractwithoutcall = value;
        }

        /**
         * Gets the value of the ptnegotiatedwithoutpublication property.
         * 
         * @return
         *     possible object is
         *     {@link ProcedureF15 .DIRECTIVE201424EU.PTNEGOTIATEDWITHOUTPUBLICATION }
         *     
         */
        public ProcedureF15 .DIRECTIVE201424EU.PTNEGOTIATEDWITHOUTPUBLICATION getPTNEGOTIATEDWITHOUTPUBLICATION() {
            return ptnegotiatedwithoutpublication;
        }

        /**
         * Sets the value of the ptnegotiatedwithoutpublication property.
         * 
         * @param value
         *     allowed object is
         *     {@link ProcedureF15 .DIRECTIVE201424EU.PTNEGOTIATEDWITHOUTPUBLICATION }
         *     
         */
        public void setPTNEGOTIATEDWITHOUTPUBLICATION(ProcedureF15 .DIRECTIVE201424EU.PTNEGOTIATEDWITHOUTPUBLICATION value) {
            this.ptnegotiatedwithoutpublication = value;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ProcedureF15 .DIRECTIVE201424EU)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ProcedureF15 .DIRECTIVE201424EU that = ((ProcedureF15 .DIRECTIVE201424EU) object);
            {
                ProcedureF15 .DIRECTIVE201424EU.PTAWARDCONTRACTWITHOUTCALL lhsPTAWARDCONTRACTWITHOUTCALL;
                lhsPTAWARDCONTRACTWITHOUTCALL = this.getPTAWARDCONTRACTWITHOUTCALL();
                ProcedureF15 .DIRECTIVE201424EU.PTAWARDCONTRACTWITHOUTCALL rhsPTAWARDCONTRACTWITHOUTCALL;
                rhsPTAWARDCONTRACTWITHOUTCALL = that.getPTAWARDCONTRACTWITHOUTCALL();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "ptawardcontractwithoutcall", lhsPTAWARDCONTRACTWITHOUTCALL), LocatorUtils.property(thatLocator, "ptawardcontractwithoutcall", rhsPTAWARDCONTRACTWITHOUTCALL), lhsPTAWARDCONTRACTWITHOUTCALL, rhsPTAWARDCONTRACTWITHOUTCALL)) {
                    return false;
                }
            }
            {
                ProcedureF15 .DIRECTIVE201424EU.PTNEGOTIATEDWITHOUTPUBLICATION lhsPTNEGOTIATEDWITHOUTPUBLICATION;
                lhsPTNEGOTIATEDWITHOUTPUBLICATION = this.getPTNEGOTIATEDWITHOUTPUBLICATION();
                ProcedureF15 .DIRECTIVE201424EU.PTNEGOTIATEDWITHOUTPUBLICATION rhsPTNEGOTIATEDWITHOUTPUBLICATION;
                rhsPTNEGOTIATEDWITHOUTPUBLICATION = that.getPTNEGOTIATEDWITHOUTPUBLICATION();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "ptnegotiatedwithoutpublication", lhsPTNEGOTIATEDWITHOUTPUBLICATION), LocatorUtils.property(thatLocator, "ptnegotiatedwithoutpublication", rhsPTNEGOTIATEDWITHOUTPUBLICATION), lhsPTNEGOTIATEDWITHOUTPUBLICATION, rhsPTNEGOTIATEDWITHOUTPUBLICATION)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                ProcedureF15 .DIRECTIVE201424EU.PTAWARDCONTRACTWITHOUTCALL thePTAWARDCONTRACTWITHOUTCALL;
                thePTAWARDCONTRACTWITHOUTCALL = this.getPTAWARDCONTRACTWITHOUTCALL();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ptawardcontractwithoutcall", thePTAWARDCONTRACTWITHOUTCALL), currentHashCode, thePTAWARDCONTRACTWITHOUTCALL);
            }
            {
                ProcedureF15 .DIRECTIVE201424EU.PTNEGOTIATEDWITHOUTPUBLICATION thePTNEGOTIATEDWITHOUTPUBLICATION;
                thePTNEGOTIATEDWITHOUTPUBLICATION = this.getPTNEGOTIATEDWITHOUTPUBLICATION();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ptnegotiatedwithoutpublication", thePTNEGOTIATEDWITHOUTPUBLICATION), currentHashCode, thePTNEGOTIATEDWITHOUTPUBLICATION);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                ProcedureF15 .DIRECTIVE201424EU.PTAWARDCONTRACTWITHOUTCALL thePTAWARDCONTRACTWITHOUTCALL;
                thePTAWARDCONTRACTWITHOUTCALL = this.getPTAWARDCONTRACTWITHOUTCALL();
                strategy.appendField(locator, this, "ptawardcontractwithoutcall", buffer, thePTAWARDCONTRACTWITHOUTCALL);
            }
            {
                ProcedureF15 .DIRECTIVE201424EU.PTNEGOTIATEDWITHOUTPUBLICATION thePTNEGOTIATEDWITHOUTPUBLICATION;
                thePTNEGOTIATEDWITHOUTPUBLICATION = this.getPTNEGOTIATEDWITHOUTPUBLICATION();
                strategy.appendField(locator, this, "ptnegotiatedwithoutpublication", buffer, thePTNEGOTIATEDWITHOUTPUBLICATION);
            }
            return buffer;
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType>
         *   &lt;complexContent>
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *       &lt;sequence>
         *         &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}annex_part2"/>
         *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_JUSTIFICATION"/>
         *       &lt;/sequence>
         *     &lt;/restriction>
         *   &lt;/complexContent>
         * &lt;/complexType>
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "doutsidescope",
            "djustification"
        })
        public static class PTAWARDCONTRACTWITHOUTCALL
            implements Equals, HashCode, ToString
        {

            @XmlElement(name = "D_OUTSIDE_SCOPE", required = true)
            protected Empty doutsidescope;
            @XmlElement(name = "D_JUSTIFICATION", required = true)
            protected TextFtMultiLines djustification;

            /**
             * Other justification for the award of the award of the contract without prior publication
             * 
             * @return
             *     possible object is
             *     {@link Empty }
             *     
             */
            public Empty getDOUTSIDESCOPE() {
                return doutsidescope;
            }

            /**
             * Sets the value of the doutsidescope property.
             * 
             * @param value
             *     allowed object is
             *     {@link Empty }
             *     
             */
            public void setDOUTSIDESCOPE(Empty value) {
                this.doutsidescope = value;
            }

            /**
             * Gets the value of the djustification property.
             * 
             * @return
             *     possible object is
             *     {@link TextFtMultiLines }
             *     
             */
            public TextFtMultiLines getDJUSTIFICATION() {
                return djustification;
            }

            /**
             * Sets the value of the djustification property.
             * 
             * @param value
             *     allowed object is
             *     {@link TextFtMultiLines }
             *     
             */
            public void setDJUSTIFICATION(TextFtMultiLines value) {
                this.djustification = value;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof ProcedureF15 .DIRECTIVE201424EU.PTAWARDCONTRACTWITHOUTCALL)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final ProcedureF15 .DIRECTIVE201424EU.PTAWARDCONTRACTWITHOUTCALL that = ((ProcedureF15 .DIRECTIVE201424EU.PTAWARDCONTRACTWITHOUTCALL) object);
                {
                    Empty lhsDOUTSIDESCOPE;
                    lhsDOUTSIDESCOPE = this.getDOUTSIDESCOPE();
                    Empty rhsDOUTSIDESCOPE;
                    rhsDOUTSIDESCOPE = that.getDOUTSIDESCOPE();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "doutsidescope", lhsDOUTSIDESCOPE), LocatorUtils.property(thatLocator, "doutsidescope", rhsDOUTSIDESCOPE), lhsDOUTSIDESCOPE, rhsDOUTSIDESCOPE)) {
                        return false;
                    }
                }
                {
                    TextFtMultiLines lhsDJUSTIFICATION;
                    lhsDJUSTIFICATION = this.getDJUSTIFICATION();
                    TextFtMultiLines rhsDJUSTIFICATION;
                    rhsDJUSTIFICATION = that.getDJUSTIFICATION();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "djustification", lhsDJUSTIFICATION), LocatorUtils.property(thatLocator, "djustification", rhsDJUSTIFICATION), lhsDJUSTIFICATION, rhsDJUSTIFICATION)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    Empty theDOUTSIDESCOPE;
                    theDOUTSIDESCOPE = this.getDOUTSIDESCOPE();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "doutsidescope", theDOUTSIDESCOPE), currentHashCode, theDOUTSIDESCOPE);
                }
                {
                    TextFtMultiLines theDJUSTIFICATION;
                    theDJUSTIFICATION = this.getDJUSTIFICATION();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "djustification", theDJUSTIFICATION), currentHashCode, theDJUSTIFICATION);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    Empty theDOUTSIDESCOPE;
                    theDOUTSIDESCOPE = this.getDOUTSIDESCOPE();
                    strategy.appendField(locator, this, "doutsidescope", buffer, theDOUTSIDESCOPE);
                }
                {
                    TextFtMultiLines theDJUSTIFICATION;
                    theDJUSTIFICATION = this.getDJUSTIFICATION();
                    strategy.appendField(locator, this, "djustification", buffer, theDJUSTIFICATION);
                }
                return buffer;
            }

        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType>
         *   &lt;complexContent>
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *       &lt;sequence>
         *         &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}annex_d1_part1"/>
         *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_JUSTIFICATION"/>
         *       &lt;/sequence>
         *     &lt;/restriction>
         *   &lt;/complexContent>
         * &lt;/complexType>
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "daccordancearticle",
            "djustification"
        })
        public static class PTNEGOTIATEDWITHOUTPUBLICATION
            implements Equals, HashCode, ToString
        {

            @XmlElement(name = "D_ACCORDANCE_ARTICLE", required = true)
            protected ProcedureF15 .DIRECTIVE201424EU.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE daccordancearticle;
            @XmlElement(name = "D_JUSTIFICATION", required = true)
            protected TextFtMultiLines djustification;

            /**
             * Gets the value of the daccordancearticle property.
             * 
             * @return
             *     possible object is
             *     {@link ProcedureF15 .DIRECTIVE201424EU.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE }
             *     
             */
            public ProcedureF15 .DIRECTIVE201424EU.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE getDACCORDANCEARTICLE() {
                return daccordancearticle;
            }

            /**
             * Sets the value of the daccordancearticle property.
             * 
             * @param value
             *     allowed object is
             *     {@link ProcedureF15 .DIRECTIVE201424EU.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE }
             *     
             */
            public void setDACCORDANCEARTICLE(ProcedureF15 .DIRECTIVE201424EU.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE value) {
                this.daccordancearticle = value;
            }

            /**
             * Gets the value of the djustification property.
             * 
             * @return
             *     possible object is
             *     {@link TextFtMultiLines }
             *     
             */
            public TextFtMultiLines getDJUSTIFICATION() {
                return djustification;
            }

            /**
             * Sets the value of the djustification property.
             * 
             * @param value
             *     allowed object is
             *     {@link TextFtMultiLines }
             *     
             */
            public void setDJUSTIFICATION(TextFtMultiLines value) {
                this.djustification = value;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof ProcedureF15 .DIRECTIVE201424EU.PTNEGOTIATEDWITHOUTPUBLICATION)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final ProcedureF15 .DIRECTIVE201424EU.PTNEGOTIATEDWITHOUTPUBLICATION that = ((ProcedureF15 .DIRECTIVE201424EU.PTNEGOTIATEDWITHOUTPUBLICATION) object);
                {
                    ProcedureF15 .DIRECTIVE201424EU.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE lhsDACCORDANCEARTICLE;
                    lhsDACCORDANCEARTICLE = this.getDACCORDANCEARTICLE();
                    ProcedureF15 .DIRECTIVE201424EU.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE rhsDACCORDANCEARTICLE;
                    rhsDACCORDANCEARTICLE = that.getDACCORDANCEARTICLE();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "daccordancearticle", lhsDACCORDANCEARTICLE), LocatorUtils.property(thatLocator, "daccordancearticle", rhsDACCORDANCEARTICLE), lhsDACCORDANCEARTICLE, rhsDACCORDANCEARTICLE)) {
                        return false;
                    }
                }
                {
                    TextFtMultiLines lhsDJUSTIFICATION;
                    lhsDJUSTIFICATION = this.getDJUSTIFICATION();
                    TextFtMultiLines rhsDJUSTIFICATION;
                    rhsDJUSTIFICATION = that.getDJUSTIFICATION();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "djustification", lhsDJUSTIFICATION), LocatorUtils.property(thatLocator, "djustification", rhsDJUSTIFICATION), lhsDJUSTIFICATION, rhsDJUSTIFICATION)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    ProcedureF15 .DIRECTIVE201424EU.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE theDACCORDANCEARTICLE;
                    theDACCORDANCEARTICLE = this.getDACCORDANCEARTICLE();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "daccordancearticle", theDACCORDANCEARTICLE), currentHashCode, theDACCORDANCEARTICLE);
                }
                {
                    TextFtMultiLines theDJUSTIFICATION;
                    theDJUSTIFICATION = this.getDJUSTIFICATION();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "djustification", theDJUSTIFICATION), currentHashCode, theDJUSTIFICATION);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    ProcedureF15 .DIRECTIVE201424EU.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE theDACCORDANCEARTICLE;
                    theDACCORDANCEARTICLE = this.getDACCORDANCEARTICLE();
                    strategy.appendField(locator, this, "daccordancearticle", buffer, theDACCORDANCEARTICLE);
                }
                {
                    TextFtMultiLines theDJUSTIFICATION;
                    theDJUSTIFICATION = this.getDJUSTIFICATION();
                    strategy.appendField(locator, this, "djustification", buffer, theDJUSTIFICATION);
                }
                return buffer;
            }


            /**
             * <p>Java class for anonymous complex type.
             * 
             * <p>The following schema fragment specifies the expected content contained within this class.
             * 
             * <pre>
             * &lt;complexType>
             *   &lt;complexContent>
             *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
             *       &lt;sequence>
             *         &lt;choice minOccurs="0">
             *           &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_PROC_OPEN"/>
             *           &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_PROC_RESTRICTED"/>
             *         &lt;/choice>
             *         &lt;element name="D_MANUF_FOR_RESEARCH" type="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}supplies" minOccurs="0"/>
             *         &lt;choice minOccurs="0">
             *           &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_TECHNICAL"/>
             *           &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_ARTISTIC"/>
             *           &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_PROTECT_RIGHTS"/>
             *         &lt;/choice>
             *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_EXTREME_URGENCY" minOccurs="0"/>
             *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_ADD_DELIVERIES_ORDERED" minOccurs="0"/>
             *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_REPETITION_EXISTING" minOccurs="0"/>
             *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_CONTRACT_AWARDED_DESIGN_CONTEST" minOccurs="0"/>
             *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_COMMODITY_MARKET" minOccurs="0"/>
             *         &lt;choice minOccurs="0">
             *           &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_FROM_WINDING_PROVIDER"/>
             *           &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_FROM_LIQUIDATOR_CREDITOR"/>
             *         &lt;/choice>
             *       &lt;/sequence>
             *     &lt;/restriction>
             *   &lt;/complexContent>
             * &lt;/complexType>
             * </pre>
             * 
             * 
             */
            @XmlAccessorType(XmlAccessType.FIELD)
            @XmlType(name = "", propOrder = {
                "dprocrestricted",
                "dprocopen",
                "dmanufforresearch",
                "dprotectrights",
                "dartistic",
                "dtechnical",
                "dextremeurgency",
                "dadddeliveriesordered",
                "drepetitionexisting",
                "dcontractawardeddesigncontest",
                "dcommoditymarket",
                "dfromliquidatorcreditor",
                "dfromwindingprovider"
            })
            public static class DACCORDANCEARTICLE
                implements Equals, HashCode, ToString
            {

                @XmlElement(name = "D_PROC_RESTRICTED")
                protected Empty dprocrestricted;
                @XmlElement(name = "D_PROC_OPEN")
                protected Empty dprocopen;
                @XmlElement(name = "D_MANUF_FOR_RESEARCH")
                protected DCOMMODITYMARKET dmanufforresearch;
                @XmlElement(name = "D_PROTECT_RIGHTS")
                protected Empty dprotectrights;
                @XmlElement(name = "D_ARTISTIC")
                protected Empty dartistic;
                @XmlElement(name = "D_TECHNICAL")
                protected Empty dtechnical;
                @XmlElement(name = "D_EXTREME_URGENCY")
                protected Empty dextremeurgency;
                @XmlElement(name = "D_ADD_DELIVERIES_ORDERED")
                protected Empty dadddeliveriesordered;
                @XmlElement(name = "D_REPETITION_EXISTING")
                protected DREPETITIONEXISTING drepetitionexisting;
                @XmlElement(name = "D_CONTRACT_AWARDED_DESIGN_CONTEST")
                protected Services dcontractawardeddesigncontest;
                @XmlElement(name = "D_COMMODITY_MARKET")
                protected DCOMMODITYMARKET dcommoditymarket;
                @XmlElement(name = "D_FROM_LIQUIDATOR_CREDITOR")
                protected NoWorks dfromliquidatorcreditor;
                @XmlElement(name = "D_FROM_WINDING_PROVIDER")
                protected NoWorks dfromwindingprovider;

                /**
                 * Gets the value of the dprocrestricted property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Empty }
                 *     
                 */
                public Empty getDPROCRESTRICTED() {
                    return dprocrestricted;
                }

                /**
                 * Sets the value of the dprocrestricted property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Empty }
                 *     
                 */
                public void setDPROCRESTRICTED(Empty value) {
                    this.dprocrestricted = value;
                }

                /**
                 * Gets the value of the dprocopen property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Empty }
                 *     
                 */
                public Empty getDPROCOPEN() {
                    return dprocopen;
                }

                /**
                 * Sets the value of the dprocopen property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Empty }
                 *     
                 */
                public void setDPROCOPEN(Empty value) {
                    this.dprocopen = value;
                }

                /**
                 * Gets the value of the dmanufforresearch property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link DCOMMODITYMARKET }
                 *     
                 */
                public DCOMMODITYMARKET getDMANUFFORRESEARCH() {
                    return dmanufforresearch;
                }

                /**
                 * Sets the value of the dmanufforresearch property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link DCOMMODITYMARKET }
                 *     
                 */
                public void setDMANUFFORRESEARCH(DCOMMODITYMARKET value) {
                    this.dmanufforresearch = value;
                }

                /**
                 * Gets the value of the dprotectrights property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Empty }
                 *     
                 */
                public Empty getDPROTECTRIGHTS() {
                    return dprotectrights;
                }

                /**
                 * Sets the value of the dprotectrights property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Empty }
                 *     
                 */
                public void setDPROTECTRIGHTS(Empty value) {
                    this.dprotectrights = value;
                }

                /**
                 * Gets the value of the dartistic property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Empty }
                 *     
                 */
                public Empty getDARTISTIC() {
                    return dartistic;
                }

                /**
                 * Sets the value of the dartistic property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Empty }
                 *     
                 */
                public void setDARTISTIC(Empty value) {
                    this.dartistic = value;
                }

                /**
                 * Gets the value of the dtechnical property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Empty }
                 *     
                 */
                public Empty getDTECHNICAL() {
                    return dtechnical;
                }

                /**
                 * Sets the value of the dtechnical property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Empty }
                 *     
                 */
                public void setDTECHNICAL(Empty value) {
                    this.dtechnical = value;
                }

                /**
                 * Gets the value of the dextremeurgency property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Empty }
                 *     
                 */
                public Empty getDEXTREMEURGENCY() {
                    return dextremeurgency;
                }

                /**
                 * Sets the value of the dextremeurgency property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Empty }
                 *     
                 */
                public void setDEXTREMEURGENCY(Empty value) {
                    this.dextremeurgency = value;
                }

                /**
                 * Gets the value of the dadddeliveriesordered property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Empty }
                 *     
                 */
                public Empty getDADDDELIVERIESORDERED() {
                    return dadddeliveriesordered;
                }

                /**
                 * Sets the value of the dadddeliveriesordered property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Empty }
                 *     
                 */
                public void setDADDDELIVERIESORDERED(Empty value) {
                    this.dadddeliveriesordered = value;
                }

                /**
                 * Gets the value of the drepetitionexisting property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link DREPETITIONEXISTING }
                 *     
                 */
                public DREPETITIONEXISTING getDREPETITIONEXISTING() {
                    return drepetitionexisting;
                }

                /**
                 * Sets the value of the drepetitionexisting property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link DREPETITIONEXISTING }
                 *     
                 */
                public void setDREPETITIONEXISTING(DREPETITIONEXISTING value) {
                    this.drepetitionexisting = value;
                }

                /**
                 * Gets the value of the dcontractawardeddesigncontest property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Services }
                 *     
                 */
                public Services getDCONTRACTAWARDEDDESIGNCONTEST() {
                    return dcontractawardeddesigncontest;
                }

                /**
                 * Sets the value of the dcontractawardeddesigncontest property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Services }
                 *     
                 */
                public void setDCONTRACTAWARDEDDESIGNCONTEST(Services value) {
                    this.dcontractawardeddesigncontest = value;
                }

                /**
                 * Gets the value of the dcommoditymarket property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link DCOMMODITYMARKET }
                 *     
                 */
                public DCOMMODITYMARKET getDCOMMODITYMARKET() {
                    return dcommoditymarket;
                }

                /**
                 * Sets the value of the dcommoditymarket property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link DCOMMODITYMARKET }
                 *     
                 */
                public void setDCOMMODITYMARKET(DCOMMODITYMARKET value) {
                    this.dcommoditymarket = value;
                }

                /**
                 * Gets the value of the dfromliquidatorcreditor property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link NoWorks }
                 *     
                 */
                public NoWorks getDFROMLIQUIDATORCREDITOR() {
                    return dfromliquidatorcreditor;
                }

                /**
                 * Sets the value of the dfromliquidatorcreditor property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link NoWorks }
                 *     
                 */
                public void setDFROMLIQUIDATORCREDITOR(NoWorks value) {
                    this.dfromliquidatorcreditor = value;
                }

                /**
                 * Gets the value of the dfromwindingprovider property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link NoWorks }
                 *     
                 */
                public NoWorks getDFROMWINDINGPROVIDER() {
                    return dfromwindingprovider;
                }

                /**
                 * Sets the value of the dfromwindingprovider property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link NoWorks }
                 *     
                 */
                public void setDFROMWINDINGPROVIDER(NoWorks value) {
                    this.dfromwindingprovider = value;
                }

                public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                    if (!(object instanceof ProcedureF15 .DIRECTIVE201424EU.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE)) {
                        return false;
                    }
                    if (this == object) {
                        return true;
                    }
                    final ProcedureF15 .DIRECTIVE201424EU.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE that = ((ProcedureF15 .DIRECTIVE201424EU.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE) object);
                    {
                        Empty lhsDPROCRESTRICTED;
                        lhsDPROCRESTRICTED = this.getDPROCRESTRICTED();
                        Empty rhsDPROCRESTRICTED;
                        rhsDPROCRESTRICTED = that.getDPROCRESTRICTED();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dprocrestricted", lhsDPROCRESTRICTED), LocatorUtils.property(thatLocator, "dprocrestricted", rhsDPROCRESTRICTED), lhsDPROCRESTRICTED, rhsDPROCRESTRICTED)) {
                            return false;
                        }
                    }
                    {
                        Empty lhsDPROCOPEN;
                        lhsDPROCOPEN = this.getDPROCOPEN();
                        Empty rhsDPROCOPEN;
                        rhsDPROCOPEN = that.getDPROCOPEN();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dprocopen", lhsDPROCOPEN), LocatorUtils.property(thatLocator, "dprocopen", rhsDPROCOPEN), lhsDPROCOPEN, rhsDPROCOPEN)) {
                            return false;
                        }
                    }
                    {
                        DCOMMODITYMARKET lhsDMANUFFORRESEARCH;
                        lhsDMANUFFORRESEARCH = this.getDMANUFFORRESEARCH();
                        DCOMMODITYMARKET rhsDMANUFFORRESEARCH;
                        rhsDMANUFFORRESEARCH = that.getDMANUFFORRESEARCH();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dmanufforresearch", lhsDMANUFFORRESEARCH), LocatorUtils.property(thatLocator, "dmanufforresearch", rhsDMANUFFORRESEARCH), lhsDMANUFFORRESEARCH, rhsDMANUFFORRESEARCH)) {
                            return false;
                        }
                    }
                    {
                        Empty lhsDPROTECTRIGHTS;
                        lhsDPROTECTRIGHTS = this.getDPROTECTRIGHTS();
                        Empty rhsDPROTECTRIGHTS;
                        rhsDPROTECTRIGHTS = that.getDPROTECTRIGHTS();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dprotectrights", lhsDPROTECTRIGHTS), LocatorUtils.property(thatLocator, "dprotectrights", rhsDPROTECTRIGHTS), lhsDPROTECTRIGHTS, rhsDPROTECTRIGHTS)) {
                            return false;
                        }
                    }
                    {
                        Empty lhsDARTISTIC;
                        lhsDARTISTIC = this.getDARTISTIC();
                        Empty rhsDARTISTIC;
                        rhsDARTISTIC = that.getDARTISTIC();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dartistic", lhsDARTISTIC), LocatorUtils.property(thatLocator, "dartistic", rhsDARTISTIC), lhsDARTISTIC, rhsDARTISTIC)) {
                            return false;
                        }
                    }
                    {
                        Empty lhsDTECHNICAL;
                        lhsDTECHNICAL = this.getDTECHNICAL();
                        Empty rhsDTECHNICAL;
                        rhsDTECHNICAL = that.getDTECHNICAL();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dtechnical", lhsDTECHNICAL), LocatorUtils.property(thatLocator, "dtechnical", rhsDTECHNICAL), lhsDTECHNICAL, rhsDTECHNICAL)) {
                            return false;
                        }
                    }
                    {
                        Empty lhsDEXTREMEURGENCY;
                        lhsDEXTREMEURGENCY = this.getDEXTREMEURGENCY();
                        Empty rhsDEXTREMEURGENCY;
                        rhsDEXTREMEURGENCY = that.getDEXTREMEURGENCY();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dextremeurgency", lhsDEXTREMEURGENCY), LocatorUtils.property(thatLocator, "dextremeurgency", rhsDEXTREMEURGENCY), lhsDEXTREMEURGENCY, rhsDEXTREMEURGENCY)) {
                            return false;
                        }
                    }
                    {
                        Empty lhsDADDDELIVERIESORDERED;
                        lhsDADDDELIVERIESORDERED = this.getDADDDELIVERIESORDERED();
                        Empty rhsDADDDELIVERIESORDERED;
                        rhsDADDDELIVERIESORDERED = that.getDADDDELIVERIESORDERED();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dadddeliveriesordered", lhsDADDDELIVERIESORDERED), LocatorUtils.property(thatLocator, "dadddeliveriesordered", rhsDADDDELIVERIESORDERED), lhsDADDDELIVERIESORDERED, rhsDADDDELIVERIESORDERED)) {
                            return false;
                        }
                    }
                    {
                        DREPETITIONEXISTING lhsDREPETITIONEXISTING;
                        lhsDREPETITIONEXISTING = this.getDREPETITIONEXISTING();
                        DREPETITIONEXISTING rhsDREPETITIONEXISTING;
                        rhsDREPETITIONEXISTING = that.getDREPETITIONEXISTING();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "drepetitionexisting", lhsDREPETITIONEXISTING), LocatorUtils.property(thatLocator, "drepetitionexisting", rhsDREPETITIONEXISTING), lhsDREPETITIONEXISTING, rhsDREPETITIONEXISTING)) {
                            return false;
                        }
                    }
                    {
                        Services lhsDCONTRACTAWARDEDDESIGNCONTEST;
                        lhsDCONTRACTAWARDEDDESIGNCONTEST = this.getDCONTRACTAWARDEDDESIGNCONTEST();
                        Services rhsDCONTRACTAWARDEDDESIGNCONTEST;
                        rhsDCONTRACTAWARDEDDESIGNCONTEST = that.getDCONTRACTAWARDEDDESIGNCONTEST();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dcontractawardeddesigncontest", lhsDCONTRACTAWARDEDDESIGNCONTEST), LocatorUtils.property(thatLocator, "dcontractawardeddesigncontest", rhsDCONTRACTAWARDEDDESIGNCONTEST), lhsDCONTRACTAWARDEDDESIGNCONTEST, rhsDCONTRACTAWARDEDDESIGNCONTEST)) {
                            return false;
                        }
                    }
                    {
                        DCOMMODITYMARKET lhsDCOMMODITYMARKET;
                        lhsDCOMMODITYMARKET = this.getDCOMMODITYMARKET();
                        DCOMMODITYMARKET rhsDCOMMODITYMARKET;
                        rhsDCOMMODITYMARKET = that.getDCOMMODITYMARKET();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dcommoditymarket", lhsDCOMMODITYMARKET), LocatorUtils.property(thatLocator, "dcommoditymarket", rhsDCOMMODITYMARKET), lhsDCOMMODITYMARKET, rhsDCOMMODITYMARKET)) {
                            return false;
                        }
                    }
                    {
                        NoWorks lhsDFROMLIQUIDATORCREDITOR;
                        lhsDFROMLIQUIDATORCREDITOR = this.getDFROMLIQUIDATORCREDITOR();
                        NoWorks rhsDFROMLIQUIDATORCREDITOR;
                        rhsDFROMLIQUIDATORCREDITOR = that.getDFROMLIQUIDATORCREDITOR();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dfromliquidatorcreditor", lhsDFROMLIQUIDATORCREDITOR), LocatorUtils.property(thatLocator, "dfromliquidatorcreditor", rhsDFROMLIQUIDATORCREDITOR), lhsDFROMLIQUIDATORCREDITOR, rhsDFROMLIQUIDATORCREDITOR)) {
                            return false;
                        }
                    }
                    {
                        NoWorks lhsDFROMWINDINGPROVIDER;
                        lhsDFROMWINDINGPROVIDER = this.getDFROMWINDINGPROVIDER();
                        NoWorks rhsDFROMWINDINGPROVIDER;
                        rhsDFROMWINDINGPROVIDER = that.getDFROMWINDINGPROVIDER();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dfromwindingprovider", lhsDFROMWINDINGPROVIDER), LocatorUtils.property(thatLocator, "dfromwindingprovider", rhsDFROMWINDINGPROVIDER), lhsDFROMWINDINGPROVIDER, rhsDFROMWINDINGPROVIDER)) {
                            return false;
                        }
                    }
                    return true;
                }

                public boolean equals(Object object) {
                    final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                    return equals(null, null, object, strategy);
                }

                public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                    int currentHashCode = 1;
                    {
                        Empty theDPROCRESTRICTED;
                        theDPROCRESTRICTED = this.getDPROCRESTRICTED();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dprocrestricted", theDPROCRESTRICTED), currentHashCode, theDPROCRESTRICTED);
                    }
                    {
                        Empty theDPROCOPEN;
                        theDPROCOPEN = this.getDPROCOPEN();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dprocopen", theDPROCOPEN), currentHashCode, theDPROCOPEN);
                    }
                    {
                        DCOMMODITYMARKET theDMANUFFORRESEARCH;
                        theDMANUFFORRESEARCH = this.getDMANUFFORRESEARCH();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dmanufforresearch", theDMANUFFORRESEARCH), currentHashCode, theDMANUFFORRESEARCH);
                    }
                    {
                        Empty theDPROTECTRIGHTS;
                        theDPROTECTRIGHTS = this.getDPROTECTRIGHTS();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dprotectrights", theDPROTECTRIGHTS), currentHashCode, theDPROTECTRIGHTS);
                    }
                    {
                        Empty theDARTISTIC;
                        theDARTISTIC = this.getDARTISTIC();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dartistic", theDARTISTIC), currentHashCode, theDARTISTIC);
                    }
                    {
                        Empty theDTECHNICAL;
                        theDTECHNICAL = this.getDTECHNICAL();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dtechnical", theDTECHNICAL), currentHashCode, theDTECHNICAL);
                    }
                    {
                        Empty theDEXTREMEURGENCY;
                        theDEXTREMEURGENCY = this.getDEXTREMEURGENCY();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dextremeurgency", theDEXTREMEURGENCY), currentHashCode, theDEXTREMEURGENCY);
                    }
                    {
                        Empty theDADDDELIVERIESORDERED;
                        theDADDDELIVERIESORDERED = this.getDADDDELIVERIESORDERED();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dadddeliveriesordered", theDADDDELIVERIESORDERED), currentHashCode, theDADDDELIVERIESORDERED);
                    }
                    {
                        DREPETITIONEXISTING theDREPETITIONEXISTING;
                        theDREPETITIONEXISTING = this.getDREPETITIONEXISTING();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "drepetitionexisting", theDREPETITIONEXISTING), currentHashCode, theDREPETITIONEXISTING);
                    }
                    {
                        Services theDCONTRACTAWARDEDDESIGNCONTEST;
                        theDCONTRACTAWARDEDDESIGNCONTEST = this.getDCONTRACTAWARDEDDESIGNCONTEST();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dcontractawardeddesigncontest", theDCONTRACTAWARDEDDESIGNCONTEST), currentHashCode, theDCONTRACTAWARDEDDESIGNCONTEST);
                    }
                    {
                        DCOMMODITYMARKET theDCOMMODITYMARKET;
                        theDCOMMODITYMARKET = this.getDCOMMODITYMARKET();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dcommoditymarket", theDCOMMODITYMARKET), currentHashCode, theDCOMMODITYMARKET);
                    }
                    {
                        NoWorks theDFROMLIQUIDATORCREDITOR;
                        theDFROMLIQUIDATORCREDITOR = this.getDFROMLIQUIDATORCREDITOR();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dfromliquidatorcreditor", theDFROMLIQUIDATORCREDITOR), currentHashCode, theDFROMLIQUIDATORCREDITOR);
                    }
                    {
                        NoWorks theDFROMWINDINGPROVIDER;
                        theDFROMWINDINGPROVIDER = this.getDFROMWINDINGPROVIDER();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dfromwindingprovider", theDFROMWINDINGPROVIDER), currentHashCode, theDFROMWINDINGPROVIDER);
                    }
                    return currentHashCode;
                }

                public int hashCode() {
                    final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                    return this.hashCode(null, strategy);
                }

                public String toString() {
                    final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                    final StringBuilder buffer = new StringBuilder();
                    append(null, buffer, strategy);
                    return buffer.toString();
                }

                public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                    strategy.appendStart(locator, this, buffer);
                    appendFields(locator, buffer, strategy);
                    strategy.appendEnd(locator, this, buffer);
                    return buffer;
                }

                public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                    {
                        Empty theDPROCRESTRICTED;
                        theDPROCRESTRICTED = this.getDPROCRESTRICTED();
                        strategy.appendField(locator, this, "dprocrestricted", buffer, theDPROCRESTRICTED);
                    }
                    {
                        Empty theDPROCOPEN;
                        theDPROCOPEN = this.getDPROCOPEN();
                        strategy.appendField(locator, this, "dprocopen", buffer, theDPROCOPEN);
                    }
                    {
                        DCOMMODITYMARKET theDMANUFFORRESEARCH;
                        theDMANUFFORRESEARCH = this.getDMANUFFORRESEARCH();
                        strategy.appendField(locator, this, "dmanufforresearch", buffer, theDMANUFFORRESEARCH);
                    }
                    {
                        Empty theDPROTECTRIGHTS;
                        theDPROTECTRIGHTS = this.getDPROTECTRIGHTS();
                        strategy.appendField(locator, this, "dprotectrights", buffer, theDPROTECTRIGHTS);
                    }
                    {
                        Empty theDARTISTIC;
                        theDARTISTIC = this.getDARTISTIC();
                        strategy.appendField(locator, this, "dartistic", buffer, theDARTISTIC);
                    }
                    {
                        Empty theDTECHNICAL;
                        theDTECHNICAL = this.getDTECHNICAL();
                        strategy.appendField(locator, this, "dtechnical", buffer, theDTECHNICAL);
                    }
                    {
                        Empty theDEXTREMEURGENCY;
                        theDEXTREMEURGENCY = this.getDEXTREMEURGENCY();
                        strategy.appendField(locator, this, "dextremeurgency", buffer, theDEXTREMEURGENCY);
                    }
                    {
                        Empty theDADDDELIVERIESORDERED;
                        theDADDDELIVERIESORDERED = this.getDADDDELIVERIESORDERED();
                        strategy.appendField(locator, this, "dadddeliveriesordered", buffer, theDADDDELIVERIESORDERED);
                    }
                    {
                        DREPETITIONEXISTING theDREPETITIONEXISTING;
                        theDREPETITIONEXISTING = this.getDREPETITIONEXISTING();
                        strategy.appendField(locator, this, "drepetitionexisting", buffer, theDREPETITIONEXISTING);
                    }
                    {
                        Services theDCONTRACTAWARDEDDESIGNCONTEST;
                        theDCONTRACTAWARDEDDESIGNCONTEST = this.getDCONTRACTAWARDEDDESIGNCONTEST();
                        strategy.appendField(locator, this, "dcontractawardeddesigncontest", buffer, theDCONTRACTAWARDEDDESIGNCONTEST);
                    }
                    {
                        DCOMMODITYMARKET theDCOMMODITYMARKET;
                        theDCOMMODITYMARKET = this.getDCOMMODITYMARKET();
                        strategy.appendField(locator, this, "dcommoditymarket", buffer, theDCOMMODITYMARKET);
                    }
                    {
                        NoWorks theDFROMLIQUIDATORCREDITOR;
                        theDFROMLIQUIDATORCREDITOR = this.getDFROMLIQUIDATORCREDITOR();
                        strategy.appendField(locator, this, "dfromliquidatorcreditor", buffer, theDFROMLIQUIDATORCREDITOR);
                    }
                    {
                        NoWorks theDFROMWINDINGPROVIDER;
                        theDFROMWINDINGPROVIDER = this.getDFROMWINDINGPROVIDER();
                        strategy.appendField(locator, this, "dfromwindingprovider", buffer, theDFROMWINDINGPROVIDER);
                    }
                    return buffer;
                }

            }

        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;choice>
     *           &lt;element name="PT_NEGOTIATED_WITHOUT_PUBLICATION">
     *             &lt;complexType>
     *               &lt;complexContent>
     *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                   &lt;sequence>
     *                     &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}annex_d2_part1"/>
     *                     &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_JUSTIFICATION"/>
     *                   &lt;/sequence>
     *                 &lt;/restriction>
     *               &lt;/complexContent>
     *             &lt;/complexType>
     *           &lt;/element>
     *           &lt;element name="PT_AWARD_CONTRACT_WITHOUT_CALL">
     *             &lt;complexType>
     *               &lt;complexContent>
     *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *                   &lt;sequence>
     *                     &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}annex_part2"/>
     *                     &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_JUSTIFICATION"/>
     *                   &lt;/sequence>
     *                 &lt;/restriction>
     *               &lt;/complexContent>
     *             &lt;/complexType>
     *           &lt;/element>
     *         &lt;/choice>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "ptawardcontractwithoutcall",
        "ptnegotiatedwithoutpublication"
    })
    public static class DIRECTIVE201425EU
        implements Equals, HashCode, ToString
    {

        @XmlElement(name = "PT_AWARD_CONTRACT_WITHOUT_CALL")
        protected ProcedureF15 .DIRECTIVE201425EU.PTAWARDCONTRACTWITHOUTCALL ptawardcontractwithoutcall;
        @XmlElement(name = "PT_NEGOTIATED_WITHOUT_PUBLICATION")
        protected ProcedureF15 .DIRECTIVE201425EU.PTNEGOTIATEDWITHOUTPUBLICATION ptnegotiatedwithoutpublication;

        /**
         * Gets the value of the ptawardcontractwithoutcall property.
         * 
         * @return
         *     possible object is
         *     {@link ProcedureF15 .DIRECTIVE201425EU.PTAWARDCONTRACTWITHOUTCALL }
         *     
         */
        public ProcedureF15 .DIRECTIVE201425EU.PTAWARDCONTRACTWITHOUTCALL getPTAWARDCONTRACTWITHOUTCALL() {
            return ptawardcontractwithoutcall;
        }

        /**
         * Sets the value of the ptawardcontractwithoutcall property.
         * 
         * @param value
         *     allowed object is
         *     {@link ProcedureF15 .DIRECTIVE201425EU.PTAWARDCONTRACTWITHOUTCALL }
         *     
         */
        public void setPTAWARDCONTRACTWITHOUTCALL(ProcedureF15 .DIRECTIVE201425EU.PTAWARDCONTRACTWITHOUTCALL value) {
            this.ptawardcontractwithoutcall = value;
        }

        /**
         * Gets the value of the ptnegotiatedwithoutpublication property.
         * 
         * @return
         *     possible object is
         *     {@link ProcedureF15 .DIRECTIVE201425EU.PTNEGOTIATEDWITHOUTPUBLICATION }
         *     
         */
        public ProcedureF15 .DIRECTIVE201425EU.PTNEGOTIATEDWITHOUTPUBLICATION getPTNEGOTIATEDWITHOUTPUBLICATION() {
            return ptnegotiatedwithoutpublication;
        }

        /**
         * Sets the value of the ptnegotiatedwithoutpublication property.
         * 
         * @param value
         *     allowed object is
         *     {@link ProcedureF15 .DIRECTIVE201425EU.PTNEGOTIATEDWITHOUTPUBLICATION }
         *     
         */
        public void setPTNEGOTIATEDWITHOUTPUBLICATION(ProcedureF15 .DIRECTIVE201425EU.PTNEGOTIATEDWITHOUTPUBLICATION value) {
            this.ptnegotiatedwithoutpublication = value;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ProcedureF15 .DIRECTIVE201425EU)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ProcedureF15 .DIRECTIVE201425EU that = ((ProcedureF15 .DIRECTIVE201425EU) object);
            {
                ProcedureF15 .DIRECTIVE201425EU.PTAWARDCONTRACTWITHOUTCALL lhsPTAWARDCONTRACTWITHOUTCALL;
                lhsPTAWARDCONTRACTWITHOUTCALL = this.getPTAWARDCONTRACTWITHOUTCALL();
                ProcedureF15 .DIRECTIVE201425EU.PTAWARDCONTRACTWITHOUTCALL rhsPTAWARDCONTRACTWITHOUTCALL;
                rhsPTAWARDCONTRACTWITHOUTCALL = that.getPTAWARDCONTRACTWITHOUTCALL();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "ptawardcontractwithoutcall", lhsPTAWARDCONTRACTWITHOUTCALL), LocatorUtils.property(thatLocator, "ptawardcontractwithoutcall", rhsPTAWARDCONTRACTWITHOUTCALL), lhsPTAWARDCONTRACTWITHOUTCALL, rhsPTAWARDCONTRACTWITHOUTCALL)) {
                    return false;
                }
            }
            {
                ProcedureF15 .DIRECTIVE201425EU.PTNEGOTIATEDWITHOUTPUBLICATION lhsPTNEGOTIATEDWITHOUTPUBLICATION;
                lhsPTNEGOTIATEDWITHOUTPUBLICATION = this.getPTNEGOTIATEDWITHOUTPUBLICATION();
                ProcedureF15 .DIRECTIVE201425EU.PTNEGOTIATEDWITHOUTPUBLICATION rhsPTNEGOTIATEDWITHOUTPUBLICATION;
                rhsPTNEGOTIATEDWITHOUTPUBLICATION = that.getPTNEGOTIATEDWITHOUTPUBLICATION();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "ptnegotiatedwithoutpublication", lhsPTNEGOTIATEDWITHOUTPUBLICATION), LocatorUtils.property(thatLocator, "ptnegotiatedwithoutpublication", rhsPTNEGOTIATEDWITHOUTPUBLICATION), lhsPTNEGOTIATEDWITHOUTPUBLICATION, rhsPTNEGOTIATEDWITHOUTPUBLICATION)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                ProcedureF15 .DIRECTIVE201425EU.PTAWARDCONTRACTWITHOUTCALL thePTAWARDCONTRACTWITHOUTCALL;
                thePTAWARDCONTRACTWITHOUTCALL = this.getPTAWARDCONTRACTWITHOUTCALL();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ptawardcontractwithoutcall", thePTAWARDCONTRACTWITHOUTCALL), currentHashCode, thePTAWARDCONTRACTWITHOUTCALL);
            }
            {
                ProcedureF15 .DIRECTIVE201425EU.PTNEGOTIATEDWITHOUTPUBLICATION thePTNEGOTIATEDWITHOUTPUBLICATION;
                thePTNEGOTIATEDWITHOUTPUBLICATION = this.getPTNEGOTIATEDWITHOUTPUBLICATION();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ptnegotiatedwithoutpublication", thePTNEGOTIATEDWITHOUTPUBLICATION), currentHashCode, thePTNEGOTIATEDWITHOUTPUBLICATION);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                ProcedureF15 .DIRECTIVE201425EU.PTAWARDCONTRACTWITHOUTCALL thePTAWARDCONTRACTWITHOUTCALL;
                thePTAWARDCONTRACTWITHOUTCALL = this.getPTAWARDCONTRACTWITHOUTCALL();
                strategy.appendField(locator, this, "ptawardcontractwithoutcall", buffer, thePTAWARDCONTRACTWITHOUTCALL);
            }
            {
                ProcedureF15 .DIRECTIVE201425EU.PTNEGOTIATEDWITHOUTPUBLICATION thePTNEGOTIATEDWITHOUTPUBLICATION;
                thePTNEGOTIATEDWITHOUTPUBLICATION = this.getPTNEGOTIATEDWITHOUTPUBLICATION();
                strategy.appendField(locator, this, "ptnegotiatedwithoutpublication", buffer, thePTNEGOTIATEDWITHOUTPUBLICATION);
            }
            return buffer;
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType>
         *   &lt;complexContent>
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *       &lt;sequence>
         *         &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}annex_part2"/>
         *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_JUSTIFICATION"/>
         *       &lt;/sequence>
         *     &lt;/restriction>
         *   &lt;/complexContent>
         * &lt;/complexType>
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "doutsidescope",
            "djustification"
        })
        public static class PTAWARDCONTRACTWITHOUTCALL
            implements Equals, HashCode, ToString
        {

            @XmlElement(name = "D_OUTSIDE_SCOPE", required = true)
            protected Empty doutsidescope;
            @XmlElement(name = "D_JUSTIFICATION", required = true)
            protected TextFtMultiLines djustification;

            /**
             * Other justification for the award of the award of the contract without prior publication
             * 
             * @return
             *     possible object is
             *     {@link Empty }
             *     
             */
            public Empty getDOUTSIDESCOPE() {
                return doutsidescope;
            }

            /**
             * Sets the value of the doutsidescope property.
             * 
             * @param value
             *     allowed object is
             *     {@link Empty }
             *     
             */
            public void setDOUTSIDESCOPE(Empty value) {
                this.doutsidescope = value;
            }

            /**
             * Gets the value of the djustification property.
             * 
             * @return
             *     possible object is
             *     {@link TextFtMultiLines }
             *     
             */
            public TextFtMultiLines getDJUSTIFICATION() {
                return djustification;
            }

            /**
             * Sets the value of the djustification property.
             * 
             * @param value
             *     allowed object is
             *     {@link TextFtMultiLines }
             *     
             */
            public void setDJUSTIFICATION(TextFtMultiLines value) {
                this.djustification = value;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof ProcedureF15 .DIRECTIVE201425EU.PTAWARDCONTRACTWITHOUTCALL)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final ProcedureF15 .DIRECTIVE201425EU.PTAWARDCONTRACTWITHOUTCALL that = ((ProcedureF15 .DIRECTIVE201425EU.PTAWARDCONTRACTWITHOUTCALL) object);
                {
                    Empty lhsDOUTSIDESCOPE;
                    lhsDOUTSIDESCOPE = this.getDOUTSIDESCOPE();
                    Empty rhsDOUTSIDESCOPE;
                    rhsDOUTSIDESCOPE = that.getDOUTSIDESCOPE();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "doutsidescope", lhsDOUTSIDESCOPE), LocatorUtils.property(thatLocator, "doutsidescope", rhsDOUTSIDESCOPE), lhsDOUTSIDESCOPE, rhsDOUTSIDESCOPE)) {
                        return false;
                    }
                }
                {
                    TextFtMultiLines lhsDJUSTIFICATION;
                    lhsDJUSTIFICATION = this.getDJUSTIFICATION();
                    TextFtMultiLines rhsDJUSTIFICATION;
                    rhsDJUSTIFICATION = that.getDJUSTIFICATION();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "djustification", lhsDJUSTIFICATION), LocatorUtils.property(thatLocator, "djustification", rhsDJUSTIFICATION), lhsDJUSTIFICATION, rhsDJUSTIFICATION)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    Empty theDOUTSIDESCOPE;
                    theDOUTSIDESCOPE = this.getDOUTSIDESCOPE();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "doutsidescope", theDOUTSIDESCOPE), currentHashCode, theDOUTSIDESCOPE);
                }
                {
                    TextFtMultiLines theDJUSTIFICATION;
                    theDJUSTIFICATION = this.getDJUSTIFICATION();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "djustification", theDJUSTIFICATION), currentHashCode, theDJUSTIFICATION);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    Empty theDOUTSIDESCOPE;
                    theDOUTSIDESCOPE = this.getDOUTSIDESCOPE();
                    strategy.appendField(locator, this, "doutsidescope", buffer, theDOUTSIDESCOPE);
                }
                {
                    TextFtMultiLines theDJUSTIFICATION;
                    theDJUSTIFICATION = this.getDJUSTIFICATION();
                    strategy.appendField(locator, this, "djustification", buffer, theDJUSTIFICATION);
                }
                return buffer;
            }

        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType>
         *   &lt;complexContent>
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
         *       &lt;sequence>
         *         &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}annex_d2_part1"/>
         *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_JUSTIFICATION"/>
         *       &lt;/sequence>
         *     &lt;/restriction>
         *   &lt;/complexContent>
         * &lt;/complexType>
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "daccordancearticle",
            "djustification"
        })
        public static class PTNEGOTIATEDWITHOUTPUBLICATION
            implements Equals, HashCode, ToString
        {

            @XmlElement(name = "D_ACCORDANCE_ARTICLE", required = true)
            protected ProcedureF15 .DIRECTIVE201425EU.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE daccordancearticle;
            @XmlElement(name = "D_JUSTIFICATION", required = true)
            protected TextFtMultiLines djustification;

            /**
             * Gets the value of the daccordancearticle property.
             * 
             * @return
             *     possible object is
             *     {@link ProcedureF15 .DIRECTIVE201425EU.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE }
             *     
             */
            public ProcedureF15 .DIRECTIVE201425EU.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE getDACCORDANCEARTICLE() {
                return daccordancearticle;
            }

            /**
             * Sets the value of the daccordancearticle property.
             * 
             * @param value
             *     allowed object is
             *     {@link ProcedureF15 .DIRECTIVE201425EU.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE }
             *     
             */
            public void setDACCORDANCEARTICLE(ProcedureF15 .DIRECTIVE201425EU.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE value) {
                this.daccordancearticle = value;
            }

            /**
             * Gets the value of the djustification property.
             * 
             * @return
             *     possible object is
             *     {@link TextFtMultiLines }
             *     
             */
            public TextFtMultiLines getDJUSTIFICATION() {
                return djustification;
            }

            /**
             * Sets the value of the djustification property.
             * 
             * @param value
             *     allowed object is
             *     {@link TextFtMultiLines }
             *     
             */
            public void setDJUSTIFICATION(TextFtMultiLines value) {
                this.djustification = value;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof ProcedureF15 .DIRECTIVE201425EU.PTNEGOTIATEDWITHOUTPUBLICATION)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final ProcedureF15 .DIRECTIVE201425EU.PTNEGOTIATEDWITHOUTPUBLICATION that = ((ProcedureF15 .DIRECTIVE201425EU.PTNEGOTIATEDWITHOUTPUBLICATION) object);
                {
                    ProcedureF15 .DIRECTIVE201425EU.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE lhsDACCORDANCEARTICLE;
                    lhsDACCORDANCEARTICLE = this.getDACCORDANCEARTICLE();
                    ProcedureF15 .DIRECTIVE201425EU.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE rhsDACCORDANCEARTICLE;
                    rhsDACCORDANCEARTICLE = that.getDACCORDANCEARTICLE();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "daccordancearticle", lhsDACCORDANCEARTICLE), LocatorUtils.property(thatLocator, "daccordancearticle", rhsDACCORDANCEARTICLE), lhsDACCORDANCEARTICLE, rhsDACCORDANCEARTICLE)) {
                        return false;
                    }
                }
                {
                    TextFtMultiLines lhsDJUSTIFICATION;
                    lhsDJUSTIFICATION = this.getDJUSTIFICATION();
                    TextFtMultiLines rhsDJUSTIFICATION;
                    rhsDJUSTIFICATION = that.getDJUSTIFICATION();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "djustification", lhsDJUSTIFICATION), LocatorUtils.property(thatLocator, "djustification", rhsDJUSTIFICATION), lhsDJUSTIFICATION, rhsDJUSTIFICATION)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    ProcedureF15 .DIRECTIVE201425EU.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE theDACCORDANCEARTICLE;
                    theDACCORDANCEARTICLE = this.getDACCORDANCEARTICLE();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "daccordancearticle", theDACCORDANCEARTICLE), currentHashCode, theDACCORDANCEARTICLE);
                }
                {
                    TextFtMultiLines theDJUSTIFICATION;
                    theDJUSTIFICATION = this.getDJUSTIFICATION();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "djustification", theDJUSTIFICATION), currentHashCode, theDJUSTIFICATION);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    ProcedureF15 .DIRECTIVE201425EU.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE theDACCORDANCEARTICLE;
                    theDACCORDANCEARTICLE = this.getDACCORDANCEARTICLE();
                    strategy.appendField(locator, this, "daccordancearticle", buffer, theDACCORDANCEARTICLE);
                }
                {
                    TextFtMultiLines theDJUSTIFICATION;
                    theDJUSTIFICATION = this.getDJUSTIFICATION();
                    strategy.appendField(locator, this, "djustification", buffer, theDJUSTIFICATION);
                }
                return buffer;
            }


            /**
             * <p>Java class for anonymous complex type.
             * 
             * <p>The following schema fragment specifies the expected content contained within this class.
             * 
             * <pre>
             * &lt;complexType>
             *   &lt;complexContent>
             *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
             *       &lt;sequence>
             *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_NO_TENDERS_REQUESTS" minOccurs="0"/>
             *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_PURE_RESEARCH" minOccurs="0"/>
             *         &lt;choice minOccurs="0">
             *           &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_TECHNICAL"/>
             *           &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_ARTISTIC"/>
             *           &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_PROTECT_RIGHTS"/>
             *         &lt;/choice>
             *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_EXTREME_URGENCY" minOccurs="0"/>
             *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_ADD_DELIVERIES_ORDERED" minOccurs="0"/>
             *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_REPETITION_EXISTING" minOccurs="0"/>
             *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_CONTRACT_AWARDED_DESIGN_CONTEST" minOccurs="0"/>
             *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_COMMODITY_MARKET" minOccurs="0"/>
             *         &lt;choice minOccurs="0">
             *           &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_FROM_WINDING_PROVIDER"/>
             *           &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_FROM_LIQUIDATOR_CREDITOR"/>
             *         &lt;/choice>
             *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}D_BARGAIN_PURCHASE" minOccurs="0"/>
             *       &lt;/sequence>
             *     &lt;/restriction>
             *   &lt;/complexContent>
             * &lt;/complexType>
             * </pre>
             * 
             * 
             */
            @XmlAccessorType(XmlAccessType.FIELD)
            @XmlType(name = "", propOrder = {
                "dnotendersrequests",
                "dpureresearch",
                "dprotectrights",
                "dartistic",
                "dtechnical",
                "dextremeurgency",
                "dadddeliveriesordered",
                "drepetitionexisting",
                "dcontractawardeddesigncontest",
                "dcommoditymarket",
                "dfromliquidatorcreditor",
                "dfromwindingprovider",
                "dbargainpurchase"
            })
            public static class DACCORDANCEARTICLE
                implements Equals, HashCode, ToString
            {

                @XmlElement(name = "D_NO_TENDERS_REQUESTS")
                protected Empty dnotendersrequests;
                @XmlElement(name = "D_PURE_RESEARCH")
                protected Empty dpureresearch;
                @XmlElement(name = "D_PROTECT_RIGHTS")
                protected Empty dprotectrights;
                @XmlElement(name = "D_ARTISTIC")
                protected Empty dartistic;
                @XmlElement(name = "D_TECHNICAL")
                protected Empty dtechnical;
                @XmlElement(name = "D_EXTREME_URGENCY")
                protected Empty dextremeurgency;
                @XmlElement(name = "D_ADD_DELIVERIES_ORDERED")
                protected Empty dadddeliveriesordered;
                @XmlElement(name = "D_REPETITION_EXISTING")
                protected DREPETITIONEXISTING drepetitionexisting;
                @XmlElement(name = "D_CONTRACT_AWARDED_DESIGN_CONTEST")
                protected Services dcontractawardeddesigncontest;
                @XmlElement(name = "D_COMMODITY_MARKET")
                protected DCOMMODITYMARKET dcommoditymarket;
                @XmlElement(name = "D_FROM_LIQUIDATOR_CREDITOR")
                protected NoWorks dfromliquidatorcreditor;
                @XmlElement(name = "D_FROM_WINDING_PROVIDER")
                protected NoWorks dfromwindingprovider;
                @XmlElement(name = "D_BARGAIN_PURCHASE")
                protected Empty dbargainpurchase;

                /**
                 * Gets the value of the dnotendersrequests property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Empty }
                 *     
                 */
                public Empty getDNOTENDERSREQUESTS() {
                    return dnotendersrequests;
                }

                /**
                 * Sets the value of the dnotendersrequests property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Empty }
                 *     
                 */
                public void setDNOTENDERSREQUESTS(Empty value) {
                    this.dnotendersrequests = value;
                }

                /**
                 * Gets the value of the dpureresearch property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Empty }
                 *     
                 */
                public Empty getDPURERESEARCH() {
                    return dpureresearch;
                }

                /**
                 * Sets the value of the dpureresearch property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Empty }
                 *     
                 */
                public void setDPURERESEARCH(Empty value) {
                    this.dpureresearch = value;
                }

                /**
                 * Gets the value of the dprotectrights property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Empty }
                 *     
                 */
                public Empty getDPROTECTRIGHTS() {
                    return dprotectrights;
                }

                /**
                 * Sets the value of the dprotectrights property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Empty }
                 *     
                 */
                public void setDPROTECTRIGHTS(Empty value) {
                    this.dprotectrights = value;
                }

                /**
                 * Gets the value of the dartistic property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Empty }
                 *     
                 */
                public Empty getDARTISTIC() {
                    return dartistic;
                }

                /**
                 * Sets the value of the dartistic property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Empty }
                 *     
                 */
                public void setDARTISTIC(Empty value) {
                    this.dartistic = value;
                }

                /**
                 * Gets the value of the dtechnical property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Empty }
                 *     
                 */
                public Empty getDTECHNICAL() {
                    return dtechnical;
                }

                /**
                 * Sets the value of the dtechnical property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Empty }
                 *     
                 */
                public void setDTECHNICAL(Empty value) {
                    this.dtechnical = value;
                }

                /**
                 * Gets the value of the dextremeurgency property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Empty }
                 *     
                 */
                public Empty getDEXTREMEURGENCY() {
                    return dextremeurgency;
                }

                /**
                 * Sets the value of the dextremeurgency property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Empty }
                 *     
                 */
                public void setDEXTREMEURGENCY(Empty value) {
                    this.dextremeurgency = value;
                }

                /**
                 * Gets the value of the dadddeliveriesordered property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Empty }
                 *     
                 */
                public Empty getDADDDELIVERIESORDERED() {
                    return dadddeliveriesordered;
                }

                /**
                 * Sets the value of the dadddeliveriesordered property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Empty }
                 *     
                 */
                public void setDADDDELIVERIESORDERED(Empty value) {
                    this.dadddeliveriesordered = value;
                }

                /**
                 * Gets the value of the drepetitionexisting property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link DREPETITIONEXISTING }
                 *     
                 */
                public DREPETITIONEXISTING getDREPETITIONEXISTING() {
                    return drepetitionexisting;
                }

                /**
                 * Sets the value of the drepetitionexisting property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link DREPETITIONEXISTING }
                 *     
                 */
                public void setDREPETITIONEXISTING(DREPETITIONEXISTING value) {
                    this.drepetitionexisting = value;
                }

                /**
                 * Gets the value of the dcontractawardeddesigncontest property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Services }
                 *     
                 */
                public Services getDCONTRACTAWARDEDDESIGNCONTEST() {
                    return dcontractawardeddesigncontest;
                }

                /**
                 * Sets the value of the dcontractawardeddesigncontest property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Services }
                 *     
                 */
                public void setDCONTRACTAWARDEDDESIGNCONTEST(Services value) {
                    this.dcontractawardeddesigncontest = value;
                }

                /**
                 * Gets the value of the dcommoditymarket property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link DCOMMODITYMARKET }
                 *     
                 */
                public DCOMMODITYMARKET getDCOMMODITYMARKET() {
                    return dcommoditymarket;
                }

                /**
                 * Sets the value of the dcommoditymarket property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link DCOMMODITYMARKET }
                 *     
                 */
                public void setDCOMMODITYMARKET(DCOMMODITYMARKET value) {
                    this.dcommoditymarket = value;
                }

                /**
                 * Gets the value of the dfromliquidatorcreditor property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link NoWorks }
                 *     
                 */
                public NoWorks getDFROMLIQUIDATORCREDITOR() {
                    return dfromliquidatorcreditor;
                }

                /**
                 * Sets the value of the dfromliquidatorcreditor property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link NoWorks }
                 *     
                 */
                public void setDFROMLIQUIDATORCREDITOR(NoWorks value) {
                    this.dfromliquidatorcreditor = value;
                }

                /**
                 * Gets the value of the dfromwindingprovider property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link NoWorks }
                 *     
                 */
                public NoWorks getDFROMWINDINGPROVIDER() {
                    return dfromwindingprovider;
                }

                /**
                 * Sets the value of the dfromwindingprovider property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link NoWorks }
                 *     
                 */
                public void setDFROMWINDINGPROVIDER(NoWorks value) {
                    this.dfromwindingprovider = value;
                }

                /**
                 * Gets the value of the dbargainpurchase property.
                 * 
                 * @return
                 *     possible object is
                 *     {@link Empty }
                 *     
                 */
                public Empty getDBARGAINPURCHASE() {
                    return dbargainpurchase;
                }

                /**
                 * Sets the value of the dbargainpurchase property.
                 * 
                 * @param value
                 *     allowed object is
                 *     {@link Empty }
                 *     
                 */
                public void setDBARGAINPURCHASE(Empty value) {
                    this.dbargainpurchase = value;
                }

                public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                    if (!(object instanceof ProcedureF15 .DIRECTIVE201425EU.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE)) {
                        return false;
                    }
                    if (this == object) {
                        return true;
                    }
                    final ProcedureF15 .DIRECTIVE201425EU.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE that = ((ProcedureF15 .DIRECTIVE201425EU.PTNEGOTIATEDWITHOUTPUBLICATION.DACCORDANCEARTICLE) object);
                    {
                        Empty lhsDNOTENDERSREQUESTS;
                        lhsDNOTENDERSREQUESTS = this.getDNOTENDERSREQUESTS();
                        Empty rhsDNOTENDERSREQUESTS;
                        rhsDNOTENDERSREQUESTS = that.getDNOTENDERSREQUESTS();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dnotendersrequests", lhsDNOTENDERSREQUESTS), LocatorUtils.property(thatLocator, "dnotendersrequests", rhsDNOTENDERSREQUESTS), lhsDNOTENDERSREQUESTS, rhsDNOTENDERSREQUESTS)) {
                            return false;
                        }
                    }
                    {
                        Empty lhsDPURERESEARCH;
                        lhsDPURERESEARCH = this.getDPURERESEARCH();
                        Empty rhsDPURERESEARCH;
                        rhsDPURERESEARCH = that.getDPURERESEARCH();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dpureresearch", lhsDPURERESEARCH), LocatorUtils.property(thatLocator, "dpureresearch", rhsDPURERESEARCH), lhsDPURERESEARCH, rhsDPURERESEARCH)) {
                            return false;
                        }
                    }
                    {
                        Empty lhsDPROTECTRIGHTS;
                        lhsDPROTECTRIGHTS = this.getDPROTECTRIGHTS();
                        Empty rhsDPROTECTRIGHTS;
                        rhsDPROTECTRIGHTS = that.getDPROTECTRIGHTS();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dprotectrights", lhsDPROTECTRIGHTS), LocatorUtils.property(thatLocator, "dprotectrights", rhsDPROTECTRIGHTS), lhsDPROTECTRIGHTS, rhsDPROTECTRIGHTS)) {
                            return false;
                        }
                    }
                    {
                        Empty lhsDARTISTIC;
                        lhsDARTISTIC = this.getDARTISTIC();
                        Empty rhsDARTISTIC;
                        rhsDARTISTIC = that.getDARTISTIC();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dartistic", lhsDARTISTIC), LocatorUtils.property(thatLocator, "dartistic", rhsDARTISTIC), lhsDARTISTIC, rhsDARTISTIC)) {
                            return false;
                        }
                    }
                    {
                        Empty lhsDTECHNICAL;
                        lhsDTECHNICAL = this.getDTECHNICAL();
                        Empty rhsDTECHNICAL;
                        rhsDTECHNICAL = that.getDTECHNICAL();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dtechnical", lhsDTECHNICAL), LocatorUtils.property(thatLocator, "dtechnical", rhsDTECHNICAL), lhsDTECHNICAL, rhsDTECHNICAL)) {
                            return false;
                        }
                    }
                    {
                        Empty lhsDEXTREMEURGENCY;
                        lhsDEXTREMEURGENCY = this.getDEXTREMEURGENCY();
                        Empty rhsDEXTREMEURGENCY;
                        rhsDEXTREMEURGENCY = that.getDEXTREMEURGENCY();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dextremeurgency", lhsDEXTREMEURGENCY), LocatorUtils.property(thatLocator, "dextremeurgency", rhsDEXTREMEURGENCY), lhsDEXTREMEURGENCY, rhsDEXTREMEURGENCY)) {
                            return false;
                        }
                    }
                    {
                        Empty lhsDADDDELIVERIESORDERED;
                        lhsDADDDELIVERIESORDERED = this.getDADDDELIVERIESORDERED();
                        Empty rhsDADDDELIVERIESORDERED;
                        rhsDADDDELIVERIESORDERED = that.getDADDDELIVERIESORDERED();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dadddeliveriesordered", lhsDADDDELIVERIESORDERED), LocatorUtils.property(thatLocator, "dadddeliveriesordered", rhsDADDDELIVERIESORDERED), lhsDADDDELIVERIESORDERED, rhsDADDDELIVERIESORDERED)) {
                            return false;
                        }
                    }
                    {
                        DREPETITIONEXISTING lhsDREPETITIONEXISTING;
                        lhsDREPETITIONEXISTING = this.getDREPETITIONEXISTING();
                        DREPETITIONEXISTING rhsDREPETITIONEXISTING;
                        rhsDREPETITIONEXISTING = that.getDREPETITIONEXISTING();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "drepetitionexisting", lhsDREPETITIONEXISTING), LocatorUtils.property(thatLocator, "drepetitionexisting", rhsDREPETITIONEXISTING), lhsDREPETITIONEXISTING, rhsDREPETITIONEXISTING)) {
                            return false;
                        }
                    }
                    {
                        Services lhsDCONTRACTAWARDEDDESIGNCONTEST;
                        lhsDCONTRACTAWARDEDDESIGNCONTEST = this.getDCONTRACTAWARDEDDESIGNCONTEST();
                        Services rhsDCONTRACTAWARDEDDESIGNCONTEST;
                        rhsDCONTRACTAWARDEDDESIGNCONTEST = that.getDCONTRACTAWARDEDDESIGNCONTEST();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dcontractawardeddesigncontest", lhsDCONTRACTAWARDEDDESIGNCONTEST), LocatorUtils.property(thatLocator, "dcontractawardeddesigncontest", rhsDCONTRACTAWARDEDDESIGNCONTEST), lhsDCONTRACTAWARDEDDESIGNCONTEST, rhsDCONTRACTAWARDEDDESIGNCONTEST)) {
                            return false;
                        }
                    }
                    {
                        DCOMMODITYMARKET lhsDCOMMODITYMARKET;
                        lhsDCOMMODITYMARKET = this.getDCOMMODITYMARKET();
                        DCOMMODITYMARKET rhsDCOMMODITYMARKET;
                        rhsDCOMMODITYMARKET = that.getDCOMMODITYMARKET();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dcommoditymarket", lhsDCOMMODITYMARKET), LocatorUtils.property(thatLocator, "dcommoditymarket", rhsDCOMMODITYMARKET), lhsDCOMMODITYMARKET, rhsDCOMMODITYMARKET)) {
                            return false;
                        }
                    }
                    {
                        NoWorks lhsDFROMLIQUIDATORCREDITOR;
                        lhsDFROMLIQUIDATORCREDITOR = this.getDFROMLIQUIDATORCREDITOR();
                        NoWorks rhsDFROMLIQUIDATORCREDITOR;
                        rhsDFROMLIQUIDATORCREDITOR = that.getDFROMLIQUIDATORCREDITOR();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dfromliquidatorcreditor", lhsDFROMLIQUIDATORCREDITOR), LocatorUtils.property(thatLocator, "dfromliquidatorcreditor", rhsDFROMLIQUIDATORCREDITOR), lhsDFROMLIQUIDATORCREDITOR, rhsDFROMLIQUIDATORCREDITOR)) {
                            return false;
                        }
                    }
                    {
                        NoWorks lhsDFROMWINDINGPROVIDER;
                        lhsDFROMWINDINGPROVIDER = this.getDFROMWINDINGPROVIDER();
                        NoWorks rhsDFROMWINDINGPROVIDER;
                        rhsDFROMWINDINGPROVIDER = that.getDFROMWINDINGPROVIDER();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dfromwindingprovider", lhsDFROMWINDINGPROVIDER), LocatorUtils.property(thatLocator, "dfromwindingprovider", rhsDFROMWINDINGPROVIDER), lhsDFROMWINDINGPROVIDER, rhsDFROMWINDINGPROVIDER)) {
                            return false;
                        }
                    }
                    {
                        Empty lhsDBARGAINPURCHASE;
                        lhsDBARGAINPURCHASE = this.getDBARGAINPURCHASE();
                        Empty rhsDBARGAINPURCHASE;
                        rhsDBARGAINPURCHASE = that.getDBARGAINPURCHASE();
                        if (!strategy.equals(LocatorUtils.property(thisLocator, "dbargainpurchase", lhsDBARGAINPURCHASE), LocatorUtils.property(thatLocator, "dbargainpurchase", rhsDBARGAINPURCHASE), lhsDBARGAINPURCHASE, rhsDBARGAINPURCHASE)) {
                            return false;
                        }
                    }
                    return true;
                }

                public boolean equals(Object object) {
                    final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                    return equals(null, null, object, strategy);
                }

                public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                    int currentHashCode = 1;
                    {
                        Empty theDNOTENDERSREQUESTS;
                        theDNOTENDERSREQUESTS = this.getDNOTENDERSREQUESTS();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dnotendersrequests", theDNOTENDERSREQUESTS), currentHashCode, theDNOTENDERSREQUESTS);
                    }
                    {
                        Empty theDPURERESEARCH;
                        theDPURERESEARCH = this.getDPURERESEARCH();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dpureresearch", theDPURERESEARCH), currentHashCode, theDPURERESEARCH);
                    }
                    {
                        Empty theDPROTECTRIGHTS;
                        theDPROTECTRIGHTS = this.getDPROTECTRIGHTS();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dprotectrights", theDPROTECTRIGHTS), currentHashCode, theDPROTECTRIGHTS);
                    }
                    {
                        Empty theDARTISTIC;
                        theDARTISTIC = this.getDARTISTIC();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dartistic", theDARTISTIC), currentHashCode, theDARTISTIC);
                    }
                    {
                        Empty theDTECHNICAL;
                        theDTECHNICAL = this.getDTECHNICAL();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dtechnical", theDTECHNICAL), currentHashCode, theDTECHNICAL);
                    }
                    {
                        Empty theDEXTREMEURGENCY;
                        theDEXTREMEURGENCY = this.getDEXTREMEURGENCY();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dextremeurgency", theDEXTREMEURGENCY), currentHashCode, theDEXTREMEURGENCY);
                    }
                    {
                        Empty theDADDDELIVERIESORDERED;
                        theDADDDELIVERIESORDERED = this.getDADDDELIVERIESORDERED();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dadddeliveriesordered", theDADDDELIVERIESORDERED), currentHashCode, theDADDDELIVERIESORDERED);
                    }
                    {
                        DREPETITIONEXISTING theDREPETITIONEXISTING;
                        theDREPETITIONEXISTING = this.getDREPETITIONEXISTING();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "drepetitionexisting", theDREPETITIONEXISTING), currentHashCode, theDREPETITIONEXISTING);
                    }
                    {
                        Services theDCONTRACTAWARDEDDESIGNCONTEST;
                        theDCONTRACTAWARDEDDESIGNCONTEST = this.getDCONTRACTAWARDEDDESIGNCONTEST();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dcontractawardeddesigncontest", theDCONTRACTAWARDEDDESIGNCONTEST), currentHashCode, theDCONTRACTAWARDEDDESIGNCONTEST);
                    }
                    {
                        DCOMMODITYMARKET theDCOMMODITYMARKET;
                        theDCOMMODITYMARKET = this.getDCOMMODITYMARKET();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dcommoditymarket", theDCOMMODITYMARKET), currentHashCode, theDCOMMODITYMARKET);
                    }
                    {
                        NoWorks theDFROMLIQUIDATORCREDITOR;
                        theDFROMLIQUIDATORCREDITOR = this.getDFROMLIQUIDATORCREDITOR();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dfromliquidatorcreditor", theDFROMLIQUIDATORCREDITOR), currentHashCode, theDFROMLIQUIDATORCREDITOR);
                    }
                    {
                        NoWorks theDFROMWINDINGPROVIDER;
                        theDFROMWINDINGPROVIDER = this.getDFROMWINDINGPROVIDER();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dfromwindingprovider", theDFROMWINDINGPROVIDER), currentHashCode, theDFROMWINDINGPROVIDER);
                    }
                    {
                        Empty theDBARGAINPURCHASE;
                        theDBARGAINPURCHASE = this.getDBARGAINPURCHASE();
                        currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dbargainpurchase", theDBARGAINPURCHASE), currentHashCode, theDBARGAINPURCHASE);
                    }
                    return currentHashCode;
                }

                public int hashCode() {
                    final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                    return this.hashCode(null, strategy);
                }

                public String toString() {
                    final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                    final StringBuilder buffer = new StringBuilder();
                    append(null, buffer, strategy);
                    return buffer.toString();
                }

                public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                    strategy.appendStart(locator, this, buffer);
                    appendFields(locator, buffer, strategy);
                    strategy.appendEnd(locator, this, buffer);
                    return buffer;
                }

                public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                    {
                        Empty theDNOTENDERSREQUESTS;
                        theDNOTENDERSREQUESTS = this.getDNOTENDERSREQUESTS();
                        strategy.appendField(locator, this, "dnotendersrequests", buffer, theDNOTENDERSREQUESTS);
                    }
                    {
                        Empty theDPURERESEARCH;
                        theDPURERESEARCH = this.getDPURERESEARCH();
                        strategy.appendField(locator, this, "dpureresearch", buffer, theDPURERESEARCH);
                    }
                    {
                        Empty theDPROTECTRIGHTS;
                        theDPROTECTRIGHTS = this.getDPROTECTRIGHTS();
                        strategy.appendField(locator, this, "dprotectrights", buffer, theDPROTECTRIGHTS);
                    }
                    {
                        Empty theDARTISTIC;
                        theDARTISTIC = this.getDARTISTIC();
                        strategy.appendField(locator, this, "dartistic", buffer, theDARTISTIC);
                    }
                    {
                        Empty theDTECHNICAL;
                        theDTECHNICAL = this.getDTECHNICAL();
                        strategy.appendField(locator, this, "dtechnical", buffer, theDTECHNICAL);
                    }
                    {
                        Empty theDEXTREMEURGENCY;
                        theDEXTREMEURGENCY = this.getDEXTREMEURGENCY();
                        strategy.appendField(locator, this, "dextremeurgency", buffer, theDEXTREMEURGENCY);
                    }
                    {
                        Empty theDADDDELIVERIESORDERED;
                        theDADDDELIVERIESORDERED = this.getDADDDELIVERIESORDERED();
                        strategy.appendField(locator, this, "dadddeliveriesordered", buffer, theDADDDELIVERIESORDERED);
                    }
                    {
                        DREPETITIONEXISTING theDREPETITIONEXISTING;
                        theDREPETITIONEXISTING = this.getDREPETITIONEXISTING();
                        strategy.appendField(locator, this, "drepetitionexisting", buffer, theDREPETITIONEXISTING);
                    }
                    {
                        Services theDCONTRACTAWARDEDDESIGNCONTEST;
                        theDCONTRACTAWARDEDDESIGNCONTEST = this.getDCONTRACTAWARDEDDESIGNCONTEST();
                        strategy.appendField(locator, this, "dcontractawardeddesigncontest", buffer, theDCONTRACTAWARDEDDESIGNCONTEST);
                    }
                    {
                        DCOMMODITYMARKET theDCOMMODITYMARKET;
                        theDCOMMODITYMARKET = this.getDCOMMODITYMARKET();
                        strategy.appendField(locator, this, "dcommoditymarket", buffer, theDCOMMODITYMARKET);
                    }
                    {
                        NoWorks theDFROMLIQUIDATORCREDITOR;
                        theDFROMLIQUIDATORCREDITOR = this.getDFROMLIQUIDATORCREDITOR();
                        strategy.appendField(locator, this, "dfromliquidatorcreditor", buffer, theDFROMLIQUIDATORCREDITOR);
                    }
                    {
                        NoWorks theDFROMWINDINGPROVIDER;
                        theDFROMWINDINGPROVIDER = this.getDFROMWINDINGPROVIDER();
                        strategy.appendField(locator, this, "dfromwindingprovider", buffer, theDFROMWINDINGPROVIDER);
                    }
                    {
                        Empty theDBARGAINPURCHASE;
                        theDBARGAINPURCHASE = this.getDBARGAINPURCHASE();
                        strategy.appendField(locator, this, "dbargainpurchase", buffer, theDBARGAINPURCHASE);
                    }
                    return buffer;
                }

            }

        }

    }

}
