//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.12.04 at 01:40:50 PM MEZ 
//


package eu.europa.publications.formex.ted.schema;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for lot_numbers complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="lot_numbers">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;choice minOccurs="0">
 *           &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}LOT_ALL"/>
 *           &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}LOT_MAX_NUMBER"/>
 *           &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}LOT_ONE_ONLY"/>
 *         &lt;/choice>
 *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}LOT_MAX_ONE_TENDERER" minOccurs="0"/>
 *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}LOT_COMBINING_CONTRACT_RIGHT" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "lot_numbers", propOrder = {
    "lotoneonly",
    "lotmaxnumber",
    "lotall",
    "lotmaxonetenderer",
    "lotcombiningcontractright"
})
@XmlSeeAlso({
    LotDivisionF21 .class,
    LotDivisionF22 .class,
    LotDivisionF23 .class,
    LotDivisionF24 .class,
    LotDivisionF02 .class,
    LotDivisionF04 .class,
    LotDivisionF05 .class,
    LotDivisionF01 .class
})
public class LotNumbers
    implements Equals, HashCode, ToString
{

    @XmlElement(name = "LOT_ONE_ONLY")
    protected Empty lotoneonly;
    @XmlElement(name = "LOT_MAX_NUMBER")
    protected Integer lotmaxnumber;
    @XmlElement(name = "LOT_ALL")
    protected Empty lotall;
    @XmlElement(name = "LOT_MAX_ONE_TENDERER")
    protected Integer lotmaxonetenderer;
    @XmlElement(name = "LOT_COMBINING_CONTRACT_RIGHT")
    protected TextFtMultiLines lotcombiningcontractright;

    /**
     * Gets the value of the lotoneonly property.
     * 
     * @return
     *     possible object is
     *     {@link Empty }
     *     
     */
    public Empty getLOTONEONLY() {
        return lotoneonly;
    }

    /**
     * Sets the value of the lotoneonly property.
     * 
     * @param value
     *     allowed object is
     *     {@link Empty }
     *     
     */
    public void setLOTONEONLY(Empty value) {
        this.lotoneonly = value;
    }

    /**
     * Gets the value of the lotmaxnumber property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getLOTMAXNUMBER() {
        return lotmaxnumber;
    }

    /**
     * Sets the value of the lotmaxnumber property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setLOTMAXNUMBER(Integer value) {
        this.lotmaxnumber = value;
    }

    /**
     * Gets the value of the lotall property.
     * 
     * @return
     *     possible object is
     *     {@link Empty }
     *     
     */
    public Empty getLOTALL() {
        return lotall;
    }

    /**
     * Sets the value of the lotall property.
     * 
     * @param value
     *     allowed object is
     *     {@link Empty }
     *     
     */
    public void setLOTALL(Empty value) {
        this.lotall = value;
    }

    /**
     * Gets the value of the lotmaxonetenderer property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getLOTMAXONETENDERER() {
        return lotmaxonetenderer;
    }

    /**
     * Sets the value of the lotmaxonetenderer property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setLOTMAXONETENDERER(Integer value) {
        this.lotmaxonetenderer = value;
    }

    /**
     * Gets the value of the lotcombiningcontractright property.
     * 
     * @return
     *     possible object is
     *     {@link TextFtMultiLines }
     *     
     */
    public TextFtMultiLines getLOTCOMBININGCONTRACTRIGHT() {
        return lotcombiningcontractright;
    }

    /**
     * Sets the value of the lotcombiningcontractright property.
     * 
     * @param value
     *     allowed object is
     *     {@link TextFtMultiLines }
     *     
     */
    public void setLOTCOMBININGCONTRACTRIGHT(TextFtMultiLines value) {
        this.lotcombiningcontractright = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof LotNumbers)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final LotNumbers that = ((LotNumbers) object);
        {
            Empty lhsLOTONEONLY;
            lhsLOTONEONLY = this.getLOTONEONLY();
            Empty rhsLOTONEONLY;
            rhsLOTONEONLY = that.getLOTONEONLY();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lotoneonly", lhsLOTONEONLY), LocatorUtils.property(thatLocator, "lotoneonly", rhsLOTONEONLY), lhsLOTONEONLY, rhsLOTONEONLY)) {
                return false;
            }
        }
        {
            Integer lhsLOTMAXNUMBER;
            lhsLOTMAXNUMBER = this.getLOTMAXNUMBER();
            Integer rhsLOTMAXNUMBER;
            rhsLOTMAXNUMBER = that.getLOTMAXNUMBER();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lotmaxnumber", lhsLOTMAXNUMBER), LocatorUtils.property(thatLocator, "lotmaxnumber", rhsLOTMAXNUMBER), lhsLOTMAXNUMBER, rhsLOTMAXNUMBER)) {
                return false;
            }
        }
        {
            Empty lhsLOTALL;
            lhsLOTALL = this.getLOTALL();
            Empty rhsLOTALL;
            rhsLOTALL = that.getLOTALL();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lotall", lhsLOTALL), LocatorUtils.property(thatLocator, "lotall", rhsLOTALL), lhsLOTALL, rhsLOTALL)) {
                return false;
            }
        }
        {
            Integer lhsLOTMAXONETENDERER;
            lhsLOTMAXONETENDERER = this.getLOTMAXONETENDERER();
            Integer rhsLOTMAXONETENDERER;
            rhsLOTMAXONETENDERER = that.getLOTMAXONETENDERER();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lotmaxonetenderer", lhsLOTMAXONETENDERER), LocatorUtils.property(thatLocator, "lotmaxonetenderer", rhsLOTMAXONETENDERER), lhsLOTMAXONETENDERER, rhsLOTMAXONETENDERER)) {
                return false;
            }
        }
        {
            TextFtMultiLines lhsLOTCOMBININGCONTRACTRIGHT;
            lhsLOTCOMBININGCONTRACTRIGHT = this.getLOTCOMBININGCONTRACTRIGHT();
            TextFtMultiLines rhsLOTCOMBININGCONTRACTRIGHT;
            rhsLOTCOMBININGCONTRACTRIGHT = that.getLOTCOMBININGCONTRACTRIGHT();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lotcombiningcontractright", lhsLOTCOMBININGCONTRACTRIGHT), LocatorUtils.property(thatLocator, "lotcombiningcontractright", rhsLOTCOMBININGCONTRACTRIGHT), lhsLOTCOMBININGCONTRACTRIGHT, rhsLOTCOMBININGCONTRACTRIGHT)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            Empty theLOTONEONLY;
            theLOTONEONLY = this.getLOTONEONLY();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lotoneonly", theLOTONEONLY), currentHashCode, theLOTONEONLY);
        }
        {
            Integer theLOTMAXNUMBER;
            theLOTMAXNUMBER = this.getLOTMAXNUMBER();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lotmaxnumber", theLOTMAXNUMBER), currentHashCode, theLOTMAXNUMBER);
        }
        {
            Empty theLOTALL;
            theLOTALL = this.getLOTALL();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lotall", theLOTALL), currentHashCode, theLOTALL);
        }
        {
            Integer theLOTMAXONETENDERER;
            theLOTMAXONETENDERER = this.getLOTMAXONETENDERER();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lotmaxonetenderer", theLOTMAXONETENDERER), currentHashCode, theLOTMAXONETENDERER);
        }
        {
            TextFtMultiLines theLOTCOMBININGCONTRACTRIGHT;
            theLOTCOMBININGCONTRACTRIGHT = this.getLOTCOMBININGCONTRACTRIGHT();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lotcombiningcontractright", theLOTCOMBININGCONTRACTRIGHT), currentHashCode, theLOTCOMBININGCONTRACTRIGHT);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            Empty theLOTONEONLY;
            theLOTONEONLY = this.getLOTONEONLY();
            strategy.appendField(locator, this, "lotoneonly", buffer, theLOTONEONLY);
        }
        {
            Integer theLOTMAXNUMBER;
            theLOTMAXNUMBER = this.getLOTMAXNUMBER();
            strategy.appendField(locator, this, "lotmaxnumber", buffer, theLOTMAXNUMBER);
        }
        {
            Empty theLOTALL;
            theLOTALL = this.getLOTALL();
            strategy.appendField(locator, this, "lotall", buffer, theLOTALL);
        }
        {
            Integer theLOTMAXONETENDERER;
            theLOTMAXONETENDERER = this.getLOTMAXONETENDERER();
            strategy.appendField(locator, this, "lotmaxonetenderer", buffer, theLOTMAXONETENDERER);
        }
        {
            TextFtMultiLines theLOTCOMBININGCONTRACTRIGHT;
            theLOTCOMBININGCONTRACTRIGHT = this.getLOTCOMBININGCONTRACTRIGHT();
            strategy.appendField(locator, this, "lotcombiningcontractright", buffer, theLOTCOMBININGCONTRACTRIGHT);
        }
        return buffer;
    }

}
