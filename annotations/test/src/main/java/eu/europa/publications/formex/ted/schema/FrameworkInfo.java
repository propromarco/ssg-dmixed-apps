//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.12.04 at 01:40:50 PM MEZ 
//


package eu.europa.publications.formex.ted.schema;

import java.math.BigInteger;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for framework_info complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="framework_info">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;choice>
 *           &lt;sequence>
 *             &lt;element name="SEVERAL_OPERATORS" type="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}empty"/>
 *             &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}NB_PARTICIPANTS" minOccurs="0"/>
 *           &lt;/sequence>
 *           &lt;element name="SINGLE_OPERATOR" type="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}empty"/>
 *         &lt;/choice>
 *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}JUSTIFICATION" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "framework_info", propOrder = {
    "singleoperator",
    "severaloperators",
    "nbparticipants",
    "justification"
})
public class FrameworkInfo
    implements Equals, HashCode, ToString
{

    @XmlElement(name = "SINGLE_OPERATOR")
    protected Empty singleoperator;
    @XmlElement(name = "SEVERAL_OPERATORS")
    protected Empty severaloperators;
    @XmlElement(name = "NB_PARTICIPANTS")
    protected BigInteger nbparticipants;
    @XmlElement(name = "JUSTIFICATION")
    protected String justification;

    /**
     * Gets the value of the singleoperator property.
     * 
     * @return
     *     possible object is
     *     {@link Empty }
     *     
     */
    public Empty getSINGLEOPERATOR() {
        return singleoperator;
    }

    /**
     * Sets the value of the singleoperator property.
     * 
     * @param value
     *     allowed object is
     *     {@link Empty }
     *     
     */
    public void setSINGLEOPERATOR(Empty value) {
        this.singleoperator = value;
    }

    /**
     * Gets the value of the severaloperators property.
     * 
     * @return
     *     possible object is
     *     {@link Empty }
     *     
     */
    public Empty getSEVERALOPERATORS() {
        return severaloperators;
    }

    /**
     * Sets the value of the severaloperators property.
     * 
     * @param value
     *     allowed object is
     *     {@link Empty }
     *     
     */
    public void setSEVERALOPERATORS(Empty value) {
        this.severaloperators = value;
    }

    /**
     * Gets the value of the nbparticipants property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getNBPARTICIPANTS() {
        return nbparticipants;
    }

    /**
     * Sets the value of the nbparticipants property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setNBPARTICIPANTS(BigInteger value) {
        this.nbparticipants = value;
    }

    /**
     * for any duration exceeding a certain number of years
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getJUSTIFICATION() {
        return justification;
    }

    /**
     * Sets the value of the justification property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setJUSTIFICATION(String value) {
        this.justification = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof FrameworkInfo)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final FrameworkInfo that = ((FrameworkInfo) object);
        {
            Empty lhsSINGLEOPERATOR;
            lhsSINGLEOPERATOR = this.getSINGLEOPERATOR();
            Empty rhsSINGLEOPERATOR;
            rhsSINGLEOPERATOR = that.getSINGLEOPERATOR();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "singleoperator", lhsSINGLEOPERATOR), LocatorUtils.property(thatLocator, "singleoperator", rhsSINGLEOPERATOR), lhsSINGLEOPERATOR, rhsSINGLEOPERATOR)) {
                return false;
            }
        }
        {
            Empty lhsSEVERALOPERATORS;
            lhsSEVERALOPERATORS = this.getSEVERALOPERATORS();
            Empty rhsSEVERALOPERATORS;
            rhsSEVERALOPERATORS = that.getSEVERALOPERATORS();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "severaloperators", lhsSEVERALOPERATORS), LocatorUtils.property(thatLocator, "severaloperators", rhsSEVERALOPERATORS), lhsSEVERALOPERATORS, rhsSEVERALOPERATORS)) {
                return false;
            }
        }
        {
            BigInteger lhsNBPARTICIPANTS;
            lhsNBPARTICIPANTS = this.getNBPARTICIPANTS();
            BigInteger rhsNBPARTICIPANTS;
            rhsNBPARTICIPANTS = that.getNBPARTICIPANTS();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "nbparticipants", lhsNBPARTICIPANTS), LocatorUtils.property(thatLocator, "nbparticipants", rhsNBPARTICIPANTS), lhsNBPARTICIPANTS, rhsNBPARTICIPANTS)) {
                return false;
            }
        }
        {
            String lhsJUSTIFICATION;
            lhsJUSTIFICATION = this.getJUSTIFICATION();
            String rhsJUSTIFICATION;
            rhsJUSTIFICATION = that.getJUSTIFICATION();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "justification", lhsJUSTIFICATION), LocatorUtils.property(thatLocator, "justification", rhsJUSTIFICATION), lhsJUSTIFICATION, rhsJUSTIFICATION)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            Empty theSINGLEOPERATOR;
            theSINGLEOPERATOR = this.getSINGLEOPERATOR();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "singleoperator", theSINGLEOPERATOR), currentHashCode, theSINGLEOPERATOR);
        }
        {
            Empty theSEVERALOPERATORS;
            theSEVERALOPERATORS = this.getSEVERALOPERATORS();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "severaloperators", theSEVERALOPERATORS), currentHashCode, theSEVERALOPERATORS);
        }
        {
            BigInteger theNBPARTICIPANTS;
            theNBPARTICIPANTS = this.getNBPARTICIPANTS();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "nbparticipants", theNBPARTICIPANTS), currentHashCode, theNBPARTICIPANTS);
        }
        {
            String theJUSTIFICATION;
            theJUSTIFICATION = this.getJUSTIFICATION();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "justification", theJUSTIFICATION), currentHashCode, theJUSTIFICATION);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            Empty theSINGLEOPERATOR;
            theSINGLEOPERATOR = this.getSINGLEOPERATOR();
            strategy.appendField(locator, this, "singleoperator", buffer, theSINGLEOPERATOR);
        }
        {
            Empty theSEVERALOPERATORS;
            theSEVERALOPERATORS = this.getSEVERALOPERATORS();
            strategy.appendField(locator, this, "severaloperators", buffer, theSEVERALOPERATORS);
        }
        {
            BigInteger theNBPARTICIPANTS;
            theNBPARTICIPANTS = this.getNBPARTICIPANTS();
            strategy.appendField(locator, this, "nbparticipants", buffer, theNBPARTICIPANTS);
        }
        {
            String theJUSTIFICATION;
            theJUSTIFICATION = this.getJUSTIFICATION();
            strategy.appendField(locator, this, "justification", buffer, theJUSTIFICATION);
        }
        return buffer;
    }

}
