//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.12.04 at 01:40:50 PM MEZ 
//


package eu.europa.publications.formex.ted.schema;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="CONDITIONS" type="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}text_ft_multi_lines"/>
 *         &lt;element name="METHODS" type="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}text_ft_multi_lines" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "conditions",
    "methods"
})
@XmlRootElement(name = "QUALIFICATION")
public class QUALIFICATION
    implements Equals, HashCode, ToString
{

    @XmlElement(name = "CONDITIONS", required = true)
    protected TextFtMultiLines conditions;
    @XmlElement(name = "METHODS")
    protected TextFtMultiLines methods;

    /**
     * Gets the value of the conditions property.
     * 
     * @return
     *     possible object is
     *     {@link TextFtMultiLines }
     *     
     */
    public TextFtMultiLines getCONDITIONS() {
        return conditions;
    }

    /**
     * Sets the value of the conditions property.
     * 
     * @param value
     *     allowed object is
     *     {@link TextFtMultiLines }
     *     
     */
    public void setCONDITIONS(TextFtMultiLines value) {
        this.conditions = value;
    }

    /**
     * Gets the value of the methods property.
     * 
     * @return
     *     possible object is
     *     {@link TextFtMultiLines }
     *     
     */
    public TextFtMultiLines getMETHODS() {
        return methods;
    }

    /**
     * Sets the value of the methods property.
     * 
     * @param value
     *     allowed object is
     *     {@link TextFtMultiLines }
     *     
     */
    public void setMETHODS(TextFtMultiLines value) {
        this.methods = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof QUALIFICATION)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final QUALIFICATION that = ((QUALIFICATION) object);
        {
            TextFtMultiLines lhsCONDITIONS;
            lhsCONDITIONS = this.getCONDITIONS();
            TextFtMultiLines rhsCONDITIONS;
            rhsCONDITIONS = that.getCONDITIONS();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "conditions", lhsCONDITIONS), LocatorUtils.property(thatLocator, "conditions", rhsCONDITIONS), lhsCONDITIONS, rhsCONDITIONS)) {
                return false;
            }
        }
        {
            TextFtMultiLines lhsMETHODS;
            lhsMETHODS = this.getMETHODS();
            TextFtMultiLines rhsMETHODS;
            rhsMETHODS = that.getMETHODS();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "methods", lhsMETHODS), LocatorUtils.property(thatLocator, "methods", rhsMETHODS), lhsMETHODS, rhsMETHODS)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            TextFtMultiLines theCONDITIONS;
            theCONDITIONS = this.getCONDITIONS();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "conditions", theCONDITIONS), currentHashCode, theCONDITIONS);
        }
        {
            TextFtMultiLines theMETHODS;
            theMETHODS = this.getMETHODS();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "methods", theMETHODS), currentHashCode, theMETHODS);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            TextFtMultiLines theCONDITIONS;
            theCONDITIONS = this.getCONDITIONS();
            strategy.appendField(locator, this, "conditions", buffer, theCONDITIONS);
        }
        {
            TextFtMultiLines theMETHODS;
            theMETHODS = this.getMETHODS();
            strategy.appendField(locator, this, "methods", buffer, theMETHODS);
        }
        return buffer;
    }

}
