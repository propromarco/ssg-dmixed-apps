//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.12.04 at 01:40:50 PM MEZ 
//


package eu.europa.publications.formex.ted.schema;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for object_f15 complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="object_f15">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}TITLE" minOccurs="0"/>
 *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}LOT_NO" minOccurs="0"/>
 *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}CPV_ADDITIONAL" maxOccurs="100" minOccurs="0"/>
 *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}NUTS" maxOccurs="20"/>
 *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}MAIN_SITE" minOccurs="0"/>
 *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}SHORT_DESCR"/>
 *         &lt;choice minOccurs="0">
 *           &lt;element name="DIRECTIVE_2014_23_EU">
 *             &lt;complexType>
 *               &lt;complexContent>
 *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                   &lt;sequence>
 *                     &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}AC_CRITERION" maxOccurs="20"/>
 *                   &lt;/sequence>
 *                 &lt;/restriction>
 *               &lt;/complexContent>
 *             &lt;/complexType>
 *           &lt;/element>
 *           &lt;element name="DIRECTIVE_2014_24_EU">
 *             &lt;complexType>
 *               &lt;complexContent>
 *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                   &lt;sequence>
 *                     &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}award_criteria"/>
 *                   &lt;/sequence>
 *                 &lt;/restriction>
 *               &lt;/complexContent>
 *             &lt;/complexType>
 *           &lt;/element>
 *           &lt;element name="DIRECTIVE_2014_25_EU">
 *             &lt;complexType>
 *               &lt;complexContent>
 *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                   &lt;sequence>
 *                     &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}award_criteria"/>
 *                   &lt;/sequence>
 *                 &lt;/restriction>
 *               &lt;/complexContent>
 *             &lt;/complexType>
 *           &lt;/element>
 *           &lt;element name="DIRECTIVE_2009_81_EC">
 *             &lt;complexType>
 *               &lt;complexContent>
 *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                   &lt;choice>
 *                     &lt;element name="AC_PRICE" type="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}empty"/>
 *                     &lt;element name="AC_CRITERIA" type="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}ac_definition" maxOccurs="20"/>
 *                   &lt;/choice>
 *                 &lt;/restriction>
 *               &lt;/complexContent>
 *             &lt;/complexType>
 *           &lt;/element>
 *         &lt;/choice>
 *         &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}options"/>
 *         &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}eu_union_funds"/>
 *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}INFO_ADD" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="ITEM" use="required" type="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}nb_lot" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "object_f15", propOrder = {
    "title",
    "lotno",
    "cpvadditionals",
    "nuts",
    "mainsite",
    "shortdescr",
    "directive200981EC",
    "directive201425EU",
    "directive201424EU",
    "directive201423EU",
    "nooptions",
    "options",
    "optionsdescr",
    "noeuprogrrelated",
    "euprogrrelated",
    "infoadd"
})
public class ObjectF15
    implements Equals, HashCode, ToString
{

    @XmlElement(name = "TITLE")
    protected TITLE title;
    @XmlElement(name = "LOT_NO")
    protected String lotno;
    @XmlElement(name = "CPV_ADDITIONAL")
    protected List<CpvSet> cpvadditionals;
    @XmlElement(name = "NUTS", required = true)
    protected List<NUTS> nuts;
    @XmlElement(name = "MAIN_SITE")
    protected TextFtMultiLines mainsite;
    @XmlElement(name = "SHORT_DESCR", required = true)
    protected TextFtMultiLines shortdescr;
    @XmlElement(name = "DIRECTIVE_2009_81_EC")
    protected ObjectF15 .DIRECTIVE200981EC directive200981EC;
    @XmlElement(name = "DIRECTIVE_2014_25_EU")
    protected ObjectF15 .DIRECTIVE201425EU directive201425EU;
    @XmlElement(name = "DIRECTIVE_2014_24_EU")
    protected ObjectF15 .DIRECTIVE201424EU directive201424EU;
    @XmlElement(name = "DIRECTIVE_2014_23_EU")
    protected ObjectF15 .DIRECTIVE201423EU directive201423EU;
    @XmlElement(name = "NO_OPTIONS")
    protected Empty nooptions;
    @XmlElement(name = "OPTIONS")
    protected Empty options;
    @XmlElement(name = "OPTIONS_DESCR")
    protected TextFtMultiLines optionsdescr;
    @XmlElement(name = "NO_EU_PROGR_RELATED")
    protected Empty noeuprogrrelated;
    @XmlElement(name = "EU_PROGR_RELATED")
    protected String euprogrrelated;
    @XmlElement(name = "INFO_ADD")
    protected TextFtMultiLines infoadd;
    @XmlAttribute(name = "ITEM", required = true)
    protected int item;

    /**
     * Gets the value of the title property.
     * 
     * @return
     *     possible object is
     *     {@link TITLE }
     *     
     */
    public TITLE getTITLE() {
        return title;
    }

    /**
     * Sets the value of the title property.
     * 
     * @param value
     *     allowed object is
     *     {@link TITLE }
     *     
     */
    public void setTITLE(TITLE value) {
        this.title = value;
    }

    /**
     * Gets the value of the lotno property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLOTNO() {
        return lotno;
    }

    /**
     * Sets the value of the lotno property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLOTNO(String value) {
        this.lotno = value;
    }

    /**
     * Gets the value of the cpvadditionals property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the cpvadditionals property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCPVADDITIONALS().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CpvSet }
     * 
     * 
     */
    public List<CpvSet> getCPVADDITIONALS() {
        if (cpvadditionals == null) {
            cpvadditionals = new ArrayList<CpvSet>();
        }
        return this.cpvadditionals;
    }

    /**
     * Gets the value of the nuts property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the nuts property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getNUTS().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link NUTS }
     * 
     * 
     */
    public List<NUTS> getNUTS() {
        if (nuts == null) {
            nuts = new ArrayList<NUTS>();
        }
        return this.nuts;
    }

    /**
     * Gets the value of the mainsite property.
     * 
     * @return
     *     possible object is
     *     {@link TextFtMultiLines }
     *     
     */
    public TextFtMultiLines getMAINSITE() {
        return mainsite;
    }

    /**
     * Sets the value of the mainsite property.
     * 
     * @param value
     *     allowed object is
     *     {@link TextFtMultiLines }
     *     
     */
    public void setMAINSITE(TextFtMultiLines value) {
        this.mainsite = value;
    }

    /**
     * Gets the value of the shortdescr property.
     * 
     * @return
     *     possible object is
     *     {@link TextFtMultiLines }
     *     
     */
    public TextFtMultiLines getSHORTDESCR() {
        return shortdescr;
    }

    /**
     * Sets the value of the shortdescr property.
     * 
     * @param value
     *     allowed object is
     *     {@link TextFtMultiLines }
     *     
     */
    public void setSHORTDESCR(TextFtMultiLines value) {
        this.shortdescr = value;
    }

    /**
     * Gets the value of the directive200981EC property.
     * 
     * @return
     *     possible object is
     *     {@link ObjectF15 .DIRECTIVE200981EC }
     *     
     */
    public ObjectF15 .DIRECTIVE200981EC getDIRECTIVE200981EC() {
        return directive200981EC;
    }

    /**
     * Sets the value of the directive200981EC property.
     * 
     * @param value
     *     allowed object is
     *     {@link ObjectF15 .DIRECTIVE200981EC }
     *     
     */
    public void setDIRECTIVE200981EC(ObjectF15 .DIRECTIVE200981EC value) {
        this.directive200981EC = value;
    }

    /**
     * Gets the value of the directive201425EU property.
     * 
     * @return
     *     possible object is
     *     {@link ObjectF15 .DIRECTIVE201425EU }
     *     
     */
    public ObjectF15 .DIRECTIVE201425EU getDIRECTIVE201425EU() {
        return directive201425EU;
    }

    /**
     * Sets the value of the directive201425EU property.
     * 
     * @param value
     *     allowed object is
     *     {@link ObjectF15 .DIRECTIVE201425EU }
     *     
     */
    public void setDIRECTIVE201425EU(ObjectF15 .DIRECTIVE201425EU value) {
        this.directive201425EU = value;
    }

    /**
     * Gets the value of the directive201424EU property.
     * 
     * @return
     *     possible object is
     *     {@link ObjectF15 .DIRECTIVE201424EU }
     *     
     */
    public ObjectF15 .DIRECTIVE201424EU getDIRECTIVE201424EU() {
        return directive201424EU;
    }

    /**
     * Sets the value of the directive201424EU property.
     * 
     * @param value
     *     allowed object is
     *     {@link ObjectF15 .DIRECTIVE201424EU }
     *     
     */
    public void setDIRECTIVE201424EU(ObjectF15 .DIRECTIVE201424EU value) {
        this.directive201424EU = value;
    }

    /**
     * Gets the value of the directive201423EU property.
     * 
     * @return
     *     possible object is
     *     {@link ObjectF15 .DIRECTIVE201423EU }
     *     
     */
    public ObjectF15 .DIRECTIVE201423EU getDIRECTIVE201423EU() {
        return directive201423EU;
    }

    /**
     * Sets the value of the directive201423EU property.
     * 
     * @param value
     *     allowed object is
     *     {@link ObjectF15 .DIRECTIVE201423EU }
     *     
     */
    public void setDIRECTIVE201423EU(ObjectF15 .DIRECTIVE201423EU value) {
        this.directive201423EU = value;
    }

    /**
     * Gets the value of the nooptions property.
     * 
     * @return
     *     possible object is
     *     {@link Empty }
     *     
     */
    public Empty getNOOPTIONS() {
        return nooptions;
    }

    /**
     * Sets the value of the nooptions property.
     * 
     * @param value
     *     allowed object is
     *     {@link Empty }
     *     
     */
    public void setNOOPTIONS(Empty value) {
        this.nooptions = value;
    }

    /**
     * Gets the value of the options property.
     * 
     * @return
     *     possible object is
     *     {@link Empty }
     *     
     */
    public Empty getOPTIONS() {
        return options;
    }

    /**
     * Sets the value of the options property.
     * 
     * @param value
     *     allowed object is
     *     {@link Empty }
     *     
     */
    public void setOPTIONS(Empty value) {
        this.options = value;
    }

    /**
     * Gets the value of the optionsdescr property.
     * 
     * @return
     *     possible object is
     *     {@link TextFtMultiLines }
     *     
     */
    public TextFtMultiLines getOPTIONSDESCR() {
        return optionsdescr;
    }

    /**
     * Sets the value of the optionsdescr property.
     * 
     * @param value
     *     allowed object is
     *     {@link TextFtMultiLines }
     *     
     */
    public void setOPTIONSDESCR(TextFtMultiLines value) {
        this.optionsdescr = value;
    }

    /**
     * Gets the value of the noeuprogrrelated property.
     * 
     * @return
     *     possible object is
     *     {@link Empty }
     *     
     */
    public Empty getNOEUPROGRRELATED() {
        return noeuprogrrelated;
    }

    /**
     * Sets the value of the noeuprogrrelated property.
     * 
     * @param value
     *     allowed object is
     *     {@link Empty }
     *     
     */
    public void setNOEUPROGRRELATED(Empty value) {
        this.noeuprogrrelated = value;
    }

    /**
     * Gets the value of the euprogrrelated property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getEUPROGRRELATED() {
        return euprogrrelated;
    }

    /**
     * Sets the value of the euprogrrelated property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setEUPROGRRELATED(String value) {
        this.euprogrrelated = value;
    }

    /**
     * Gets the value of the infoadd property.
     * 
     * @return
     *     possible object is
     *     {@link TextFtMultiLines }
     *     
     */
    public TextFtMultiLines getINFOADD() {
        return infoadd;
    }

    /**
     * Sets the value of the infoadd property.
     * 
     * @param value
     *     allowed object is
     *     {@link TextFtMultiLines }
     *     
     */
    public void setINFOADD(TextFtMultiLines value) {
        this.infoadd = value;
    }

    /**
     * Gets the value of the item property.
     * 
     */
    public int getITEM() {
        return item;
    }

    /**
     * Sets the value of the item property.
     * 
     */
    public void setITEM(int value) {
        this.item = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ObjectF15)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final ObjectF15 that = ((ObjectF15) object);
        {
            TITLE lhsTITLE;
            lhsTITLE = this.getTITLE();
            TITLE rhsTITLE;
            rhsTITLE = that.getTITLE();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "title", lhsTITLE), LocatorUtils.property(thatLocator, "title", rhsTITLE), lhsTITLE, rhsTITLE)) {
                return false;
            }
        }
        {
            String lhsLOTNO;
            lhsLOTNO = this.getLOTNO();
            String rhsLOTNO;
            rhsLOTNO = that.getLOTNO();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lotno", lhsLOTNO), LocatorUtils.property(thatLocator, "lotno", rhsLOTNO), lhsLOTNO, rhsLOTNO)) {
                return false;
            }
        }
        {
            List<CpvSet> lhsCPVADDITIONALS;
            lhsCPVADDITIONALS = (((this.cpvadditionals!= null)&&(!this.cpvadditionals.isEmpty()))?this.getCPVADDITIONALS():null);
            List<CpvSet> rhsCPVADDITIONALS;
            rhsCPVADDITIONALS = (((that.cpvadditionals!= null)&&(!that.cpvadditionals.isEmpty()))?that.getCPVADDITIONALS():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "cpvadditionals", lhsCPVADDITIONALS), LocatorUtils.property(thatLocator, "cpvadditionals", rhsCPVADDITIONALS), lhsCPVADDITIONALS, rhsCPVADDITIONALS)) {
                return false;
            }
        }
        {
            List<NUTS> lhsNUTS;
            lhsNUTS = (((this.nuts!= null)&&(!this.nuts.isEmpty()))?this.getNUTS():null);
            List<NUTS> rhsNUTS;
            rhsNUTS = (((that.nuts!= null)&&(!that.nuts.isEmpty()))?that.getNUTS():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "nuts", lhsNUTS), LocatorUtils.property(thatLocator, "nuts", rhsNUTS), lhsNUTS, rhsNUTS)) {
                return false;
            }
        }
        {
            TextFtMultiLines lhsMAINSITE;
            lhsMAINSITE = this.getMAINSITE();
            TextFtMultiLines rhsMAINSITE;
            rhsMAINSITE = that.getMAINSITE();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "mainsite", lhsMAINSITE), LocatorUtils.property(thatLocator, "mainsite", rhsMAINSITE), lhsMAINSITE, rhsMAINSITE)) {
                return false;
            }
        }
        {
            TextFtMultiLines lhsSHORTDESCR;
            lhsSHORTDESCR = this.getSHORTDESCR();
            TextFtMultiLines rhsSHORTDESCR;
            rhsSHORTDESCR = that.getSHORTDESCR();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "shortdescr", lhsSHORTDESCR), LocatorUtils.property(thatLocator, "shortdescr", rhsSHORTDESCR), lhsSHORTDESCR, rhsSHORTDESCR)) {
                return false;
            }
        }
        {
            ObjectF15 .DIRECTIVE200981EC lhsDIRECTIVE200981EC;
            lhsDIRECTIVE200981EC = this.getDIRECTIVE200981EC();
            ObjectF15 .DIRECTIVE200981EC rhsDIRECTIVE200981EC;
            rhsDIRECTIVE200981EC = that.getDIRECTIVE200981EC();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "directive200981EC", lhsDIRECTIVE200981EC), LocatorUtils.property(thatLocator, "directive200981EC", rhsDIRECTIVE200981EC), lhsDIRECTIVE200981EC, rhsDIRECTIVE200981EC)) {
                return false;
            }
        }
        {
            ObjectF15 .DIRECTIVE201425EU lhsDIRECTIVE201425EU;
            lhsDIRECTIVE201425EU = this.getDIRECTIVE201425EU();
            ObjectF15 .DIRECTIVE201425EU rhsDIRECTIVE201425EU;
            rhsDIRECTIVE201425EU = that.getDIRECTIVE201425EU();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "directive201425EU", lhsDIRECTIVE201425EU), LocatorUtils.property(thatLocator, "directive201425EU", rhsDIRECTIVE201425EU), lhsDIRECTIVE201425EU, rhsDIRECTIVE201425EU)) {
                return false;
            }
        }
        {
            ObjectF15 .DIRECTIVE201424EU lhsDIRECTIVE201424EU;
            lhsDIRECTIVE201424EU = this.getDIRECTIVE201424EU();
            ObjectF15 .DIRECTIVE201424EU rhsDIRECTIVE201424EU;
            rhsDIRECTIVE201424EU = that.getDIRECTIVE201424EU();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "directive201424EU", lhsDIRECTIVE201424EU), LocatorUtils.property(thatLocator, "directive201424EU", rhsDIRECTIVE201424EU), lhsDIRECTIVE201424EU, rhsDIRECTIVE201424EU)) {
                return false;
            }
        }
        {
            ObjectF15 .DIRECTIVE201423EU lhsDIRECTIVE201423EU;
            lhsDIRECTIVE201423EU = this.getDIRECTIVE201423EU();
            ObjectF15 .DIRECTIVE201423EU rhsDIRECTIVE201423EU;
            rhsDIRECTIVE201423EU = that.getDIRECTIVE201423EU();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "directive201423EU", lhsDIRECTIVE201423EU), LocatorUtils.property(thatLocator, "directive201423EU", rhsDIRECTIVE201423EU), lhsDIRECTIVE201423EU, rhsDIRECTIVE201423EU)) {
                return false;
            }
        }
        {
            Empty lhsNOOPTIONS;
            lhsNOOPTIONS = this.getNOOPTIONS();
            Empty rhsNOOPTIONS;
            rhsNOOPTIONS = that.getNOOPTIONS();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "nooptions", lhsNOOPTIONS), LocatorUtils.property(thatLocator, "nooptions", rhsNOOPTIONS), lhsNOOPTIONS, rhsNOOPTIONS)) {
                return false;
            }
        }
        {
            Empty lhsOPTIONS;
            lhsOPTIONS = this.getOPTIONS();
            Empty rhsOPTIONS;
            rhsOPTIONS = that.getOPTIONS();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "options", lhsOPTIONS), LocatorUtils.property(thatLocator, "options", rhsOPTIONS), lhsOPTIONS, rhsOPTIONS)) {
                return false;
            }
        }
        {
            TextFtMultiLines lhsOPTIONSDESCR;
            lhsOPTIONSDESCR = this.getOPTIONSDESCR();
            TextFtMultiLines rhsOPTIONSDESCR;
            rhsOPTIONSDESCR = that.getOPTIONSDESCR();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "optionsdescr", lhsOPTIONSDESCR), LocatorUtils.property(thatLocator, "optionsdescr", rhsOPTIONSDESCR), lhsOPTIONSDESCR, rhsOPTIONSDESCR)) {
                return false;
            }
        }
        {
            Empty lhsNOEUPROGRRELATED;
            lhsNOEUPROGRRELATED = this.getNOEUPROGRRELATED();
            Empty rhsNOEUPROGRRELATED;
            rhsNOEUPROGRRELATED = that.getNOEUPROGRRELATED();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "noeuprogrrelated", lhsNOEUPROGRRELATED), LocatorUtils.property(thatLocator, "noeuprogrrelated", rhsNOEUPROGRRELATED), lhsNOEUPROGRRELATED, rhsNOEUPROGRRELATED)) {
                return false;
            }
        }
        {
            String lhsEUPROGRRELATED;
            lhsEUPROGRRELATED = this.getEUPROGRRELATED();
            String rhsEUPROGRRELATED;
            rhsEUPROGRRELATED = that.getEUPROGRRELATED();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "euprogrrelated", lhsEUPROGRRELATED), LocatorUtils.property(thatLocator, "euprogrrelated", rhsEUPROGRRELATED), lhsEUPROGRRELATED, rhsEUPROGRRELATED)) {
                return false;
            }
        }
        {
            TextFtMultiLines lhsINFOADD;
            lhsINFOADD = this.getINFOADD();
            TextFtMultiLines rhsINFOADD;
            rhsINFOADD = that.getINFOADD();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "infoadd", lhsINFOADD), LocatorUtils.property(thatLocator, "infoadd", rhsINFOADD), lhsINFOADD, rhsINFOADD)) {
                return false;
            }
        }
        {
            int lhsITEM;
            lhsITEM = (true?this.getITEM(): 0);
            int rhsITEM;
            rhsITEM = (true?that.getITEM(): 0);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "item", lhsITEM), LocatorUtils.property(thatLocator, "item", rhsITEM), lhsITEM, rhsITEM)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            TITLE theTITLE;
            theTITLE = this.getTITLE();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "title", theTITLE), currentHashCode, theTITLE);
        }
        {
            String theLOTNO;
            theLOTNO = this.getLOTNO();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lotno", theLOTNO), currentHashCode, theLOTNO);
        }
        {
            List<CpvSet> theCPVADDITIONALS;
            theCPVADDITIONALS = (((this.cpvadditionals!= null)&&(!this.cpvadditionals.isEmpty()))?this.getCPVADDITIONALS():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cpvadditionals", theCPVADDITIONALS), currentHashCode, theCPVADDITIONALS);
        }
        {
            List<NUTS> theNUTS;
            theNUTS = (((this.nuts!= null)&&(!this.nuts.isEmpty()))?this.getNUTS():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "nuts", theNUTS), currentHashCode, theNUTS);
        }
        {
            TextFtMultiLines theMAINSITE;
            theMAINSITE = this.getMAINSITE();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mainsite", theMAINSITE), currentHashCode, theMAINSITE);
        }
        {
            TextFtMultiLines theSHORTDESCR;
            theSHORTDESCR = this.getSHORTDESCR();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shortdescr", theSHORTDESCR), currentHashCode, theSHORTDESCR);
        }
        {
            ObjectF15 .DIRECTIVE200981EC theDIRECTIVE200981EC;
            theDIRECTIVE200981EC = this.getDIRECTIVE200981EC();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "directive200981EC", theDIRECTIVE200981EC), currentHashCode, theDIRECTIVE200981EC);
        }
        {
            ObjectF15 .DIRECTIVE201425EU theDIRECTIVE201425EU;
            theDIRECTIVE201425EU = this.getDIRECTIVE201425EU();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "directive201425EU", theDIRECTIVE201425EU), currentHashCode, theDIRECTIVE201425EU);
        }
        {
            ObjectF15 .DIRECTIVE201424EU theDIRECTIVE201424EU;
            theDIRECTIVE201424EU = this.getDIRECTIVE201424EU();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "directive201424EU", theDIRECTIVE201424EU), currentHashCode, theDIRECTIVE201424EU);
        }
        {
            ObjectF15 .DIRECTIVE201423EU theDIRECTIVE201423EU;
            theDIRECTIVE201423EU = this.getDIRECTIVE201423EU();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "directive201423EU", theDIRECTIVE201423EU), currentHashCode, theDIRECTIVE201423EU);
        }
        {
            Empty theNOOPTIONS;
            theNOOPTIONS = this.getNOOPTIONS();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "nooptions", theNOOPTIONS), currentHashCode, theNOOPTIONS);
        }
        {
            Empty theOPTIONS;
            theOPTIONS = this.getOPTIONS();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "options", theOPTIONS), currentHashCode, theOPTIONS);
        }
        {
            TextFtMultiLines theOPTIONSDESCR;
            theOPTIONSDESCR = this.getOPTIONSDESCR();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "optionsdescr", theOPTIONSDESCR), currentHashCode, theOPTIONSDESCR);
        }
        {
            Empty theNOEUPROGRRELATED;
            theNOEUPROGRRELATED = this.getNOEUPROGRRELATED();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "noeuprogrrelated", theNOEUPROGRRELATED), currentHashCode, theNOEUPROGRRELATED);
        }
        {
            String theEUPROGRRELATED;
            theEUPROGRRELATED = this.getEUPROGRRELATED();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "euprogrrelated", theEUPROGRRELATED), currentHashCode, theEUPROGRRELATED);
        }
        {
            TextFtMultiLines theINFOADD;
            theINFOADD = this.getINFOADD();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "infoadd", theINFOADD), currentHashCode, theINFOADD);
        }
        {
            int theITEM;
            theITEM = (true?this.getITEM(): 0);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "item", theITEM), currentHashCode, theITEM);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            TITLE theTITLE;
            theTITLE = this.getTITLE();
            strategy.appendField(locator, this, "title", buffer, theTITLE);
        }
        {
            String theLOTNO;
            theLOTNO = this.getLOTNO();
            strategy.appendField(locator, this, "lotno", buffer, theLOTNO);
        }
        {
            List<CpvSet> theCPVADDITIONALS;
            theCPVADDITIONALS = (((this.cpvadditionals!= null)&&(!this.cpvadditionals.isEmpty()))?this.getCPVADDITIONALS():null);
            strategy.appendField(locator, this, "cpvadditionals", buffer, theCPVADDITIONALS);
        }
        {
            List<NUTS> theNUTS;
            theNUTS = (((this.nuts!= null)&&(!this.nuts.isEmpty()))?this.getNUTS():null);
            strategy.appendField(locator, this, "nuts", buffer, theNUTS);
        }
        {
            TextFtMultiLines theMAINSITE;
            theMAINSITE = this.getMAINSITE();
            strategy.appendField(locator, this, "mainsite", buffer, theMAINSITE);
        }
        {
            TextFtMultiLines theSHORTDESCR;
            theSHORTDESCR = this.getSHORTDESCR();
            strategy.appendField(locator, this, "shortdescr", buffer, theSHORTDESCR);
        }
        {
            ObjectF15 .DIRECTIVE200981EC theDIRECTIVE200981EC;
            theDIRECTIVE200981EC = this.getDIRECTIVE200981EC();
            strategy.appendField(locator, this, "directive200981EC", buffer, theDIRECTIVE200981EC);
        }
        {
            ObjectF15 .DIRECTIVE201425EU theDIRECTIVE201425EU;
            theDIRECTIVE201425EU = this.getDIRECTIVE201425EU();
            strategy.appendField(locator, this, "directive201425EU", buffer, theDIRECTIVE201425EU);
        }
        {
            ObjectF15 .DIRECTIVE201424EU theDIRECTIVE201424EU;
            theDIRECTIVE201424EU = this.getDIRECTIVE201424EU();
            strategy.appendField(locator, this, "directive201424EU", buffer, theDIRECTIVE201424EU);
        }
        {
            ObjectF15 .DIRECTIVE201423EU theDIRECTIVE201423EU;
            theDIRECTIVE201423EU = this.getDIRECTIVE201423EU();
            strategy.appendField(locator, this, "directive201423EU", buffer, theDIRECTIVE201423EU);
        }
        {
            Empty theNOOPTIONS;
            theNOOPTIONS = this.getNOOPTIONS();
            strategy.appendField(locator, this, "nooptions", buffer, theNOOPTIONS);
        }
        {
            Empty theOPTIONS;
            theOPTIONS = this.getOPTIONS();
            strategy.appendField(locator, this, "options", buffer, theOPTIONS);
        }
        {
            TextFtMultiLines theOPTIONSDESCR;
            theOPTIONSDESCR = this.getOPTIONSDESCR();
            strategy.appendField(locator, this, "optionsdescr", buffer, theOPTIONSDESCR);
        }
        {
            Empty theNOEUPROGRRELATED;
            theNOEUPROGRRELATED = this.getNOEUPROGRRELATED();
            strategy.appendField(locator, this, "noeuprogrrelated", buffer, theNOEUPROGRRELATED);
        }
        {
            String theEUPROGRRELATED;
            theEUPROGRRELATED = this.getEUPROGRRELATED();
            strategy.appendField(locator, this, "euprogrrelated", buffer, theEUPROGRRELATED);
        }
        {
            TextFtMultiLines theINFOADD;
            theINFOADD = this.getINFOADD();
            strategy.appendField(locator, this, "infoadd", buffer, theINFOADD);
        }
        {
            int theITEM;
            theITEM = (true?this.getITEM(): 0);
            strategy.appendField(locator, this, "item", buffer, theITEM);
        }
        return buffer;
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;choice>
     *         &lt;element name="AC_PRICE" type="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}empty"/>
     *         &lt;element name="AC_CRITERIA" type="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}ac_definition" maxOccurs="20"/>
     *       &lt;/choice>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "accriterias",
        "acprice"
    })
    public static class DIRECTIVE200981EC
        implements Equals, HashCode, ToString
    {

        @XmlElement(name = "AC_CRITERIA")
        protected List<AcDefinition> accriterias;
        @XmlElement(name = "AC_PRICE")
        protected Empty acprice;

        /**
         * Gets the value of the accriterias property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the accriterias property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getACCRITERIAS().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link AcDefinition }
         * 
         * 
         */
        public List<AcDefinition> getACCRITERIAS() {
            if (accriterias == null) {
                accriterias = new ArrayList<AcDefinition>();
            }
            return this.accriterias;
        }

        /**
         * Gets the value of the acprice property.
         * 
         * @return
         *     possible object is
         *     {@link Empty }
         *     
         */
        public Empty getACPRICE() {
            return acprice;
        }

        /**
         * Sets the value of the acprice property.
         * 
         * @param value
         *     allowed object is
         *     {@link Empty }
         *     
         */
        public void setACPRICE(Empty value) {
            this.acprice = value;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ObjectF15 .DIRECTIVE200981EC)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ObjectF15 .DIRECTIVE200981EC that = ((ObjectF15 .DIRECTIVE200981EC) object);
            {
                List<AcDefinition> lhsACCRITERIAS;
                lhsACCRITERIAS = (((this.accriterias!= null)&&(!this.accriterias.isEmpty()))?this.getACCRITERIAS():null);
                List<AcDefinition> rhsACCRITERIAS;
                rhsACCRITERIAS = (((that.accriterias!= null)&&(!that.accriterias.isEmpty()))?that.getACCRITERIAS():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "accriterias", lhsACCRITERIAS), LocatorUtils.property(thatLocator, "accriterias", rhsACCRITERIAS), lhsACCRITERIAS, rhsACCRITERIAS)) {
                    return false;
                }
            }
            {
                Empty lhsACPRICE;
                lhsACPRICE = this.getACPRICE();
                Empty rhsACPRICE;
                rhsACPRICE = that.getACPRICE();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "acprice", lhsACPRICE), LocatorUtils.property(thatLocator, "acprice", rhsACPRICE), lhsACPRICE, rhsACPRICE)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<AcDefinition> theACCRITERIAS;
                theACCRITERIAS = (((this.accriterias!= null)&&(!this.accriterias.isEmpty()))?this.getACCRITERIAS():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "accriterias", theACCRITERIAS), currentHashCode, theACCRITERIAS);
            }
            {
                Empty theACPRICE;
                theACPRICE = this.getACPRICE();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "acprice", theACPRICE), currentHashCode, theACPRICE);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<AcDefinition> theACCRITERIAS;
                theACCRITERIAS = (((this.accriterias!= null)&&(!this.accriterias.isEmpty()))?this.getACCRITERIAS():null);
                strategy.appendField(locator, this, "accriterias", buffer, theACCRITERIAS);
            }
            {
                Empty theACPRICE;
                theACPRICE = this.getACPRICE();
                strategy.appendField(locator, this, "acprice", buffer, theACPRICE);
            }
            return buffer;
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}AC_CRITERION" maxOccurs="20"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "accriterions"
    })
    public static class DIRECTIVE201423EU
        implements Equals, HashCode, ToString
    {

        @XmlElement(name = "AC_CRITERION", required = true)
        protected List<String> accriterions;

        /**
         * Gets the value of the accriterions property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the accriterions property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getACCRITERIONS().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link String }
         * 
         * 
         */
        public List<String> getACCRITERIONS() {
            if (accriterions == null) {
                accriterions = new ArrayList<String>();
            }
            return this.accriterions;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ObjectF15 .DIRECTIVE201423EU)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ObjectF15 .DIRECTIVE201423EU that = ((ObjectF15 .DIRECTIVE201423EU) object);
            {
                List<String> lhsACCRITERIONS;
                lhsACCRITERIONS = (((this.accriterions!= null)&&(!this.accriterions.isEmpty()))?this.getACCRITERIONS():null);
                List<String> rhsACCRITERIONS;
                rhsACCRITERIONS = (((that.accriterions!= null)&&(!that.accriterions.isEmpty()))?that.getACCRITERIONS():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "accriterions", lhsACCRITERIONS), LocatorUtils.property(thatLocator, "accriterions", rhsACCRITERIONS), lhsACCRITERIONS, rhsACCRITERIONS)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<String> theACCRITERIONS;
                theACCRITERIONS = (((this.accriterions!= null)&&(!this.accriterions.isEmpty()))?this.getACCRITERIONS():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "accriterions", theACCRITERIONS), currentHashCode, theACCRITERIONS);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<String> theACCRITERIONS;
                theACCRITERIONS = (((this.accriterions!= null)&&(!this.accriterions.isEmpty()))?this.getACCRITERIONS():null);
                strategy.appendField(locator, this, "accriterions", buffer, theACCRITERIONS);
            }
            return buffer;
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}award_criteria"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "acqualities",
        "acprice",
        "accosts"
    })
    public static class DIRECTIVE201424EU
        implements Equals, HashCode, ToString
    {

        @XmlElement(name = "AC_QUALITY")
        protected List<AcDefinition> acqualities;
        @XmlElement(name = "AC_PRICE")
        protected ACPRICE acprice;
        @XmlElement(name = "AC_COST")
        protected List<AcDefinition> accosts;

        /**
         * Gets the value of the acqualities property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the acqualities property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getACQUALITIES().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link AcDefinition }
         * 
         * 
         */
        public List<AcDefinition> getACQUALITIES() {
            if (acqualities == null) {
                acqualities = new ArrayList<AcDefinition>();
            }
            return this.acqualities;
        }

        /**
         * Gets the value of the acprice property.
         * 
         * @return
         *     possible object is
         *     {@link ACPRICE }
         *     
         */
        public ACPRICE getACPRICE() {
            return acprice;
        }

        /**
         * Sets the value of the acprice property.
         * 
         * @param value
         *     allowed object is
         *     {@link ACPRICE }
         *     
         */
        public void setACPRICE(ACPRICE value) {
            this.acprice = value;
        }

        /**
         * Gets the value of the accosts property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the accosts property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getACCOSTS().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link AcDefinition }
         * 
         * 
         */
        public List<AcDefinition> getACCOSTS() {
            if (accosts == null) {
                accosts = new ArrayList<AcDefinition>();
            }
            return this.accosts;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ObjectF15 .DIRECTIVE201424EU)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ObjectF15 .DIRECTIVE201424EU that = ((ObjectF15 .DIRECTIVE201424EU) object);
            {
                List<AcDefinition> lhsACQUALITIES;
                lhsACQUALITIES = (((this.acqualities!= null)&&(!this.acqualities.isEmpty()))?this.getACQUALITIES():null);
                List<AcDefinition> rhsACQUALITIES;
                rhsACQUALITIES = (((that.acqualities!= null)&&(!that.acqualities.isEmpty()))?that.getACQUALITIES():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "acqualities", lhsACQUALITIES), LocatorUtils.property(thatLocator, "acqualities", rhsACQUALITIES), lhsACQUALITIES, rhsACQUALITIES)) {
                    return false;
                }
            }
            {
                ACPRICE lhsACPRICE;
                lhsACPRICE = this.getACPRICE();
                ACPRICE rhsACPRICE;
                rhsACPRICE = that.getACPRICE();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "acprice", lhsACPRICE), LocatorUtils.property(thatLocator, "acprice", rhsACPRICE), lhsACPRICE, rhsACPRICE)) {
                    return false;
                }
            }
            {
                List<AcDefinition> lhsACCOSTS;
                lhsACCOSTS = (((this.accosts!= null)&&(!this.accosts.isEmpty()))?this.getACCOSTS():null);
                List<AcDefinition> rhsACCOSTS;
                rhsACCOSTS = (((that.accosts!= null)&&(!that.accosts.isEmpty()))?that.getACCOSTS():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "accosts", lhsACCOSTS), LocatorUtils.property(thatLocator, "accosts", rhsACCOSTS), lhsACCOSTS, rhsACCOSTS)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<AcDefinition> theACQUALITIES;
                theACQUALITIES = (((this.acqualities!= null)&&(!this.acqualities.isEmpty()))?this.getACQUALITIES():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "acqualities", theACQUALITIES), currentHashCode, theACQUALITIES);
            }
            {
                ACPRICE theACPRICE;
                theACPRICE = this.getACPRICE();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "acprice", theACPRICE), currentHashCode, theACPRICE);
            }
            {
                List<AcDefinition> theACCOSTS;
                theACCOSTS = (((this.accosts!= null)&&(!this.accosts.isEmpty()))?this.getACCOSTS():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "accosts", theACCOSTS), currentHashCode, theACCOSTS);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<AcDefinition> theACQUALITIES;
                theACQUALITIES = (((this.acqualities!= null)&&(!this.acqualities.isEmpty()))?this.getACQUALITIES():null);
                strategy.appendField(locator, this, "acqualities", buffer, theACQUALITIES);
            }
            {
                ACPRICE theACPRICE;
                theACPRICE = this.getACPRICE();
                strategy.appendField(locator, this, "acprice", buffer, theACPRICE);
            }
            {
                List<AcDefinition> theACCOSTS;
                theACCOSTS = (((this.accosts!= null)&&(!this.accosts.isEmpty()))?this.getACCOSTS():null);
                strategy.appendField(locator, this, "accosts", buffer, theACCOSTS);
            }
            return buffer;
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;group ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}award_criteria"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "acqualities",
        "acprice",
        "accosts"
    })
    public static class DIRECTIVE201425EU
        implements Equals, HashCode, ToString
    {

        @XmlElement(name = "AC_QUALITY")
        protected List<AcDefinition> acqualities;
        @XmlElement(name = "AC_PRICE")
        protected ACPRICE acprice;
        @XmlElement(name = "AC_COST")
        protected List<AcDefinition> accosts;

        /**
         * Gets the value of the acqualities property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the acqualities property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getACQUALITIES().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link AcDefinition }
         * 
         * 
         */
        public List<AcDefinition> getACQUALITIES() {
            if (acqualities == null) {
                acqualities = new ArrayList<AcDefinition>();
            }
            return this.acqualities;
        }

        /**
         * Gets the value of the acprice property.
         * 
         * @return
         *     possible object is
         *     {@link ACPRICE }
         *     
         */
        public ACPRICE getACPRICE() {
            return acprice;
        }

        /**
         * Sets the value of the acprice property.
         * 
         * @param value
         *     allowed object is
         *     {@link ACPRICE }
         *     
         */
        public void setACPRICE(ACPRICE value) {
            this.acprice = value;
        }

        /**
         * Gets the value of the accosts property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the accosts property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getACCOSTS().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link AcDefinition }
         * 
         * 
         */
        public List<AcDefinition> getACCOSTS() {
            if (accosts == null) {
                accosts = new ArrayList<AcDefinition>();
            }
            return this.accosts;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ObjectF15 .DIRECTIVE201425EU)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ObjectF15 .DIRECTIVE201425EU that = ((ObjectF15 .DIRECTIVE201425EU) object);
            {
                List<AcDefinition> lhsACQUALITIES;
                lhsACQUALITIES = (((this.acqualities!= null)&&(!this.acqualities.isEmpty()))?this.getACQUALITIES():null);
                List<AcDefinition> rhsACQUALITIES;
                rhsACQUALITIES = (((that.acqualities!= null)&&(!that.acqualities.isEmpty()))?that.getACQUALITIES():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "acqualities", lhsACQUALITIES), LocatorUtils.property(thatLocator, "acqualities", rhsACQUALITIES), lhsACQUALITIES, rhsACQUALITIES)) {
                    return false;
                }
            }
            {
                ACPRICE lhsACPRICE;
                lhsACPRICE = this.getACPRICE();
                ACPRICE rhsACPRICE;
                rhsACPRICE = that.getACPRICE();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "acprice", lhsACPRICE), LocatorUtils.property(thatLocator, "acprice", rhsACPRICE), lhsACPRICE, rhsACPRICE)) {
                    return false;
                }
            }
            {
                List<AcDefinition> lhsACCOSTS;
                lhsACCOSTS = (((this.accosts!= null)&&(!this.accosts.isEmpty()))?this.getACCOSTS():null);
                List<AcDefinition> rhsACCOSTS;
                rhsACCOSTS = (((that.accosts!= null)&&(!that.accosts.isEmpty()))?that.getACCOSTS():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "accosts", lhsACCOSTS), LocatorUtils.property(thatLocator, "accosts", rhsACCOSTS), lhsACCOSTS, rhsACCOSTS)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<AcDefinition> theACQUALITIES;
                theACQUALITIES = (((this.acqualities!= null)&&(!this.acqualities.isEmpty()))?this.getACQUALITIES():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "acqualities", theACQUALITIES), currentHashCode, theACQUALITIES);
            }
            {
                ACPRICE theACPRICE;
                theACPRICE = this.getACPRICE();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "acprice", theACPRICE), currentHashCode, theACPRICE);
            }
            {
                List<AcDefinition> theACCOSTS;
                theACCOSTS = (((this.accosts!= null)&&(!this.accosts.isEmpty()))?this.getACCOSTS():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "accosts", theACCOSTS), currentHashCode, theACCOSTS);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<AcDefinition> theACQUALITIES;
                theACQUALITIES = (((this.acqualities!= null)&&(!this.acqualities.isEmpty()))?this.getACQUALITIES():null);
                strategy.appendField(locator, this, "acqualities", buffer, theACQUALITIES);
            }
            {
                ACPRICE theACPRICE;
                theACPRICE = this.getACPRICE();
                strategy.appendField(locator, this, "acprice", buffer, theACPRICE);
            }
            {
                List<AcDefinition> theACCOSTS;
                theACCOSTS = (((this.accosts!= null)&&(!this.accosts.isEmpty()))?this.getACCOSTS():null);
                strategy.appendField(locator, this, "accosts", buffer, theACCOSTS);
            }
            return buffer;
        }

    }

}
