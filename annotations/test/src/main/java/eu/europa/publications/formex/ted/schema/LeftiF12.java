//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.12.04 at 01:40:50 PM MEZ 
//


package eu.europa.publications.formex.ted.schema;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Section III: LEFTI
 * 
 * <p>Java class for lefti_f12 complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="lefti_f12">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}CRITERIA_SELECTION" minOccurs="0"/>
 *         &lt;choice>
 *           &lt;element name="PARTICULAR_PROFESSION" type="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}string_400"/>
 *           &lt;element name="NO_PARTICULAR_PROFESSION" type="{http://formex.publications.europa.eu/ted/schema/reception/R2.0.9.S01}empty"/>
 *         &lt;/choice>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "lefti_f12", propOrder = {
    "criteriaselection",
    "noparticularprofession",
    "particularprofession"
})
public class LeftiF12
    implements Equals, HashCode, ToString
{

    @XmlElement(name = "CRITERIA_SELECTION")
    protected TextFtMultiLines criteriaselection;
    @XmlElement(name = "NO_PARTICULAR_PROFESSION")
    protected Empty noparticularprofession;
    @XmlElement(name = "PARTICULAR_PROFESSION")
    protected String particularprofession;

    /**
     * Gets the value of the criteriaselection property.
     * 
     * @return
     *     possible object is
     *     {@link TextFtMultiLines }
     *     
     */
    public TextFtMultiLines getCRITERIASELECTION() {
        return criteriaselection;
    }

    /**
     * Sets the value of the criteriaselection property.
     * 
     * @param value
     *     allowed object is
     *     {@link TextFtMultiLines }
     *     
     */
    public void setCRITERIASELECTION(TextFtMultiLines value) {
        this.criteriaselection = value;
    }

    /**
     * Gets the value of the noparticularprofession property.
     * 
     * @return
     *     possible object is
     *     {@link Empty }
     *     
     */
    public Empty getNOPARTICULARPROFESSION() {
        return noparticularprofession;
    }

    /**
     * Sets the value of the noparticularprofession property.
     * 
     * @param value
     *     allowed object is
     *     {@link Empty }
     *     
     */
    public void setNOPARTICULARPROFESSION(Empty value) {
        this.noparticularprofession = value;
    }

    /**
     * Gets the value of the particularprofession property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPARTICULARPROFESSION() {
        return particularprofession;
    }

    /**
     * Sets the value of the particularprofession property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPARTICULARPROFESSION(String value) {
        this.particularprofession = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof LeftiF12)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final LeftiF12 that = ((LeftiF12) object);
        {
            TextFtMultiLines lhsCRITERIASELECTION;
            lhsCRITERIASELECTION = this.getCRITERIASELECTION();
            TextFtMultiLines rhsCRITERIASELECTION;
            rhsCRITERIASELECTION = that.getCRITERIASELECTION();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "criteriaselection", lhsCRITERIASELECTION), LocatorUtils.property(thatLocator, "criteriaselection", rhsCRITERIASELECTION), lhsCRITERIASELECTION, rhsCRITERIASELECTION)) {
                return false;
            }
        }
        {
            Empty lhsNOPARTICULARPROFESSION;
            lhsNOPARTICULARPROFESSION = this.getNOPARTICULARPROFESSION();
            Empty rhsNOPARTICULARPROFESSION;
            rhsNOPARTICULARPROFESSION = that.getNOPARTICULARPROFESSION();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "noparticularprofession", lhsNOPARTICULARPROFESSION), LocatorUtils.property(thatLocator, "noparticularprofession", rhsNOPARTICULARPROFESSION), lhsNOPARTICULARPROFESSION, rhsNOPARTICULARPROFESSION)) {
                return false;
            }
        }
        {
            String lhsPARTICULARPROFESSION;
            lhsPARTICULARPROFESSION = this.getPARTICULARPROFESSION();
            String rhsPARTICULARPROFESSION;
            rhsPARTICULARPROFESSION = that.getPARTICULARPROFESSION();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "particularprofession", lhsPARTICULARPROFESSION), LocatorUtils.property(thatLocator, "particularprofession", rhsPARTICULARPROFESSION), lhsPARTICULARPROFESSION, rhsPARTICULARPROFESSION)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            TextFtMultiLines theCRITERIASELECTION;
            theCRITERIASELECTION = this.getCRITERIASELECTION();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "criteriaselection", theCRITERIASELECTION), currentHashCode, theCRITERIASELECTION);
        }
        {
            Empty theNOPARTICULARPROFESSION;
            theNOPARTICULARPROFESSION = this.getNOPARTICULARPROFESSION();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "noparticularprofession", theNOPARTICULARPROFESSION), currentHashCode, theNOPARTICULARPROFESSION);
        }
        {
            String thePARTICULARPROFESSION;
            thePARTICULARPROFESSION = this.getPARTICULARPROFESSION();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "particularprofession", thePARTICULARPROFESSION), currentHashCode, thePARTICULARPROFESSION);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            TextFtMultiLines theCRITERIASELECTION;
            theCRITERIASELECTION = this.getCRITERIASELECTION();
            strategy.appendField(locator, this, "criteriaselection", buffer, theCRITERIASELECTION);
        }
        {
            Empty theNOPARTICULARPROFESSION;
            theNOPARTICULARPROFESSION = this.getNOPARTICULARPROFESSION();
            strategy.appendField(locator, this, "noparticularprofession", buffer, theNOPARTICULARPROFESSION);
        }
        {
            String thePARTICULARPROFESSION;
            thePARTICULARPROFESSION = this.getPARTICULARPROFESSION();
            strategy.appendField(locator, this, "particularprofession", buffer, thePARTICULARPROFESSION);
        }
        return buffer;
    }

}
